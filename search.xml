<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CUMT算法考试总结</title>
      <link href="/2021/12/08/2021-12-8-suan-fa-zong-jie/"/>
      <url>/2021/12/08/2021-12-8-suan-fa-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="算法考试总结"><a href="#算法考试总结" class="headerlink" title="算法考试总结"></a>算法考试总结</h1><blockquote><p>作者：lowlyli</p><p>时间：2021-12-8</p><p>内容：含泪写下这个算法的总结，太离谱了，我真的写不完，不会写。</p></blockquote><h2 id="问题回忆"><a href="#问题回忆" class="headerlink" title="问题回忆"></a>问题回忆</h2><h3 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h3><blockquote><p>这题其实很简单，但比以往的上课题一点点复杂</p></blockquote><p>大意：</p><script type="math/tex; mode=display">T(n) = \left\{ \begin{array}{c}{1} & n = 1 \\  2T(\frac{n}{2}) + n^2 + 1 & n>1\end{array}\right.</script><p>主定理盒递推都可以</p><h3 id="流水作业调度（变形）"><a href="#流水作业调度（变形）" class="headerlink" title="流水作业调度（变形）"></a>流水作业调度（变形）</h3><p>基本步骤一样，就是这个卷子给的数字和计算规模大，写不完。</p><ol><li><p><strong>问题描述</strong> n个作业要在两台机器M1和M2上进行加工。每个作业加工的顺序都是先在M1上加工，然后在M2加工。M1和M2加工作业$i$所需的时间分别为$a_i$ 和$b_i$。确定n个作业的最优加工顺序，使得加工完成所需的时间最少。</p><p><strong>算法</strong></p><ol><li>分为$N_1,N_2$集合存放 <script type="math/tex">N_1 = \{a_i\leq b_i\} ,N_2 = \{a_i > b_i\}</script></li><li>$N_1$中作业按照$a_i$升序排序，$N_2$中作业按照$b_i$降序排序</li><li>$N_1$连接$N_2$，计算时间</li></ol></li></ol><h3 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h3><p>简单送分题（送命题）</p><p>这题和平时步骤一样，唯一区别就说这个题是10个字母的，上课也只有6，7个的，10个的规模有点大，写了满满一面的步骤和树，画吐了。</p><h3 id="暖气管道最优安排"><a href="#暖气管道最优安排" class="headerlink" title="暖气管道最优安排"></a>暖气管道最优安排</h3><p>这题很迷惑，给了22个点,每个点包括$(x<em>i,y_i)$,问有没有最佳的一个点$(0,y</em>{best})$,这题没见过，考试跳过了，其实就说二分法求中位数</p><p>类似：</p><p>某石油公司计划建造一条由东向西的主输油管道。该管道要穿过一个有n口油井的油田。从每口油井都要有一条输油管道沿最短路经（或南或北）与主管道相连。</p><p>如果给定n口油井的位置，即它们的x坐标（东西向）和y坐标（南北向），应如何确定主管道的最优位置，即使各油井到主管道之间的输油管道长度总和最小的位置？</p><p>给定n口油井的位置，编程计算各油井到主管道之间的输油管道最小长度总和。</p><p><img src="https://s2.loli.net/2021/12/09/G2nFJwBPsKmhgiE.png" alt="这里写图片描述"></p><p>（这15分基本上空了，没时间写，后面想到了，二分中位数，但22个数，每日吐槽题量大）</p><h3 id="活动安排"><a href="#活动安排" class="headerlink" title="活动安排"></a>活动安排</h3><p>这里是等待，有n个顾客，每个人需要$t_i$的服务时间，有m个窗口，求最短的等待时间的安排</p><p>就是贪心，从小到大排序，依次插入窗口。</p><p>（再次吐槽，给了10个数，2窗口，没时间写）</p><h3 id="最长递增子序列"><a href="#最长递增子序列" class="headerlink" title="最长递增子序列"></a>最长递增子序列</h3><p>离谱，如果考实践的时候我还会（其实现在也会写代码）但这里理论分析，属实蚌埠住了，最离谱的是2种方法，放过我吧，我只写了后面的问题求解，理论属实不会。</p><p>这是考场上想到的：居然蒙对了一个，不过第二种属实不会了。</p><script type="math/tex; mode=display">dp[i]=max(dp[j])+1,其中0≤j<i且num[j]<num[i]</script><p>这里自己参考：</p><p>力扣<a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/solution/zui-chang-shang-sheng-zi-xu-lie-by-leetcode-soluti/">最长递增子序列</a></p><p><a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/solution/zui-chang-shang-sheng-zi-xu-lie-by-leetcode-soluti/">https://leetcode-cn.com/problems/longest-increasing-subsequence/solution/zui-chang-shang-sheng-zi-xu-lie-by-leetcode-soluti/</a></p><h3 id="回溯法和分支限界"><a href="#回溯法和分支限界" class="headerlink" title="回溯法和分支限界"></a>回溯法和分支限界</h3><p>这里是0-1背包变形</p><p>但这里要求2次，还是5层的树。</p><p>最后就一点点时间了，稀里糊涂画的，现在想起来，答案估计都有问题。唉~题量也太大了。根本写不完。</p><h2 id="反思总结（也给一点准备建议）"><a href="#反思总结（也给一点准备建议）" class="headerlink" title="反思总结（也给一点准备建议）"></a>反思总结（也给一点准备建议）</h2><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这次考试，题量大的离谱，我这种写的慢的，当年数据库都没写完的人，这根本写不完，除非，我不用思考，但这题还是有点难度，需要思考的，不清楚为啥19如此难。本来2周前就考了，因为突如其来的疫情，推迟了，导致理论和实践间隔久，反正就是只复习了书上，然后老师画的重点，然后就崩了。呜呜呜。</p><h3 id="备考建议"><a href="#备考建议" class="headerlink" title="备考建议:"></a>备考建议:</h3><p>课上内容不太行，建议在平时学习看一遍书就可以开始刷力扣了，培养题感，这里推荐：</p><p> <a href="https://www.programmercarl.com/">代码随想录</a> : <a href="https://www.programmercarl.com/">https://www.programmercarl.com/</a></p><p>可以参考上面的最基础的地方刷，本人在2周多一点刷了100来道，虽然考试帮助不太大，但感觉还是学到了算法的一些精髓。</p><p><img src="https://s2.loli.net/2021/12/09/NiIkxXUwQpVsDWc.png" alt="image-20211209090200310"></p><p>理论的一些可以参考：<a href="https://junyaohu.github.io/2021/10/26/%E3%80%8A%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E3%80%8B%E7%AC%94%E8%AE%B0/">胡神的博客</a></p><p>还是可以的，我的一般吧。</p><p>没有什么了，算法好好学吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 考试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SM4算法</title>
      <link href="/2021/12/05/2021-12-5-sm4-suan-fa/"/>
      <url>/2021/12/05/2021-12-5-sm4-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="SM4算法"><a href="#SM4算法" class="headerlink" title="SM4算法"></a>SM4算法</h1><blockquote><p>作者：lowlyli</p><p>时间：2021-12-5</p><p>内容：SM4是国密里面针对无线标准进行的分组密码，和DES加密很像。它采用的方法是能够很好抵抗差值攻击的仿射函数逆映射复合法。有时间分析一下如何破解吧。</p></blockquote><h2 id="SM4算法介绍"><a href="#SM4算法介绍" class="headerlink" title="SM4算法介绍"></a>SM4算法介绍</h2><p> 2012年3月，国家密码管理局正式公布了包含SM4分组密码算法在内的《祖冲之序列密码算法》等6项密码行业标准。与DES和AES算法类似，SM4算法是一种分组密码算法。其分组长度为128bit，密钥长度也为128bit。加密算法与密钥扩展算法均采用32轮非线性迭代结构，以字（32位）为单位进行加密运算，每一次迭代运算均为一轮变换函数F。SM4算法加/解密算法的结构相同，只是使用轮密钥相反，其中解密轮密钥是加密轮密钥的逆序。</p><p>SMS4分组加密算法是中国无线标准中使用的分组加密算法，在2012年已经被国家商用密码管理局确定为国家密码行业标准，标准编号GM/T 0002-2012并且改名为SM4算法，与SM2椭圆曲线公钥密码算法，SM3密码杂凑算法共同作为国家密码的行业标准，在我国密码行业中有着极其重要的位置。</p><p> SM4有很高的灵活性，所采用的S盒可以灵活地被替换，以应对突发性的安全威胁。算法的32轮迭代采用串行处理，这与AES中每轮使用代换和混淆并行地处理整个分组有很大不同。</p><p>S盒是一种利用非线性变换构造的分组密码的一个组件，主要是为了实现分组密码过程中的混淆的特性和设计的。SMS4算法中的S盒在设计之初完全按照欧美分组密码的设计标准进行，它采用的方法是能够很好抵抗差值攻击的仿射函数逆映射复合法。</p><p>参考官方网站：<a href="http://www.gmbz.org.cn/main/bzlb.html">密码行业标准化</a>:   <a href="http://www.gmbz.org.cn/main/bzlb.html">http://www.gmbz.org.cn/main/bzlb.html</a></p><p><img src="https://s2.loli.net/2021/12/05/TkmWHtsxwIzpajl.png" alt="202112051241833.png"></p><h2 id="SM4算法原理"><a href="#SM4算法原理" class="headerlink" title="SM4算法原理"></a>SM4算法原理</h2><p>本算法是一个分组算法。该算法的分组长度为128比特，密钥长度为128比特。加密算法与密钥扩展算法都采用32轮非线性迭代结构。解密算法与加密算法的结构相同，只是轮密钥的使用顺序相反，解密轮密钥是加密轮密钥的逆序。</p><h3 id="术语说明"><a href="#术语说明" class="headerlink" title="术语说明"></a>术语说明</h3><h4 id="字与字节"><a href="#字与字节" class="headerlink" title="字与字节"></a>字与字节</h4><p>用$Z_2^e$表示e-比特的向量集，$Z_2^{32}$中的元素称为字，$Z_2^8$中的元素称为字节。</p><h4 id="S盒"><a href="#S盒" class="headerlink" title="S盒"></a>S盒</h4><p>S盒为固定的8比特输入8比特输出的置换，记为$Sbox(X)$</p><h4 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h4><p>在本算法中采用了以下基本运算：</p><ul><li>$⊕$ 32比特异或</li><li>$&lt;&lt;&lt;i$ 32比特循环左移$i$位</li></ul><h4 id="密钥及密钥参量"><a href="#密钥及密钥参量" class="headerlink" title="密钥及密钥参量"></a>密钥及密钥参量</h4><p>加密密钥长度为 128 比特, 表示为$  \mathrm{MK}=\left(\mathrm{MK}<em>{0}, \mathrm{MK}</em>{1}, \mathrm{MK}<em>{2}, \mathrm{MK}</em>{3}\right) $, 其中  $\mathrm{MK}_{i}(\mathrm{i}=0,1,2,3)  $为 字。</p><p>轮密钥表示为 $ \left(\mathrm{rk}<em>{0}, \mathrm{rk}</em>{1}, \ldots, \mathrm{rk}<em>{31}\right)$ , 其中  $\mathrm{rk}</em>{\mathrm{i}}(\mathrm{i}=0, \ldots, 31) $ 为字。轮密钥由加密密钥生成。</p><p>$\mathrm{FK}=\left(\mathrm{FK}<em>{0}, \mathrm{FK}</em>{1}, \mathrm{FK}<em>{2}, \mathrm{FK}</em>{3}\right)  $为系统参数,  </p><p>$\mathrm{CK}=\left(\mathrm{CK}<em>{0}, \mathrm{CK}</em>{1}, \ldots, \mathrm{CK}_{31}\right)  $为固定参数, 用于密钥扩展算法, </p><p>其中 $ \mathrm{FK}<em>{\mathrm{i}}(i=0, \ldots, 3) 、 \mathrm{CK}</em>{\mathrm{i}}(i=0, \ldots, 31) $ 为字。</p><h3 id="轮函数F"><a href="#轮函数F" class="headerlink" title="轮函数F"></a>轮函数F</h3><p>本算法采用非线性迭代结构, 以字为单位进行加密运算, 称一次迭代运算为一轮变换。</p><p>设输入为$( X<em> {0} , X</em> {1} , X<em> {2} , X</em> {3} ) \in (Z<em> {2}^ {32})^ {4} $,轮密钥为$rk \in Z</em> {2}^ {32} $,则轮函数F为:</p><script type="math/tex; mode=display">F( X_ {0} , X_ {1} , X_ {2} , X_ {3} ,rk)= X_ {0} \oplus T( X_ {1} \oplus X_ {2} \oplus X_ {3} \oplus rk)</script><h4 id="合成置换T"><a href="#合成置换T" class="headerlink" title="合成置换T"></a>合成置换T</h4><p>$T:Z_2^{32} \rightarrow Z_2^{32}$，是一个可逆变换，由非线性变换$τ$和线性变换$L$复合而成,即$T(x)=L(τ(x))$</p><h5 id="非线性变换τ"><a href="#非线性变换τ" class="headerlink" title="非线性变换τ"></a>非线性变换τ</h5><p> $\tau$  由 4 个并行的S盒构成。<br>设输入为 $ A=\left(a<em>{0}, a</em>{1}, a<em>{2}, a</em>{3}\right) \in\left(Z<em>{2}^{8}\right)^{4} $, 输出为 $ B=\left(b</em>{0}, b<em>{1}, b</em>{2}, b<em>{3}\right) \in\left(Z</em>{2}^{8}\right)^{4} $, 则</p><script type="math/tex; mode=display">\left(b_{0}, b_{1}, b_{2}, b_{3}\right)=\tau(A)=\left(\operatorname{Sbox}\left(a_{0}\right), \operatorname{Sbox}\left(a_{1}\right), \operatorname{Sbox}\left(a_{2}\right), \operatorname{Sbox}\left(a_{3}\right)\right)</script><h5 id="线性变换L"><a href="#线性变换L" class="headerlink" title="线性变换L"></a>线性变换L</h5><p>非线性变换 $ \tau $ 的输出是线性变换 $ \mathrm{L}  $的输入。设输入为  $B \in Z<em>{2}^{32}$ , 输出为 $ C \in Z</em>{2}^{32} $, 则 </p><script type="math/tex; mode=display">\smallC=L(B)=B \oplus(B<<<2) \oplus(B<<<10) \oplus(B<<<18) \oplus(B<<<24)</script><h4 id="S盒-1"><a href="#S盒-1" class="headerlink" title="S盒"></a>S盒</h4><p><img src="https://s2.loli.net/2021/12/05/WOoB8NY34dm6xKM.png" alt="image-20211205153046989"></p><p>输入‘ef’，则经S盒后的值为表中第e行和第f列的值，Sbox(‘ef’)= ‘84’。</p><h3 id="加-解密算法"><a href="#加-解密算法" class="headerlink" title="加/解密算法"></a>加/解密算法</h3><p>定义反序变换 $ \mathrm{R} $为: </p><script type="math/tex; mode=display">R\left(A_{0}, A_{1}, A_{2}, A_{3}\right)=\left(A_{3}, A_{2}, A_{1}, A_{0}\right), A_{i} \in Z_{2}^{32}, i=0,1,2,3</script><p>设明文输入为 $\left(X<em>{0}, X</em>{1}, X<em>{2}, X</em>{3}\right) \in\left(Z<em>{2}^{32}\right)^{4}$, 密文输出为$\left(Y</em>{0}, Y<em>{1}, Y</em>{2}, Y<em>{3}\right) \in\left(Z</em>{2}^{32}\right)^{4}$, 轮密钥为 $r k<em>{i} \in Z</em>{2}^{32}, i=0,1,2, \ldots, 31$ 。则本算法的加密变换为: </p><script type="math/tex; mode=display">X_{i+4}=F\left(X_{i}, X_{i+1}, X_{i+2}, X_{i+3}, r k_{i}\right)\\=X_{i} \oplus T\left(X_{i+1} \oplus X_{i+2} \oplus X_{i+3} \oplus r k_{i}\right), i=0,1, \ldots, 31 . \\\left(Y_{0}, Y_{1}, Y_{2}, Y_{3}\right)=R\left(X_{32}, X_{33}, X_{34}, X_{35}\right)=\left(X_{35}, X_{34}, X_{33}, X_{32}\right)</script><p>本算法的解密变换与加密变换结构相同, 不同的仅是轮密钥的使用顺序。 </p><p>密时轮密钥的使用顺序为: $\left(r k<em>{0}, r k</em>{1}, \ldots, r k_{31}\right)$</p><p>解密时轮密钥的使用顺序为:$\left(r k<em>{31}, r k</em>{30}, \ldots, r k_{0}\right)$</p><h3 id="密钥扩展算法"><a href="#密钥扩展算法" class="headerlink" title="密钥扩展算法"></a>密钥扩展算法</h3><p>本算法中加密算法的轮密钥由加密密钥通过密钥扩展算法生成。</p><p>加密密钥 </p><p>$ M K=\left(M K<em>{0}, M K</em>{1}, M K<em>{2}, M K</em>{3}\right), M K<em>{i} \in Z</em>{2}^{32}, i=0,1,2,3 ;$</p><p>令 $ K<em>{i} \in Z</em>{2}^{32}, i=0,1, \ldots, 35$ , 轮密钥为 $ r k<em>{i} \in Z</em>{2}^{32}, i=0,1, \ldots, 31 $, 则轮密钥生成方法为:</p><p>首先, </p><script type="math/tex; mode=display">\small\left(K_{0}, K_{1}, K_{2}, K_{3}\right)=\left(\mathrm{MK}_{0} \oplus \mathrm{FK}_{0}, \mathrm{MK}_{1} \oplus \mathrm{FK}_{1}, \mathrm{MK}_{2} \oplus \mathrm{FK}_{2}, \mathrm{MK}_{3} \oplus \mathrm{FK}_{3}\right)</script><p>然后, 对 $ i=0,1,2, \ldots, 31$  :</p><script type="math/tex; mode=display">r k_{i}=K_{i+4}=K_{i} \oplus T^{\prime}\left(K_{i+1} \oplus K_{i+2} \oplus K_{i+3} \oplus C K_{i}\right)</script><p>说明:</p><p>(1)  $T^{\prime} $ 变换与加密算法轮函数中的  T  基本相同, 只将其中的线性变换  L  修改为以下$  L^{\prime} $ :</p><script type="math/tex; mode=display"> L^{\prime}(\mathrm{B})=\mathrm{B} \oplus(\mathrm{B}<<<13) \oplus(\mathrm{B}<<<23) ;</script><p>(2) 系统参数 FK的取值, 采用 16 进制表示为:</p><script type="math/tex; mode=display">\mathrm{FK}_{0}=(\mathrm{A} 3 \mathrm{~B} 1 \mathrm{BAC}), \mathrm{FK}_{1}=(56 \mathrm{AA} 3350), \\\mathrm{FK}_{2}=(677 \mathrm{D} 9197), \mathrm{FK}_{3}=(\mathrm{B} 27022 \mathrm{DC})</script><p> (3) 古定参数$  \mathrm{CK}  $的取值方法为:</p><p>设  $c k<em>{i, j}  $为  $C K</em>{i}$ 的第 $ j $ 字节  $(i=0,1, \ldots, 31 ; j=0,1,2,3)$ , 即 $ C K<em>{i}=\left(c k</em>{i, 0}, c k<em>{i, 1}, c k</em>{i, 2}, c k<em>{i, 3}\right) \in\left(Z</em>{2}^{8}\right)^{4}$ ,则$  c k<em>{i, j}=(4 i+j) \times 7(\bmod 256) $ 。 32 个固定参数 $ C K</em>{i}$ , 其 16 进制表示为:</p><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">00070e15</td><td style="text-align:center">1c232a31</td><td style="text-align:center">383f464d</td><td style="text-align:center">545b6269</td></tr><tr><td style="text-align:center">70777e85</td><td style="text-align:center">8c939aa1</td><td style="text-align:center">a8afb6bd</td><td style="text-align:center">c4cbd2d9</td></tr><tr><td style="text-align:center">e0e7eef5</td><td style="text-align:center">fc030a11</td><td style="text-align:center">181f262d</td><td style="text-align:center">343b4249</td></tr><tr><td style="text-align:center">50575e65</td><td style="text-align:center">6c737a81</td><td style="text-align:center">888f969d</td><td style="text-align:center">a4abb2b9</td></tr><tr><td style="text-align:center">c0c7ced5</td><td style="text-align:center">dce3eaf1</td><td style="text-align:center">f8ff060d</td><td style="text-align:center">141b2229</td></tr><tr><td style="text-align:center">30373e45</td><td style="text-align:center">4c535a61</td><td style="text-align:center">686f767d</td><td style="text-align:center">848b9299</td></tr><tr><td style="text-align:center">a0a7aeb5</td><td style="text-align:center">bcc3cad1</td><td style="text-align:center">d8dfe6ed</td><td style="text-align:center">f4fb0209</td></tr><tr><td style="text-align:center">10171e25</td><td style="text-align:center">2c333a41</td><td style="text-align:center">484f565d</td><td style="text-align:center">646b7279</td></tr></tbody></table></div><h3 id="加密解密可逆分析"><a href="#加密解密可逆分析" class="headerlink" title="加密解密可逆分析"></a>加密解密可逆分析</h3><p>这里设加密密钥 </p><p>$ M K=\left(M K<em>{0}, M K</em>{1}, M K<em>{2}, M K</em>{3}\right), M K<em>{i} \in Z</em>{2}^{32}, i=0,1,2,3 ;$</p><p>令 $ K<em>{i} \in Z</em>{2}^{32}, i=0,1, \ldots, 35$ , 则可以生成轮密钥为 $ r k<em>{i} \in Z</em>{2}^{32}, i=0,1, \ldots, 31 $, </p><p>在加密中密钥$i : 0 \rightarrow 31$, 在解密中$i : 31 \rightarrow 0$, 即：每一轮的密钥一致。</p><p>设明文输入为 $\left(X<em>{0}, X</em>{1}, X<em>{2}, X</em>{3}\right) \in\left(Z_{2}^{32}\right)^{4}$</p><p>设 密文输出为$\left(Y<em>{0}, Y</em>{1}, Y<em>{2}, Y</em>{3}\right) \in\left(Z_{2}^{32}\right)^{4}$, </p><p>根据加密原则：</p><script type="math/tex; mode=display">\left(Y_{0}, Y_{1}, Y_{2}, Y_{3}\right)=R\left(X_{32}, X_{33}, X_{34}, X_{35}\right)=\left(X_{35}, X_{34}, X_{33}, X_{32}\right)</script><p>而加密流程</p><script type="math/tex; mode=display">X_{i+4}=X_{i} \oplus T\left(X_{i+1} \oplus X_{i+2} \oplus X_{i+3} \oplus r k_{i}\right), i=0,1, \ldots, 31 . \\</script><p>设$C = T\left(X<em>{i+1} \oplus X</em>{i+2} \oplus X<em>{i+3} \oplus r k</em>{i}\right),$ 则$X<em>i :=X</em>{i+4}\oplus  X_{i}  $</p><p>故可解出$X<em>i$,以此类推得到：$\left(X</em>{0}, X<em>{1}, X</em>{2}, X_{3}\right) $</p><h2 id="SM4算法流程"><a href="#SM4算法流程" class="headerlink" title="SM4算法流程"></a>SM4算法流程</h2><h3 id="完整流程如下："><a href="#完整流程如下：" class="headerlink" title="完整流程如下："></a>完整流程如下：</h3><p> <img src="https://s2.loli.net/2021/12/05/bHkwWJIfONs9mRp.png" alt="202112051250479.png"></p><h3 id="密钥扩展算法-1"><a href="#密钥扩展算法-1" class="headerlink" title="密钥扩展算法"></a>密钥扩展算法</h3><p>第一步：密钥与系统参数的异或:</p><script type="math/tex; mode=display">\small\left(K_{0}, K_{1}, K_{2}, K_{3}\right)=\left(\mathrm{MK}_{0} \oplus \mathrm{FK}_{0}, \mathrm{MK}_{1} \oplus \mathrm{FK}_{1}, \mathrm{MK}_{2} \oplus \mathrm{FK}_{2}, \mathrm{MK}_{3} \oplus \mathrm{FK}_{3}\right)</script><p>第二步：获取子密钥：</p><script type="math/tex; mode=display">r k_{i}=K_{i+4}=K_{i} \oplus T^{\prime}\left(K_{i+1} \oplus K_{i+2} \oplus K_{i+3} \oplus C K_{i}\right)</script><p>流程如下：</p><p><img src="https://s2.loli.net/2021/12/05/ja1yQwbsgfSKNhC.png" alt="20210514162641653"></p><p>函数T：</p><p><img src="https://s2.loli.net/2021/12/05/KIo1mSLWzwVhMl2.png" alt="在这里插入图片描述"></p><h3 id="明文加密"><a href="#明文加密" class="headerlink" title="明文加密"></a>明文加密</h3><p>明文处理大致分解为3步：</p><p>1）、将128bit的明文分成4个32bit的字$(X_1,X_2,X_3,X_4)$。</p><p>2）、将上述得到的字进行32轮的轮操作。</p><p>3）、最后将进行过32轮操作的4个字进行反序变换后组成128bit的密文。</p><script type="math/tex; mode=display">X_{i+4}=F\left(X_{i}, X_{i+1}, X_{i+2}, X_{i+3}, r k_{i}\right)\\=X_{i} \oplus T\left(X_{i+1} \oplus X_{i+2} \oplus X_{i+3} \oplus r k_{i}\right), i=0,1, \ldots, 31 . \\\left(Y_{0}, Y_{1}, Y_{2}, Y_{3}\right)=R\left(X_{32}, X_{33}, X_{34}, X_{35}\right)=\left(X_{35}, X_{34}, X_{33}, X_{32}\right)</script><p><img src="https://s2.loli.net/2021/12/07/ouFQJWXMqKb6Cdm.png" alt="在这里插入图片描述"></p><p><img src="https://s2.loli.net/2021/12/05/lZA15sPzoMQjyGt.png" alt="在这里插入图片描述"></p><h2 id="SM4代码介绍"><a href="#SM4代码介绍" class="headerlink" title="SM4代码介绍"></a>SM4代码介绍</h2><h3 id="定义S盒和FK-CK"><a href="#定义S盒和FK-CK" class="headerlink" title="定义S盒和FK,CK"></a>定义S盒和FK,CK</h3><p>如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># S盒</span>S_BOX <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xD6</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0xE9</span><span class="token punctuation">,</span> <span class="token number">0xFE</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xE1</span><span class="token punctuation">,</span> <span class="token number">0x3D</span><span class="token punctuation">,</span> <span class="token number">0xB7</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">,</span> <span class="token number">0xB6</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0xC2</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0xFB</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x2B</span><span class="token punctuation">,</span>       <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0x9A</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0x2A</span><span class="token punctuation">,</span> <span class="token number">0xBE</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0xC3</span><span class="token punctuation">,</span> <span class="token number">0xAA</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x9C</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span>       <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0xF4</span><span class="token punctuation">,</span> <span class="token number">0x91</span><span class="token punctuation">,</span> <span class="token number">0xEF</span><span class="token punctuation">,</span> <span class="token number">0x98</span><span class="token punctuation">,</span> <span class="token number">0x7A</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0xED</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0xAC</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0xE4</span><span class="token punctuation">,</span> <span class="token number">0xB3</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span>       <span class="token number">0xA9</span><span class="token punctuation">,</span> <span class="token number">0xC9</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0xE8</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0xDF</span><span class="token punctuation">,</span> <span class="token number">0x94</span><span class="token punctuation">,</span> <span class="token number">0xFA</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0x8F</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0xA6</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0xA7</span><span class="token punctuation">,</span> <span class="token number">0xFC</span><span class="token punctuation">,</span>       <span class="token number">0xF3</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0xBA</span><span class="token punctuation">,</span> <span class="token number">0x83</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0xE6</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0x4F</span><span class="token punctuation">,</span> <span class="token number">0xA8</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x6B</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0xB2</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span>       <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0xDA</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0xF8</span><span class="token punctuation">,</span> <span class="token number">0xEB</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">,</span> <span class="token number">0x4B</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x9D</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span> <span class="token number">0x5E</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span>       <span class="token number">0xD1</span><span class="token punctuation">,</span> <span class="token number">0xA2</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x87</span><span class="token punctuation">,</span> <span class="token number">0xD4</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x9F</span><span class="token punctuation">,</span> <span class="token number">0xD3</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span>       <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0xE7</span><span class="token punctuation">,</span> <span class="token number">0xA0</span><span class="token punctuation">,</span> <span class="token number">0xC4</span><span class="token punctuation">,</span> <span class="token number">0xC8</span><span class="token punctuation">,</span> <span class="token number">0x9E</span><span class="token punctuation">,</span> <span class="token number">0xEA</span><span class="token punctuation">,</span> <span class="token number">0xBF</span><span class="token punctuation">,</span> <span class="token number">0x8A</span><span class="token punctuation">,</span> <span class="token number">0xD2</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0xC7</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0xB5</span><span class="token punctuation">,</span>       <span class="token number">0xA3</span><span class="token punctuation">,</span> <span class="token number">0xF7</span><span class="token punctuation">,</span> <span class="token number">0xF2</span><span class="token punctuation">,</span> <span class="token number">0xCE</span><span class="token punctuation">,</span> <span class="token number">0xF9</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span> <span class="token number">0xA1</span><span class="token punctuation">,</span> <span class="token number">0xE0</span><span class="token punctuation">,</span> <span class="token number">0xAE</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token number">0xA4</span><span class="token punctuation">,</span> <span class="token number">0x9B</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span>       <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0xF5</span><span class="token punctuation">,</span> <span class="token number">0x8C</span><span class="token punctuation">,</span> <span class="token number">0xB1</span><span class="token punctuation">,</span> <span class="token number">0xE3</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0xF6</span><span class="token punctuation">,</span> <span class="token number">0xE2</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0xCA</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span>       <span class="token number">0x23</span><span class="token punctuation">,</span> <span class="token number">0xAB</span><span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x4E</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0xD5</span><span class="token punctuation">,</span> <span class="token number">0xDB</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0xDE</span><span class="token punctuation">,</span> <span class="token number">0xFD</span><span class="token punctuation">,</span> <span class="token number">0x8E</span><span class="token punctuation">,</span> <span class="token number">0x2F</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span>       <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x6C</span><span class="token punctuation">,</span> <span class="token number">0x5B</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x8D</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">,</span> <span class="token number">0xAF</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0xDD</span><span class="token punctuation">,</span> <span class="token number">0xBC</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0xD9</span><span class="token punctuation">,</span> <span class="token number">0x5C</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span>       <span class="token number">0x1F</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0xD8</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0xA5</span><span class="token punctuation">,</span> <span class="token number">0xCD</span><span class="token punctuation">,</span> <span class="token number">0x7B</span><span class="token punctuation">,</span> <span class="token number">0xBD</span><span class="token punctuation">,</span> <span class="token number">0x2D</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0xD0</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0xB8</span><span class="token punctuation">,</span>       <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0xB4</span><span class="token punctuation">,</span> <span class="token number">0xB0</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x96</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0xB9</span><span class="token punctuation">,</span> <span class="token number">0xF1</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0xC5</span><span class="token punctuation">,</span> <span class="token number">0x6E</span><span class="token punctuation">,</span>       <span class="token number">0xC6</span><span class="token punctuation">,</span> <span class="token number">0x84</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0xF0</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0xEC</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0xDC</span><span class="token punctuation">,</span> <span class="token number">0x4D</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0xEE</span><span class="token punctuation">,</span> <span class="token number">0x5F</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0xD7</span><span class="token punctuation">,</span> <span class="token number">0xCB</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span>       <span class="token number">0x48</span><span class="token punctuation">]</span><span class="token comment"># 系统参数FK</span>FK <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xa3b1bac6</span><span class="token punctuation">,</span> <span class="token number">0x56aa3350</span><span class="token punctuation">,</span> <span class="token number">0x677d9197</span><span class="token punctuation">,</span> <span class="token number">0xb27022dc</span><span class="token punctuation">]</span><span class="token comment"># 固定参数CK</span>CK <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x00070e15</span><span class="token punctuation">,</span> <span class="token number">0x1c232a31</span><span class="token punctuation">,</span> <span class="token number">0x383f464d</span><span class="token punctuation">,</span> <span class="token number">0x545b6269</span><span class="token punctuation">,</span> <span class="token number">0x70777e85</span><span class="token punctuation">,</span> <span class="token number">0x8c939aa1</span><span class="token punctuation">,</span> <span class="token number">0xa8afb6bd</span><span class="token punctuation">,</span> <span class="token number">0xc4cbd2d9</span><span class="token punctuation">,</span>      <span class="token number">0xe0e7eef5</span><span class="token punctuation">,</span> <span class="token number">0xfc030a11</span><span class="token punctuation">,</span> <span class="token number">0x181f262d</span><span class="token punctuation">,</span> <span class="token number">0x343b4249</span><span class="token punctuation">,</span> <span class="token number">0x50575e65</span><span class="token punctuation">,</span> <span class="token number">0x6c737a81</span><span class="token punctuation">,</span> <span class="token number">0x888f969d</span><span class="token punctuation">,</span> <span class="token number">0xa4abb2b9</span><span class="token punctuation">,</span>      <span class="token number">0xc0c7ced5</span><span class="token punctuation">,</span> <span class="token number">0xdce3eaf1</span><span class="token punctuation">,</span> <span class="token number">0xf8ff060d</span><span class="token punctuation">,</span> <span class="token number">0x141b2229</span><span class="token punctuation">,</span> <span class="token number">0x30373e45</span><span class="token punctuation">,</span> <span class="token number">0x4c535a61</span><span class="token punctuation">,</span> <span class="token number">0x686f767d</span><span class="token punctuation">,</span> <span class="token number">0x848b9299</span><span class="token punctuation">,</span>      <span class="token number">0xa0a7aeb5</span><span class="token punctuation">,</span> <span class="token number">0xbcc3cad1</span><span class="token punctuation">,</span> <span class="token number">0xd8dfe6ed</span><span class="token punctuation">,</span> <span class="token number">0xf4fb0209</span><span class="token punctuation">,</span> <span class="token number">0x10171e25</span><span class="token punctuation">,</span> <span class="token number">0x2c333a41</span><span class="token punctuation">,</span> <span class="token number">0x484f565d</span><span class="token punctuation">,</span> <span class="token number">0x646b7279</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义T函数"><a href="#定义T函数" class="headerlink" title="定义T函数"></a>定义T函数</h3><p>$T(x)=L(τ(x))$</p><p>这里分别定义$τ(x)$和$L(x)$</p><p>$τ(x)$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@staticmethod</span><span class="token keyword">def</span> <span class="token function">_s_box</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 将 32bit 拆分成 4x8bit，依次进行S盒变换</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'big'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>S_BOX<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">'big'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$L(x)$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@staticmethod</span><span class="token keyword">def</span> <span class="token function">_rot_left</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""循环左移"""</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> m<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">-</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="密钥扩展"><a href="#密钥扩展" class="headerlink" title="密钥扩展"></a>密钥扩展</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_generate_key</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""密钥生成"""</span>    key_r<span class="token punctuation">,</span> key_temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment"># 将 128bit 拆分成 4x32bit</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i<span class="token punctuation">:</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'big'</span><span class="token punctuation">)</span>        key_temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp <span class="token operator">^</span> FK<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token comment"># 循环生成轮密钥</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        box_in <span class="token operator">=</span> key_temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> key_temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">^</span> key_temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">^</span> CK<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        box_out <span class="token operator">=</span> self<span class="token punctuation">.</span>_s_box<span class="token punctuation">(</span>box_in<span class="token punctuation">)</span>        key_r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key_temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">^</span> box_out <span class="token operator">^</span> self<span class="token punctuation">.</span>_rot_left<span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>_rot_left<span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span>        key_temp <span class="token operator">=</span> key_temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span>key_r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> key_r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="主体循环（加密解密一样）"><a href="#主体循环（加密解密一样）" class="headerlink" title="主体循环（加密解密一样）"></a>主体循环（加密解密一样）</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_do</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">,</span> key_r<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       text_ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span>       <span class="token comment"># 将 128bit 转化成 4x32bit</span>       <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>           text_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>text<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i<span class="token punctuation">:</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'big'</span><span class="token punctuation">)</span>       <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>           box_in <span class="token operator">=</span> text_<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> text_<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">^</span> text_<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">^</span> key_r<span class="token punctuation">[</span>i<span class="token punctuation">]</span>           box_out <span class="token operator">=</span> self<span class="token punctuation">.</span>_s_box<span class="token punctuation">(</span>box_in<span class="token punctuation">)</span>           temp <span class="token operator">=</span> text_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">^</span> box_out <span class="token operator">^</span> self<span class="token punctuation">.</span>_rot_left<span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>_rot_left<span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>           temp <span class="token operator">=</span> temp <span class="token operator">^</span> self<span class="token punctuation">.</span>_rot_left<span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>_rot_left<span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>           text_ <span class="token operator">=</span> text_<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span>temp<span class="token punctuation">]</span>       text_ <span class="token operator">=</span> text_<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># 结果逆序</span>       <span class="token comment"># 将 4x32bit 合并成 128bit</span>       result <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>           result<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>text_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'big'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token keyword">return</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="加密解密接口"><a href="#加密解密接口" class="headerlink" title="加密解密接口"></a>加密解密接口</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> plaintext<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>_do<span class="token punctuation">(</span>plaintext<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_key_r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ciphertext<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>_do<span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_key_r<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行验证"><a href="#运行验证" class="headerlink" title="运行验证"></a>运行验证</h3><p>这里只关注算法本身的加密，未实现分组密码的分组的加密模式和填充，故只支持标准的128bit输入和输出。</p><p>明文：<code>00112233445566778899aabbccddeeff</code></p><p>密钥：<code>0123456789ABCDEFFEDCBA9876543210</code></p><p>密文：<code>09325c4853832dcb9337a5984f671b9a</code></p><p>运行代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"16进制Key：0123456789ABCDEFFEDCBA9876543210"</span><span class="token punctuation">)</span>    <span class="token comment"># 128bit密钥</span>    key <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">"0123456789ABCDEFFEDCBA9876543210"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"16进制明文：00112233445566778899aabbccddeeff"</span><span class="token punctuation">)</span>    <span class="token comment"># 128bit明文</span>    plaintext <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">"00112233445566778899aabbccddeeff"</span><span class="token punctuation">)</span>    sm4 <span class="token operator">=</span> SM4Cipher<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"16进制密文："</span><span class="token operator">+</span> sm4<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>plaintext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 09325c4853832dcb9337a5984f671b9a</span>    encryption <span class="token operator">=</span> sm4<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>plaintext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    encryp_txt <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>encryption<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"16进制解密密文："</span><span class="token operator">+</span>sm4<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>encryp_txt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><p><img src="https://s2.loli.net/2021/12/05/MhitfE7LwINscRU.png" alt="image-20211205163627150"></p><p>网站验证：</p><p>网站：<a href="https://the-x.cn/cryptography/Sm4.aspx">SM4加密网站</a>:  <a href="https://the-x.cn/cryptography/Sm4.aspx">https://the-x.cn/cryptography/Sm4.aspx</a></p><p><img src="https://s2.loli.net/2021/12/05/ol8TypPBFCHhbXx.png" alt="image-20211205163922636"></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""@Time    : 2021/12/5@Author  : LowlyLi@Version : 1.0@File    : SM4.py@Introduce: SM4 国密4"""</span><span class="token comment"># S盒</span>S_BOX <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xD6</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0xE9</span><span class="token punctuation">,</span> <span class="token number">0xFE</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xE1</span><span class="token punctuation">,</span> <span class="token number">0x3D</span><span class="token punctuation">,</span> <span class="token number">0xB7</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">,</span> <span class="token number">0xB6</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0xC2</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0xFB</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x2B</span><span class="token punctuation">,</span>       <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0x9A</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0x2A</span><span class="token punctuation">,</span> <span class="token number">0xBE</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0xC3</span><span class="token punctuation">,</span> <span class="token number">0xAA</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x9C</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span>       <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0xF4</span><span class="token punctuation">,</span> <span class="token number">0x91</span><span class="token punctuation">,</span> <span class="token number">0xEF</span><span class="token punctuation">,</span> <span class="token number">0x98</span><span class="token punctuation">,</span> <span class="token number">0x7A</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0xED</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0xAC</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0xE4</span><span class="token punctuation">,</span> <span class="token number">0xB3</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span>       <span class="token number">0xA9</span><span class="token punctuation">,</span> <span class="token number">0xC9</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0xE8</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0xDF</span><span class="token punctuation">,</span> <span class="token number">0x94</span><span class="token punctuation">,</span> <span class="token number">0xFA</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0x8F</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0xA6</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0xA7</span><span class="token punctuation">,</span> <span class="token number">0xFC</span><span class="token punctuation">,</span>       <span class="token number">0xF3</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0xBA</span><span class="token punctuation">,</span> <span class="token number">0x83</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0xE6</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0x4F</span><span class="token punctuation">,</span> <span class="token number">0xA8</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x6B</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0xB2</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span>       <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0xDA</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0xF8</span><span class="token punctuation">,</span> <span class="token number">0xEB</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">,</span> <span class="token number">0x4B</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x9D</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span> <span class="token number">0x5E</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span>       <span class="token number">0xD1</span><span class="token punctuation">,</span> <span class="token number">0xA2</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x87</span><span class="token punctuation">,</span> <span class="token number">0xD4</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x9F</span><span class="token punctuation">,</span> <span class="token number">0xD3</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span>       <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0xE7</span><span class="token punctuation">,</span> <span class="token number">0xA0</span><span class="token punctuation">,</span> <span class="token number">0xC4</span><span class="token punctuation">,</span> <span class="token number">0xC8</span><span class="token punctuation">,</span> <span class="token number">0x9E</span><span class="token punctuation">,</span> <span class="token number">0xEA</span><span class="token punctuation">,</span> <span class="token number">0xBF</span><span class="token punctuation">,</span> <span class="token number">0x8A</span><span class="token punctuation">,</span> <span class="token number">0xD2</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0xC7</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0xB5</span><span class="token punctuation">,</span>       <span class="token number">0xA3</span><span class="token punctuation">,</span> <span class="token number">0xF7</span><span class="token punctuation">,</span> <span class="token number">0xF2</span><span class="token punctuation">,</span> <span class="token number">0xCE</span><span class="token punctuation">,</span> <span class="token number">0xF9</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span> <span class="token number">0xA1</span><span class="token punctuation">,</span> <span class="token number">0xE0</span><span class="token punctuation">,</span> <span class="token number">0xAE</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token number">0xA4</span><span class="token punctuation">,</span> <span class="token number">0x9B</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span>       <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0xF5</span><span class="token punctuation">,</span> <span class="token number">0x8C</span><span class="token punctuation">,</span> <span class="token number">0xB1</span><span class="token punctuation">,</span> <span class="token number">0xE3</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0xF6</span><span class="token punctuation">,</span> <span class="token number">0xE2</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0xCA</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span>       <span class="token number">0x23</span><span class="token punctuation">,</span> <span class="token number">0xAB</span><span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x4E</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0xD5</span><span class="token punctuation">,</span> <span class="token number">0xDB</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0xDE</span><span class="token punctuation">,</span> <span class="token number">0xFD</span><span class="token punctuation">,</span> <span class="token number">0x8E</span><span class="token punctuation">,</span> <span class="token number">0x2F</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span>       <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x6C</span><span class="token punctuation">,</span> <span class="token number">0x5B</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x8D</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">,</span> <span class="token number">0xAF</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0xDD</span><span class="token punctuation">,</span> <span class="token number">0xBC</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0xD9</span><span class="token punctuation">,</span> <span class="token number">0x5C</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span>       <span class="token number">0x1F</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0xD8</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0xA5</span><span class="token punctuation">,</span> <span class="token number">0xCD</span><span class="token punctuation">,</span> <span class="token number">0x7B</span><span class="token punctuation">,</span> <span class="token number">0xBD</span><span class="token punctuation">,</span> <span class="token number">0x2D</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0xD0</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0xB8</span><span class="token punctuation">,</span>       <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0xB4</span><span class="token punctuation">,</span> <span class="token number">0xB0</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x96</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0xB9</span><span class="token punctuation">,</span> <span class="token number">0xF1</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0xC5</span><span class="token punctuation">,</span> <span class="token number">0x6E</span><span class="token punctuation">,</span>       <span class="token number">0xC6</span><span class="token punctuation">,</span> <span class="token number">0x84</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0xF0</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0xEC</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0xDC</span><span class="token punctuation">,</span> <span class="token number">0x4D</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0xEE</span><span class="token punctuation">,</span> <span class="token number">0x5F</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0xD7</span><span class="token punctuation">,</span> <span class="token number">0xCB</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span>       <span class="token number">0x48</span><span class="token punctuation">]</span><span class="token comment"># 系统参数FK</span>FK <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xa3b1bac6</span><span class="token punctuation">,</span> <span class="token number">0x56aa3350</span><span class="token punctuation">,</span> <span class="token number">0x677d9197</span><span class="token punctuation">,</span> <span class="token number">0xb27022dc</span><span class="token punctuation">]</span><span class="token comment"># 固定参数CK</span>CK <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x00070e15</span><span class="token punctuation">,</span> <span class="token number">0x1c232a31</span><span class="token punctuation">,</span> <span class="token number">0x383f464d</span><span class="token punctuation">,</span> <span class="token number">0x545b6269</span><span class="token punctuation">,</span> <span class="token number">0x70777e85</span><span class="token punctuation">,</span> <span class="token number">0x8c939aa1</span><span class="token punctuation">,</span> <span class="token number">0xa8afb6bd</span><span class="token punctuation">,</span> <span class="token number">0xc4cbd2d9</span><span class="token punctuation">,</span>      <span class="token number">0xe0e7eef5</span><span class="token punctuation">,</span> <span class="token number">0xfc030a11</span><span class="token punctuation">,</span> <span class="token number">0x181f262d</span><span class="token punctuation">,</span> <span class="token number">0x343b4249</span><span class="token punctuation">,</span> <span class="token number">0x50575e65</span><span class="token punctuation">,</span> <span class="token number">0x6c737a81</span><span class="token punctuation">,</span> <span class="token number">0x888f969d</span><span class="token punctuation">,</span> <span class="token number">0xa4abb2b9</span><span class="token punctuation">,</span>      <span class="token number">0xc0c7ced5</span><span class="token punctuation">,</span> <span class="token number">0xdce3eaf1</span><span class="token punctuation">,</span> <span class="token number">0xf8ff060d</span><span class="token punctuation">,</span> <span class="token number">0x141b2229</span><span class="token punctuation">,</span> <span class="token number">0x30373e45</span><span class="token punctuation">,</span> <span class="token number">0x4c535a61</span><span class="token punctuation">,</span> <span class="token number">0x686f767d</span><span class="token punctuation">,</span> <span class="token number">0x848b9299</span><span class="token punctuation">,</span>      <span class="token number">0xa0a7aeb5</span><span class="token punctuation">,</span> <span class="token number">0xbcc3cad1</span><span class="token punctuation">,</span> <span class="token number">0xd8dfe6ed</span><span class="token punctuation">,</span> <span class="token number">0xf4fb0209</span><span class="token punctuation">,</span> <span class="token number">0x10171e25</span><span class="token punctuation">,</span> <span class="token number">0x2c333a41</span><span class="token punctuation">,</span> <span class="token number">0x484f565d</span><span class="token punctuation">,</span> <span class="token number">0x646b7279</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">SM4Cipher</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">16</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"SM4 key must be length of 16. "</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_key_r <span class="token operator">=</span> self<span class="token punctuation">.</span>_generate_key<span class="token punctuation">(</span>key<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>block_size <span class="token operator">=</span> <span class="token number">16</span>    <span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> plaintext<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_do<span class="token punctuation">(</span>plaintext<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_key_r<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ciphertext<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_do<span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_key_r<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_do</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">,</span> key_r<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        text_ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment"># 将 128bit 转化成 4x32bit</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            text_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>text<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i<span class="token punctuation">:</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'big'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            box_in <span class="token operator">=</span> text_<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> text_<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">^</span> text_<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">^</span> key_r<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            box_out <span class="token operator">=</span> self<span class="token punctuation">.</span>_s_box<span class="token punctuation">(</span>box_in<span class="token punctuation">)</span>            temp <span class="token operator">=</span> text_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">^</span> box_out <span class="token operator">^</span> self<span class="token punctuation">.</span>_rot_left<span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>_rot_left<span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>            temp <span class="token operator">=</span> temp <span class="token operator">^</span> self<span class="token punctuation">.</span>_rot_left<span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>_rot_left<span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>            text_ <span class="token operator">=</span> text_<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span>temp<span class="token punctuation">]</span>        text_ <span class="token operator">=</span> text_<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># 结果逆序</span>        <span class="token comment"># 将 4x32bit 合并成 128bit</span>        result <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>text_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'big'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_generate_key</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""密钥生成"""</span>        key_r<span class="token punctuation">,</span> key_temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment"># 将 128bit 拆分成 4x32bit</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i<span class="token punctuation">:</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'big'</span><span class="token punctuation">)</span>            key_temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp <span class="token operator">^</span> FK<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token comment"># 循环生成轮密钥</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            box_in <span class="token operator">=</span> key_temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> key_temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">^</span> key_temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">^</span> CK<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            box_out <span class="token operator">=</span> self<span class="token punctuation">.</span>_s_box<span class="token punctuation">(</span>box_in<span class="token punctuation">)</span>            key_r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key_temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">^</span> box_out <span class="token operator">^</span> self<span class="token punctuation">.</span>_rot_left<span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>_rot_left<span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span>            key_temp <span class="token operator">=</span> key_temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span>key_r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> key_r    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">_s_box</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 将 32bit 拆分成 4x8bit，依次进行S盒变换</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'big'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>S_BOX<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">'big'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">_rot_left</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""循环左移"""</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> m<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">-</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>     <span class="token comment"># 128bit密钥</span>    key <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">"0123456789ABCDEFFEDCBA9876543210"</span><span class="token punctuation">)</span>     <span class="token comment"># 128bit明文</span>    plaintext <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">"00112233445566778899aabbccddeeff"</span><span class="token punctuation">)</span>      sm4 <span class="token operator">=</span> SM4Cipher<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sm4<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>plaintext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># 09325c4853832dcb9337a5984f671b9a</span>    encryption <span class="token operator">=</span> sm4<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>plaintext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    encryp_txt <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>encryption<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sm4<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>encryp_txt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 00112233445566778899aabbccddeeff</span><span class="token triple-quoted-string string">"""# 样例一key = "0123456789ABCDEFFEDCBA9876543210"  # 16进制字符串plaintext = "0123456789ABCDEFFEDCBA9876543210"  # 16进制字符串ciphertext = "681edf34d206965e86b3e94f536e4246"  # 16进制字符串# 样例二key = "0123456789ABCDEFFEDCBA9876543210"  # 16进制字符串plaintext = "00112233445566778899aabbccddeeff"  # 16进制字符串ciphertext = "09325c4853832dcb9337a5984f671b9a"  # 16进制字符串# 样例三key = "456789ABCDEFFEDCBA98765432100123"  # 16进制字符串plaintext = "2233445566778899aabbccddeeff0011"  # 16进制字符串ciphertext = "58ab414d84fb3008b0bee987f97021e6"  # 16进制字符串# 样例四key = "89ABCDEFFEDCBA987654321001234567"  # 16进制字符串plaintext = "445566778899aabbccddeeff00112233"  # 16进制字符串ciphertext = "5937a929a2d9137216c72a28cd9cf619"  # 16进制字符串"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法理论复习</title>
      <link href="/2021/11/18/suan-fa-li-lun-fu-xi/"/>
      <url>/2021/11/18/suan-fa-li-lun-fu-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="算法理论复习"><a href="#算法理论复习" class="headerlink" title="算法理论复习"></a>算法理论复习</h1><blockquote><p>本文参考：胡神笔记：<a href="https://junyaohu.github.io/2021/10/26/%E3%80%8A%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E3%80%8B%E7%AC%94%E8%AE%B0/">https://junyaohu.github.io/2021/10/26/%E3%80%8A%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E3%80%8B%E7%AC%94%E8%AE%B0/</a></p></blockquote><h2 id="1-算法概叙"><a href="#1-算法概叙" class="headerlink" title="1.算法概叙"></a>1.算法概叙</h2><blockquote><p>算法复杂性和算法复杂性的计算O记，以及倍率计算</p></blockquote><h3 id="1-1-算法概念"><a href="#1-1-算法概念" class="headerlink" title="1.1 算法概念"></a>1.1 算法概念</h3><h4 id="1-1-1-概念"><a href="#1-1-1-概念" class="headerlink" title="1.1.1 概念"></a>1.1.1 概念</h4><p>一系列将问题的输入转换为输出的计算或操作步骤。</p><h4 id="1-1-2-性质"><a href="#1-1-2-性质" class="headerlink" title="1.1.2 性质"></a>1.1.2 性质</h4><ul><li>输入          有外部提供的量作为算法的输入。</li><li>输出          算法产生至少一个量作为输出。</li><li>确定性        组成算法的每条指令是清晰、无歧义的。</li><li>有限性        算法中每条指令的执行次数是有限的，执行每条指令的时间也是有限的。</li></ul><h3 id="1-2-算法复杂性"><a href="#1-2-算法复杂性" class="headerlink" title="1.2 算法复杂性"></a>1.2 算法复杂性</h3><p><strong>算法的复杂性(C):</strong></p><p>算法执行所需的时间和空间的数量。</p><script type="math/tex; mode=display">T=T(N, I)=\sum_{i=1}^{k} t_{i} e_{i}(N, I)</script><p><strong>平均情况</strong></p><script type="math/tex; mode=display">T_{\text {avg }}(N)=\sum_{I \in D_{N}} P(I) T(N, I)=\sum_{I \in D_{N}} P(I) \sum_{i=1}^{k} t_{i} e_{i}(N, I)</script><p><strong>渐进性态</strong></p><script type="math/tex; mode=display">\frac{T(N)-\overset{\thicksim}{T}(N)}{T(N)} \rightarrow 0</script><p><strong>大O表示法(算法运行时间的上限 )</strong></p><p>就是逼近的一个上界，可以那泰勒的上界来理解。</p><p><img src="https://gitee.com/lowlyLi/picgo/raw/master/img/202111182050100.png" alt="image-20211115191500303"></p><p><strong>大W表示法(算法运行时间的下限）</strong></p><p>下界</p><p><img src="https://gitee.com/lowlyLi/picgo/raw/master/img/202111182050194.png" alt="image-20211115191635671"></p><p>算法复杂度排序：</p><p><img src="https://gitee.com/lowlyLi/picgo/raw/master/img/202111182050247.png" alt="时间复杂度，不同数据规模的差异"></p><h3 id="1-3-NP问题判断"><a href="#1-3-NP问题判断" class="headerlink" title="1.3 NP问题判断"></a>1.3 NP问题判断</h3><p>这部分不考，但既然学算法，应该了解一下这些NP难题</p><p>NP(Nondeterministic Polynomially，非确定性多项式)类问题是指一个复杂问题不能确定是否在多项式时间内找到答案，但是可以在多项式时间内验证答案是否正确。</p><p>P问题是一个判定问题类，这些问题可以用一个确定性算法在多项式时间内判定或解出。</p><p>NP问题是指可以在多项式时间内被非确定机解决的问题。通常它们的时间复杂度都是指数变量。</p><h2 id="2-递归与分治"><a href="#2-递归与分治" class="headerlink" title="2.递归与分治"></a>2.递归与分治</h2><h3 id="2-1-递归"><a href="#2-1-递归" class="headerlink" title="2.1 递归"></a>2.1 递归</h3><p><strong>递归定义</strong> 用函数自身定义的函数</p><p><strong>递归函数两个要素</strong> 边界条件与递归方程</p><p><strong>递归算法转化为非递归算法</strong></p><ol><li>直接转化法：直接用循环结构的算法替代递归算法，不需要使用栈</li><li>用栈模拟系统的运行过程，通过分析只保存必须保存的信息，从而用非递归算法替代递归算法，需要使用栈</li></ol><h4 id="整数划分"><a href="#整数划分" class="headerlink" title="整数划分"></a>整数划分</h4><p>对于数据n，最大加数不大于m的划分个数记作$q(n,m)$</p><script type="math/tex; mode=display">q(n,m) = \left\{\begin{matrix}1  & n = 1,m = 1\\ q(n,n) &n<m \\ 1+q(n,n-1) &n = m \\ q(n,m-1)+q(n-m,m) &n>m>1\end{matrix}\right.</script><h3 id="2-2-分治"><a href="#2-2-分治" class="headerlink" title="2.2 分治"></a>2.2 分治</h3><p>  <strong>分治法的设计思想是</strong>：将一个难以直接解决的大问题，分割成一些规模较小的相同问题，以便各个击破，分而治之。</p><p>  <strong>分治策略是</strong>：对于一个规模为n的问题，若该问题可以容易地解决（比如说规模n较小）则直接解决，否则将其分解为k个规模较小的子问题，这些子问题互相独立且与原问题形式相同，递归地解这些子问题，然后将各子问题的解合并得到原问题的解。这种算法设计策略叫做分治法。</p><p><strong>分治法所能解决的问题一般具有以下几个特征：</strong></p><p>1) 该问题的规模缩小到一定的程度就可以容易地解决</p><p>2) 该问题可以分解为若干个规模较小的相同问题，即该问题具有最优子结构性质。</p><p>3) 利用该问题分解出的子问题的解可以合并为该问题的解；</p><p>4) 该问题所分解出的各个子问题是相互独立的，即子问题之间不包含公共的子子问题。</p><p>算法模板</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Divide<span class="token operator">-</span>and<span class="token operator">-</span><span class="token function">Conquer</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token operator">|</span>P<span class="token operator">|</span>≤n0then <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token function">ADHOC</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">)</span>将P分解为较小的子问题 P1 <span class="token punctuation">,</span>P2 <span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>Pk<span class="token keyword">for</span> i←<span class="token number">1</span> to k<span class="token keyword">do</span> yi ← Divide<span class="token operator">-</span>and<span class="token operator">-</span><span class="token function">Conquer</span><span class="token punctuation">(</span>Pi<span class="token punctuation">)</span> <span class="token comment">//递归解决Pi</span>T ← <span class="token function">MERGE</span><span class="token punctuation">(</span>y1<span class="token punctuation">,</span>y2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>yk<span class="token punctuation">)</span> <span class="token comment">//合并子问题</span><span class="token keyword">return</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-二分搜索"><a href="#2-3-二分搜索" class="headerlink" title="2.3 二分搜索"></a>2.3 二分搜索</h3><p><strong>问题描述</strong> 给定已按升序排好序的n个元素a[1:n]，现要在这n个元素中找出一特定元素x</p><p>参考：<a href="https://www.programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html#%E6%80%9D%E8%B7%AF">https://www.programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html#%E6%80%9D%E8%B7%AF</a></p><p>俩种思路。</p><h3 id="2-4-合并排序和快速排序"><a href="#2-4-合并排序和快速排序" class="headerlink" title="2.4 合并排序和快速排序"></a>2.4 合并排序和快速排序</h3><p><strong>问题描述</strong> 数组排序</p><h4 id="合并排序"><a href="#合并排序" class="headerlink" title="合并排序"></a>合并排序</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">Merge<span class="token operator">-</span><span class="token function">sort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> p<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>q <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>Merge<span class="token operator">-</span><span class="token function">sort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span>Merge<span class="token operator">-</span><span class="token function">sort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> q<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token function">Merge</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>复杂度</p><script type="math/tex; mode=display">\begin{array}  {X}  T(n) = O(nlogn) =\left\{\begin{matrix}O(1)  & n=1\\2T(\frac{n}{2} ) + O(n) & n>1 \\\end{matrix}\right.\end{array}</script><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">Partition</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>p<span class="token punctuation">,</span>r<span class="token punctuation">)</span> <span class="token comment">//p、r为数组下标</span>x <span class="token operator">=</span> A<span class="token punctuation">[</span>r<span class="token punctuation">]</span>   <span class="token comment">//将最后一个元素作为主元素</span>i <span class="token operator">=</span> p<span class="token operator">-</span><span class="token number">1</span> <span class="token comment">// i指向的是比主元素小的位置，</span><span class="token keyword">for</span>  j <span class="token operator">=</span> p  to  r<span class="token operator">-</span><span class="token number">1</span>     <span class="token comment">//从第一个元素开始到倒数第二个元素结束，比较确定主元素的位置</span><span class="token keyword">do</span>  <span class="token keyword">if</span>  A<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> xthen  i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>       <span class="token comment">//如果比主元素小，则把i=i+1的位置上的元素和j位置发现小元素互换</span>exchange A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token operator">-&gt;</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span>exchange A<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">-&gt;</span>A<span class="token punctuation">[</span>r<span class="token punctuation">]</span>   <span class="token comment">//最终确定主元的位置</span><span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span>   <span class="token comment">//返回主元的位置</span>End<span class="token function">QuickSort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>p<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token keyword">if</span> p<span class="token operator">&lt;</span>rq <span class="token operator">=</span> <span class="token function">Partition</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>p<span class="token punctuation">,</span>r<span class="token punctuation">)</span>    <span class="token comment">//确定划分位置</span><span class="token function">QuickSort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token comment">//子数组A[p...q-1]</span><span class="token function">QuickSort</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>q<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span>     <span class="token comment">//子数组A[q+1...r]</span>End<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤</strong></p><ol><li><p>分解：以a[p]为基准元素将a[p:r]划分成3段a[p:q-1],a[q]和a[q+1:r]，使a[p:q-1]中任意一个元素小于等于a[q]，而a[q+1:r]中任何一个元素大于等于a[q]，下标q在划分过程中确定</p></li><li><p>递归求解：通过递归调用快速排序算法分别对a[p:q-1]和a[q+1:r]进行排序</p></li><li><p>合并</p></li></ol><p>最坏情况，已经排好，$O(n^2)$<br>        最好情况，每次划分大小都是$\frac{n}{2}$，$O(nlogn)$</p><h3 id="2-5-大整数乘法"><a href="#2-5-大整数乘法" class="headerlink" title="2.5 大整数乘法"></a>2.5 大整数乘法</h3><p><strong>问题描述</strong> XY是n位二进制整数，计算他们的乘积XY</p><script type="math/tex; mode=display">\begin{array}  {X}X=A2^{\frac{n}{2}}+B, Y=C2^{\frac{n}{2}}+D \\   XY = AC2^n+(AD+BC)2^{\frac{n}{2} }+BD  \\  =AC2^n+((A-B)(D-C)+AC+BD)2^{\frac{n}{2}}+BD \\\end{array}</script><p>复杂度</p><script type="math/tex; mode=display">T(n) = O(n^{log3}) =\left\{\begin{matrix}O(1)  & n=1\\3T(\frac{n}{2} ) + O(n) & n>1 \\\end{matrix}\right.</script><h3 id="2-6-线性时间选择"><a href="#2-6-线性时间选择" class="headerlink" title="2.6 线性时间选择"></a>2.6 线性时间选择</h3><p>无序排列中求n个元素中第k小的元素（主要求中位数）。(类似快排)</p><p><strong>解释</strong></p><p>根据随机产生的基准点，将元素分为2组，基准点包含在第1组中；如果k&lt;=j，则第k小元素落在a段，为a段的第k小元素；如果k&gt;j，则a段的所有元素都比第k小元素还要小，第k小元素落在b段，为b段中的第k-j小元素（-j的含义是去掉a段的元素总个数）</p><p>最坏情况，分成两个1和n-1的子问题，$O(n^2)$</p><p>最好情况，每次都产生$\frac{n}{2}$大小的子问题，$O(n)$</p><p>例题看书比较好。</p><h2 id="3-动态规划"><a href="#3-动态规划" class="headerlink" title="3.动态规划"></a>3.动态规划</h2><h3 id="3-1-动态规划原理"><a href="#3-1-动态规划原理" class="headerlink" title="3.1 动态规划原理"></a>3.1 动态规划原理</h3><p>动态规划，英文：Dynamic Programming，简称DP，如果某一问题有很多重叠子问题，使用动态规划是最有效的。</p><p>这里俩性质：<strong>最优子结构性质</strong>和<strong>子问题重叠性质</strong></p><ol><li>最优子结构性质（分析问题是否满足最优性原理（用反证法）：①先假设由问题的最优解导出的子问题的解不是最优的；②再证明在这个假设下可构造出比原问题最优解更好的解，从而导致矛盾）</li><li>子问题重叠性质（子问题不相互独立，重复出现，只在第一次遇到时加以求解，并把答案保存起来，以后再遇到时不必重新求解）</li></ol><p>所以动态规划中每一个状态一定是由上一个状态推导出来的，<strong>这一点就区分于贪心</strong>，贪心没有状态推导，而是从局部直接选最优的。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">编程方法：动态规划的解题步骤对于动态规划问题，我将拆解为如下五步曲，这五步都搞清楚了，才能说把动态规划真的掌握了！1、确定dp数组（dp table）以及下标的含义2、确定递推公式3、dp数组如何初始化4、确定遍历顺序5、举例推导dp数组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>动态规划算法设计步骤</strong></p><ul><li><strong>分析最优解的性质，并刻划其结构特征；</strong> </li><li><strong>递归地定义最优值</strong></li><li><strong>以自底向上的方式计算出最优值；</strong></li><li><strong>根据计算最优值时得到的信息，构造最优解。</strong></li></ul><h3 id="3-2-矩阵连乘"><a href="#3-2-矩阵连乘" class="headerlink" title="3.2 矩阵连乘"></a>3.2 矩阵连乘</h3><p><strong>问题描述</strong> 每计算出一个元素，需要q次乘法，最终得到的矩阵是p×r矩阵，有p×r个元素，因此，计算C需要的乘法次数为q×p×r。每次要选择较小的q×p×r。给定n个矩阵｛A1,A2,…,An｝，其中Ai与Ai+1是可乘的，且i=1,2⋯,n-1,如何确定计算矩阵连乘积的计算次序，使得计算矩阵连乘的数乘次数最少。</p><script type="math/tex; mode=display">m[i][j]=\left\{\begin{array}{cc}0 & i=j \\\min_{i\leq{k}<j} \{m[i][k]+m[k+1][j]+p_{i-1}p_kp_j\} & i<j\end{array}\right.</script><p><strong>解释</strong> 矩阵连乘积从$A_i$到$A_j$定义为<code>A[i:j]</code>，<code>A[i:j]</code>最少的乘法次数定义为<code>m[i,j]</code>，最优断开位置k记为<code>𝑠[i,j]=k</code>，</p><p>$T(n)=O(n^3)$</p><blockquote><p><strong>例题</strong></p><p>计算矩阵连乘积A[1:6]的最少数乘次数，其中各矩阵的维数分别为p=[30,35,15,5,10,20,25]</p></blockquote><h3 id="3-3-最长公共子序列"><a href="#3-3-最长公共子序列" class="headerlink" title="3.3 最长公共子序列"></a>3.3 最长公共子序列</h3><p><strong>问题描述：</strong>给定两个序列$X={x_1,x_2,\cdots,x_m}$和$Y={y_1,y_2,\cdots,y_n}$，要求找出$X$和$Y$的一个最长公共子序列。</p><script type="math/tex; mode=display">c[i][j]=\left\{\begin{array}{cc}0 & i=0, j=0 \\c[i-1][j-1]+1 & i, j>0 ; x_{i}=y_{j} \\\max \{c[i-1][j], c[i][j-1]\} & i, j>0 ; x_{i} \neq y_{j}\end{array}\right.</script><script type="math/tex; mode=display">b[i][j]=\left\{\begin{array}{cc} 1 & c[i][j] = c[i-1][j-1] \\2 & c[i][j] = c[i-1][j] \\3 & c[i][j] = c[i][j-1]\end{array}\right.</script><p><strong>解释</strong> <code>c[i,j]</code>记录序列$X_i$和$Y_j$的最长公共子序列长度，<code>b[i,j]</code>可以记录是哪种类型。在c表中从最右下角的那个元素开始，看b表中对应位置的值，如果为1，则在c表中从当前位置往左上角走；如果为2，则在c表中从当前位置往正上方走；如果为3，则在c表中从当前位置沿水平方向往后退一位；依次类推，直到c表中箭头退到<code>c[0，0]</code>为止。</p><p><strong>补充</strong> 两个序列的最长公共子序列不唯一，不影响最长公共子序列的长度；但是可能会产生不一样的公共子序列.</p><blockquote><p><strong>例题</strong></p><p>给定两个序列为X=ABCBDAB和Y=BDCABA，求最长公共子序列。</p></blockquote><h3 id="3-4-图像压缩"><a href="#3-4-图像压缩" class="headerlink" title="3.4 图像压缩"></a>3.4 图像压缩</h3><p><strong>问题描述</strong> 数字化图像是n×n的像素阵列。假定每个像素有一个0~255的灰度值，存储一个像素需8位。为了减少存储空间，采用变长模式，即不同像素用不同位数来存储。</p><ol><li>线性化：图片拉直，转换为$1×n^2$向量</li><li>分段：分成连续的m段，每段像素存储位数相同，每段最多含256个像素点</li><li>存放信息：第$i$段长度（8bit），第$i$段中像素存储位数（3bit）</li></ol><script type="math/tex; mode=display">\begin{matrix}s[i]=\min\limits_{1 \leq k \leq \min \{i,256\}}\{s[i-k]+k*bmax(i-k+1,i)  \}+11\\bmax(i,j)=\max\limits_{i\leq k \leq j}\{a[k]\}\end{matrix}</script><p><strong>解释</strong></p><p>假设<code>s[i]</code>是序列${p_1,p_2,…,p_i}$的最优解，<code>a[i]</code>是第$i$个像素点的位数。</p><ol><li>假设$p_i$自成一段，则<code>s[i]=s[i-1]+保存pi的代价</code></li><li>取<code>s[i]</code>为min时对应的元素个数为k，<code>s[i]=s[i-k]+保存最后k个像素的代价</code></li><li>保存最后k个像素的代价=<code>k*max{k个灰度值二进制位数}+11</code></li></ol><blockquote><p><strong>例题</strong></p><p>求像素序列4，6，5，7，129，138，1的最优分段。</p></blockquote><h3 id="3-5-电路布线"><a href="#3-5-电路布线" class="headerlink" title="3.5 电路布线"></a>3.5 电路布线</h3><p><strong>问题描述</strong> 确定将哪些连线安排在第一层上，使得该层上有尽可能多的连线且不相交</p><script type="math/tex; mode=display">\begin{matrix}\scriptsize 当i=1时, \qquad Size(i,j) = \left\{\begin{matrix}0 && j<\pi(1)\\1 && j \geq \pi (1)\end{matrix}\right. \\\scriptsize当i>1时,\qquadSize(i,j) = \left\{\begin{matrix}Size(i-1,j) && j<\pi(i)\\\max \{ Size(i-1,j),Size(i-1,\pi(i)-1)+1\} && j \geq \pi (i)\end{matrix}\right.\end{matrix}</script><p><strong>解释</strong> <code>MNS(i,j)</code>表示上面序号小于$i$，连接到下面的序号都小于$j$的不相交的集合，最后要求<code>MNS(n,n)</code>。如果$j=\pi(i)$，如果$(i,\pi(i))$不在MNS中，将i点删除没有影响，就是<code>size(i,j)=size(i-1,j)</code>，如果$(i,\pi(i))$在MNS中，就是<code>size(i,j)=size(i-1,pi(i)-1)+1</code></p><blockquote><p><strong>例题</strong></p><p>已知[(1 8)(2 7)(3 4)(4 2)(5 5)(6 1)(7 9)(8 3)(9 10)(10 6)]，求最大不相交情况</p></blockquote><h3 id="3-6-流水线调度"><a href="#3-6-流水线调度" class="headerlink" title="3.6 流水线调度"></a>3.6 流水线调度</h3><p><strong>问题描述</strong> n个作业要在两台机器M1和M2上进行加工。每个作业加工的顺序都是先在M1上加工，然后在M2加工。M1和M2加工作业$i$所需的时间分别为$a_i$ 和$b_i$。确定n个作业的最优加工顺序，使得加工完成所需的时间最少。</p><p><strong>算法</strong></p><ol><li>分为$N_1,N_2$集合存放 <script type="math/tex">N_1 = \{a_i\leq b_i\} ,N_2 = \{a_i > b_i\}</script></li><li>$N_1$中作业按照$a_i$升序排序，$N_2$中作业按照$b_i$降序排序</li><li>$N_1$连接$N_2$，计算时间</li></ol><blockquote><p><strong>例题</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">任务</th><th style="text-align:center">J1</th><th style="text-align:center">J2</th><th style="text-align:center">J3</th><th style="text-align:center">J4</th><th style="text-align:center">J5</th><th style="text-align:center">J6</th></tr></thead><tbody><tr><td style="text-align:center">工序1</td><td style="text-align:center">30</td><td style="text-align:center">120</td><td style="text-align:center">50</td><td style="text-align:center">20</td><td style="text-align:center">90</td><td style="text-align:center">110</td></tr><tr><td style="text-align:center">工序2</td><td style="text-align:center">80</td><td style="text-align:center">100</td><td style="text-align:center">90</td><td style="text-align:center">60</td><td style="text-align:center">30</td><td style="text-align:center">10</td></tr></tbody></table></div></blockquote><h3 id="3-7-0-1背包与完全背包"><a href="#3-7-0-1背包与完全背包" class="headerlink" title="3.7 0-1背包与完全背包"></a>3.7 0-1背包与完全背包</h3><script type="math/tex; mode=display">\begin{matrix}m(i,j) = \left\{\begin{matrix}m(i-1,j) && 0 \leq j<w_i\\ \max \{ m(i-1,j),m(i-1,j-w_i)+v_i\} && j \geq w_i\end{matrix}\right.\\\\m(0,j) = \left\{\begin{matrix}0 && 0 \leq j<w_0\\ v_0 && j \geq w_0\end{matrix}\right.\end{matrix}</script><p><strong>解释</strong> <code>m[i][j]</code>表示可选择物品$i, i+1, …, n$时，背包容量为$j$装入的最大价值</p><blockquote><p><strong>例题</strong></p><p>n=5,c=10,W={2,2,6,5,4},V={6,3,5,4,6}</p></blockquote><h2 id="4-贪心算法"><a href="#4-贪心算法" class="headerlink" title="4.贪心算法"></a>4.贪心算法</h2><blockquote><p>听老师说是活题，那么建议参考：<a href="https://www.programmercarl.com/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html">https://www.programmercarl.com/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html</a></p><p>刷点力扣涨涨见识</p></blockquote><h3 id="4-1贪心原理"><a href="#4-1贪心原理" class="headerlink" title="4.1贪心原理"></a>4.1贪心原理</h3><p><strong>思想</strong> 在贪婪算法中采用逐步构造最优解的方法。在每个阶段，都作出一个看上去最优的决策。它并不一定对所有问题都成功，因为不从整体最优加以考虑，贪心解法可能不是全局最优解，但是对某些问题特别简单、有效。</p><p><strong>基本要素</strong></p><ol><li><strong>最优子结构性质</strong> 问题的最优解包含其子问题的最优解</li><li><strong>贪心选择性质</strong> 问题的整体最优解可以通过一系列局部最优的选择，即贪心选择来达到，当前的选择和子问题的解无关，只和以往做出的选择有关</li></ol><p><strong>贪心算法一般分为如下四步：</strong></p><ul><li>将问题分解为若干个子问题</li><li>找出适合的贪心策略</li><li>求解每一个子问题的最优解</li><li>将局部最优解堆叠成全局最优解</li></ul><h3 id="4-2-活动安排"><a href="#4-2-活动安排" class="headerlink" title="4.2 活动安排"></a>4.2 活动安排</h3><p>思考如下具有11个活动安排的问题？</p><p>在活动集合中选择最大的相容活动子集合</p><div class="table-container"><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>任务</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td><td>10</td><td>11</td></tr><tr><td>start</td><td>0</td><td>4</td><td>4</td><td>5</td><td>3</td><td>1</td><td>8</td><td>6</td><td>8</td><td>12</td><td>2</td></tr><tr><td>end</td><td>3</td><td>6</td><td>5</td><td>6</td><td>8</td><td>4</td><td>11</td><td>10</td><td>12</td><td>14</td><td>13</td></tr></tbody></table></div><pre class="line-numbers language-react" data-language="react"><code class="language-react">start开始时间，end结束时间，按任务按结束时间非减续排列优先选取结束时间早的，判断是否相容直到任务最后一个结束。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-哈夫曼编码"><a href="#4-3-哈夫曼编码" class="headerlink" title="4.3 哈夫曼编码"></a>4.3 哈夫曼编码</h3><p><strong>前缀码</strong> 对每一个字符规定一个0,1串作为其代码，并要求任一字符的代码都不是其它字符代码的前缀，这种编码称为前缀码。</p><p><strong>问题描述</strong> 找到使平均码长达到最小的前缀码编码方案</p><p><strong>策略</strong> 频率小的字符，深度大。队列Q以f(c)为键值存放二叉树各结点，通过贪心选择，将最小频率的两个二叉树合并，然后将新树（频率为上述两个二叉树频率之和）插入Q中。$ T(n)=O(nlogn)$</p><p><strong>证明贪心选择性质</strong></p><p>设x和y是字符集C中具有最小频率的两个字符，证明存在C的最优前缀码，使x和y具有最长、相同的码长且仅最后一位编码不同。设二叉树T表示C的任意一个最优前缀码方案。只要证明可以对T做适当修改后，得到一棵新的二叉树T’， 新树中，x和y是最深叶子且为兄弟。同时，新树也是C的最优前缀码方案。</p><p><strong>证明最优子结构性质</strong></p><p>设T表示C的一个最优前缀码方案。x和y是树T中的叶子节点且为兄弟。z是它们的父亲。若将z看做是具有频率$f(z)=f(x)+f(y)$的字符，则证明树$T’=T-{x,y}$表示字符集$C’=C-{x,y} \bigcup {z}$的一个最优前缀码即可。</p><blockquote><p>问题：</p><p>设在1000个字母的文章中各字母出现的频率为a:83, b:14, c:28, d:38, e:131, f:29, g:20, h:53，求最优编码。</p></blockquote><h3 id="4-3-最短路径"><a href="#4-3-最短路径" class="headerlink" title="4.3 最短路径"></a>4.3 最短路径</h3><p>书上的吧，懒的写了，这个看这个就行了</p><p><img src="https://gitee.com/lowlyLi/picgo/raw/master/img/202111182050411.png" alt="image-20211118194505196"></p><h3 id="4-4-最小生成树"><a href="#4-4-最小生成树" class="headerlink" title="4.4 最小生成树"></a>4.4 最小生成树</h3><p>参考数据结构，这个太简单了</p><h3 id="4-5-0-1背包（可分割）"><a href="#4-5-0-1背包（可分割）" class="headerlink" title="4.5 0-1背包（可分割）"></a>4.5 0-1背包（可分割）</h3><p><strong>贪心策略</strong></p><ol><li>计算每种物品的单价（性价比）$\frac{v_i}{w_i}$</li><li>按物品单价从大到小排序</li><li>优先选取物品单价高的，直到背包装满。</li></ol><blockquote><p>$n=3,c=20,W={18,15,10},V={25,24,15}$</p></blockquote><p><strong>补充几种贪心策略</strong>（但是都不能保证得到最优解）</p><ol><li>选择可以装入背包的价值最大的物品</li><li>选择可装入背包的重量最小的物品</li><li>选择可装入背包的$\frac{v_i}{w_i}$最大的物品（一般用来做回溯法或者分支限界的限界函数）</li></ol><h3 id="3-6最优装载"><a href="#3-6最优装载" class="headerlink" title="3.6最优装载"></a>3.6最优装载</h3><p><strong>策略</strong> 重量最轻的先装$ T(n)=O(nlogn)$</p><p>策略：</p><ol><li>见货物重量按从小到大排序</li><li>优先选取重量下的物品，直到无法装下为主</li></ol><h2 id="5-回溯法"><a href="#5-回溯法" class="headerlink" title="5.回溯法"></a>5.回溯法</h2><h3 id="5-1-回溯原理"><a href="#5-1-回溯原理" class="headerlink" title="5.1 回溯原理"></a>5.1 回溯原理</h3><p>这里很矛盾，书上的回溯有一点点离谱，感觉是极端的剪枝，考试还得按课本来。</p><p><strong>算法框架</strong></p><ol><li><p>子集树算法框架<br>当所给的问题是从 个元素的集合 中找出 满足性质的子集时，相应的解空间树称为子集树</p></li><li><p>排列树算法框架<br>当所给问题是确定 个元素满足某种性质的排列时，相应的解空间树称为排列树</p></li></ol><p><strong>剪枝函数</strong></p><ol><li><p>用约束函数在扩展结点处剪去不满足约束的子树；</p></li><li><p>用限界函数剪去得不到最优解的子树</p></li></ol><p><strong>回溯法解决的问题都可以抽象为树形结构</strong>，所有回溯法的问题都可以抽象为树形结构！</p><p>因为回溯法解决的都是在集合中递归查找子集，<strong>集合的大小就构成了树的宽度，递归的深度，都构成的树的深度</strong>。</p><p>递归就要有终止条件，所以必然是一颗高度有限的树（N叉树）。</p><h4 id="回溯法的效率"><a href="#回溯法的效率" class="headerlink" title="回溯法的效率"></a>回溯法的效率</h4><p>回溯法的性能如何呢，这里要和大家说清楚了，<strong>虽然回溯法很难，很不好理解，但是回溯法并不是什么高效的算法</strong>。</p><p><strong>因为回溯的本质是穷举，穷举所有可能，然后选出我们想要的答案</strong>，如果想让回溯法高效一些，可以加一些剪枝的操作，但也改不了回溯法就是穷举的本质。</p><h4 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">backtracking</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>终止条件<span class="token punctuation">)</span> <span class="token punctuation">{</span>        存放结果<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>选择：本层集合中元素（树中节点孩子的数量就是集合的大小）<span class="token punctuation">)</span> <span class="token punctuation">{</span>        处理节点<span class="token punctuation">;</span>        <span class="token function">backtracking</span><span class="token punctuation">(</span>路径，选择列表<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归</span>        回溯，撤销处理结果    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-装载问题"><a href="#5-2-装载问题" class="headerlink" title="5.2 装载问题"></a>5.2 装载问题</h3><p><strong>问题描述</strong> n个集装箱要装到2艘载重量分别为c1,c2的货轮，其中集装箱 $i$的重量为$w_i$。要求找到装载方案将这n个货箱装上这2艘轮船</p><p><strong>解释</strong> 若装载问题有解, 采用如下策略可得一个最优装载方案：将第一艘轮船尽可能装满，将剩余的货箱装到第二艘轮船上。将第一艘船尽可能装满类似0-1背包问题</p><blockquote><p><strong>例题</strong></p><p>n=4,c1=12,W={8,6,2,3}</p></blockquote><h3 id="5-3-0-1背包"><a href="#5-3-0-1背包" class="headerlink" title="5.3 0-1背包"></a>5.3 0-1背包</h3><p><strong>解释</strong> 子集树。只要左儿子节点是一个可行结点，搜索就进入左子树（不超过背包重量）（约束剪枝）。在右子树中有可能包含最优解是才进入右子树搜索，否则将右子树剪去（利用单价贪心求解价值上限）（限界剪枝）。$cw$是背包当前重量，$M-cw$是背包剩余的空间，$cp$是当前总收益，$rp$是贪心算法剩余的物品收益，$bestw$记录当前最优价值，也就是判断$bp=cp+cp&gt;bestw$是右节点的限界函数。（此外，回溯法解0/1背包的前置条件是物品已按$\frac{p_i}{w_i}$非增次序排序）</p><blockquote><p><strong>例题</strong></p><p>M=110，w=(1,11,21,23,33,43,45,55)，v=(11,21,31,33,43,53,55,65)</p></blockquote><h2 id="6-分枝限定"><a href="#6-分枝限定" class="headerlink" title="6.分枝限定"></a>6.分枝限定</h2><p>和回溯无限接近，搞清楚优先队列的优先级就可以</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CUMT算法实验</title>
      <link href="/2021/11/17/suan-fa-shi-yan/"/>
      <url>/2021/11/17/suan-fa-shi-yan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>作者： lowly</p><p>仅供学习交流</p></blockquote><h1 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h1><h1 id="问题-A-排列问题"><a href="#问题-A-排列问题" class="headerlink" title="问题 A: 排列问题"></a>问题 A: 排列问题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>  输入一个可能含有重复字符的字符串，打印出该字符串中所有字符的全排列。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>单组测试数据，输入数据是一个长度不超过10个字符的字符串，以逗号结尾。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>打印出该字符串中所有字符的全排列。以字典序顺序输出，用空格分隔。</p><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">abc,<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">abc acb bac bca cab cba<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>回溯法，这里采用回溯进行遍历枚举。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;string path;vector&lt;string&gt; result;vector&lt;int&gt; used;void backtrack(string str){if(path.size() == str.size()){result.push_back(path);return;}for(int i=0;i&lt;str.size();i++){if(used[i]){continue;}used[i] = 1;path.push_back(str[i]);backtrack(str);path.pop_back();used[i] = 0;}}int main(){string str;cin &gt;&gt; str;str.pop_back();sort(str.begin(),str.end());used.resize(str.size(),0);backtrack(str);for(auto s : result){cout &lt;&lt; s &lt;&lt; " ";}cout &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-B-快速幂"><a href="#问题-B-快速幂" class="headerlink" title="问题 B: 快速幂"></a>问题 B: 快速幂</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="https://s2.loli.net/2021/12/09/1JwR9CvtIPZaGhK.jpg" alt="20180914130647_85638-16364329703111"></p><h2 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h2><p>多组测试样例，最多50组。每组测试样例给定一个整数x(1&lt;=x&lt;=25000)</p><h2 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h2><p>对每个样例，输出一行，代表f(x)对100000007取余的结果。</p><h2 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">345<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">332893414<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>这里是快速幂的技巧，采用化二进制判断迭代。</p><p>这里代码思路没问题，但得用long long类型</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;const long long mod = 100000007;long long mypow(long long n,long long m){long long ans = 1;while(m){if(m &amp; 1){ans = ans * n % mod;}m = m &gt;&gt; 1;n = (n * n) % mod;}return ans;}int main(){int n;while(cin &gt;&gt; n){long long ans = 0;for(int i=1;i&lt;=n;i++){ans = (ans + mypow(i,i)) % mod;}cout &lt;&lt; ans+1 &lt;&lt; endl;}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits/stdc++.h&gt;using namespace std;int main(){string str;cin &gt;&gt; str;str.pop_back();sort(str.begin(),str.end());do{cout &lt;&lt; str &lt;&lt; " ";}while(next_permutation(str.begin(),str.end()));return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-C-求第k小"><a href="#问题-C-求第k小" class="headerlink" title="问题 C: 求第k小"></a>问题 C: 求第k小</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定n(1&lt;=n&lt;=1000000)个元素，求第k小数(1&lt;=k&lt;=n)。</p><h2 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h2><p>一组样例。第一行输入两个整数n和k。第二行输入n个不同的int范围内的数。</p><h2 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h2><p>输出一行，输出第k小数。</p><h2 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">5 21 5 3 2 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p><a href="https://blog.51cto.com/svenman/1851716">https://blog.51cto.com/svenman/1851716</a></p><p>qsort排序 <a href="https://blog.csdn.net/weixin_41096569/article/details/104771864">https://blog.csdn.net/weixin_41096569/article/details/104771864</a></p><p>不知道为什么c++算法的sort会超时，用c的就可以 过</p><p>这里有一点qsort使用配合数组，</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void qsort (void* base, size_t num, size_t size,            int (*compar)(const void*,const void*));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><h3 id="方法一-使用qsort"><a href="#方法一-使用qsort" class="headerlink" title="方法一 使用qsort"></a>方法一 使用qsort</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int compare (const void * a, const void * b){  return ( *(int*)a - *(int*)b );}int nums[1000011];int main(){int n,k;cin &gt;&gt; n &gt;&gt; k;for(int i=0;i&lt;n;i++){cin &gt;&gt; nums[i];}//sort(nums.begin(),nums.end());qsort(nums,n,sizeof(int),compare);cout &lt;&lt; nums[k-1] &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二-手写sort"><a href="#方法二-手写sort" class="headerlink" title="方法二 手写sort"></a>方法二 手写sort</h3><p>这里输入cin会超时（离谱）就这一点点差距。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std; int a[1000001];   int partition(int a[],int p,int r){    int x=a[r];    int middle=p;    int j;    for(j=p;j&lt;r;j++)    {        if(a[j]&lt;x)        {            if(j!=middle)              swap(a[middle],a[j]);            middle++;        }     }    swap(a[middle],a[j]);    return middle;}   void select(int a[],int p,int r){    if(p&lt;r)    {        int q=partition(a,p,r);        select(a,p,q-1);        select(a,q+1,r);        }}   int main(){    int n,k;    cin&gt;&gt;n&gt;&gt;k;    for(int i=0;i&lt;n;i++)        scanf("%d",&amp;a[i]);    select(a,0,n-1);    cout&lt;&lt;a[k-1]&lt;&lt;endl;    return 0;   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法三-发现数组sort能过"><a href="#方法三-发现数组sort能过" class="headerlink" title="方法三 发现数组sort能过"></a>方法三 发现数组sort能过</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int a[1000000];int main(){int n,k;cin&gt;&gt;n&gt;&gt;k;for(int i=0;i&lt;n;i++){cin &gt;&gt; a[i];}sort(a,a+n);cout &lt;&lt; a[k-1] &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-D-内部收益率"><a href="#问题-D-内部收益率" class="headerlink" title="问题 D: 内部收益率"></a>问题 D: 内部收益率</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="https://s2.loli.net/2021/12/09/1y6omwJNc32jPTg.jpg" alt="20180914131556_63531"></p><h2 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h2><p><img src="https://s2.loli.net/2021/12/09/npyQKqVgtLfka7N.jpg" alt="20180914131642_82198"></p><h2 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h2><p>对于每组数据，输出仅一行，即项目的IRR，四舍五入保留小数点后两位。</p><h2 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">1-1 22-8 6 90<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">1.000.50<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><p>二分搜索，模拟逼近</p><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main(){int n;while((cin &gt;&gt; n) &amp;&amp; n){vector&lt;int&gt; cf(n+1,0);for(int i=0;i&lt;= n;i++){cin &gt;&gt; cf[i];}double min, max, ans, mid;min = -1.0;        max = 1000000;        while(max - min &gt; 1e-6){ans = cf[0];            mid = (max-min) / 2 + min;            for(int i=1;i&lt;=n;i++){ans += cf[i] / pow(1 + mid, i);}            if(ans &gt; 0)            min = mid;            else            max = mid;}printf("%.2lf\n",mid);}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-E-跳台阶"><a href="#问题-E-跳台阶" class="headerlink" title="问题 E: 跳台阶"></a>问题 E: 跳台阶</h1><blockquote><p>时间限制: 1 Sec </p><p>内存限制: 128 MB </p></blockquote><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><h2 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h2><p>多组测试样例。每组测试样例包含一个整数n。(1&lt;=n&lt;=100)</p><h2 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h2><p>每组测试样例输出一行，表示青蛙跳上n级台阶的跳法数量.</p><p>所得到的结果模1000000007</p><h2 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">34<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">35<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h2><p>可以看成初等的动态规划</p><p>dp数组存储</p><h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><h3 id="方法一-直接dp存储"><a href="#方法一-直接dp存储" class="headerlink" title="方法一 直接dp存储"></a>方法一 直接dp存储</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;const long long mod = 1000000007;int main(){int n;while(cin &gt;&gt; n){if(n &lt;= 1){cout &lt;&lt; n &lt;&lt; endl;continue;}vector&lt;long long&gt; dp(n+1,0);dp[0] = 1;dp[1] = 1;for(int i=2;i&lt;=n;i++){dp[i] = (dp[i-1] + dp[i-2]) % mod;}cout &lt;&lt; dp[n] &lt;&lt; endl;}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二-改进只需要维护3个dp就行了"><a href="#方法二-改进只需要维护3个dp就行了" class="headerlink" title="方法二 改进只需要维护3个dp就行了"></a>方法二 改进只需要维护3个dp就行了</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;const long long mod = 1000000007;int main(){int n;while(cin &gt;&gt; n){if(n &lt;= 1){cout &lt;&lt; n &lt;&lt; endl;continue;}int dp[3];dp[0] = 1;dp[1] = 1;for(int i=2;i&lt;=n;i++){dp[2] = (dp[0] + dp[1]) % mod;dp[0] = dp[1];dp[1] = dp[2];}cout &lt;&lt; dp[2] &lt;&lt; endl;}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a>实验二</h1><h1 id="问题-A-沙子的质量"><a href="#问题-A-沙子的质量" class="headerlink" title="问题 A: 沙子的质量"></a>问题 A: 沙子的质量</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h2><p>设有N堆沙子排成一排，其编号为1，2，3，…，N（N&lt; =300）。每堆沙子有一定的数量，可以用一个整数来描述，现在要将N堆沙子合并成为一堆，每次只能合并相邻的两堆，合并的代价为这两堆沙子的数量之和，合并后与这两堆沙子相邻的沙子将和新堆相邻，合并时由于选择的顺序不同，合并的总代价也不相同，如有4堆沙子分别为1 3 5 2我们可以先合并1、2堆，代价为4，得到4 5 2又合并1，2堆，代价为9，得到9 2，再合并得到11，总代价为4+9+11=24，如果第二步是先合并2，3堆，则代价为7，得到4 7，最后一次合并代价为11，总代价为4+7+11=22；问题是：找出一种合理的方法，使总的代价最小。输出最小代价。</p><h2 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h2><p>第一行一个数N表示沙子的堆数N。 第二行N个数，表示每堆沙子的质量。 a[i]&lt; =1000。</p><h2 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h2><p>合并的最小代价。</p><h2 id="样例输入-5"><a href="#样例输入-5" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">41 3 5 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-5"><a href="#样例输出-5" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h2><p>这里和矩阵连乘差不多</p><p>这里cost（）也就是合并有<code>sum[j]-sum[i]</code>给出</p><p>这里外层遍历是长度，合并的长度</p><p>然后计算出i，j也就是合并区间</p><p>k是中间循环查找min</p><p>这里记得一个是sum初始化，一个是dp <code>i==j</code>时<code>dp=0</code>初始化<code>dp[i][j] = INT_MAX</code></p><p>参考</p><p><img src="https://s2.loli.net/2021/12/09/xJLWMnc2kqmHg1p.png" alt="image-20211107221323477"></p><h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main(){int n;cin &gt;&gt; n;vector&lt;int&gt; nums(n,0);vector&lt;int&gt; sum(n+1,0);vector&lt;vector&lt;int&gt;&gt; dp(n,vector&lt;int&gt;(n,0));//先输入数组for(int i=0;i&lt;n;i++){cin &gt;&gt; nums[i];}//初始化sum，方便求i,j之间的代价for(int i=0;i&lt;n;i++){sum[i+1] = sum[i] + nums[i];}//这是是遍历长度，2开始，1为0；for(int len = 2;len&lt;=n;len++){//这里初始化i，j,这里要右端点小于n，防止越界，斜方向遍历for(int i=0;i+len-1 &lt; n;i++){int j = i+len-1;dp[i][j] = INT_MAX;for(int k=i;k&lt;j;k++){dp[i][j] = min(dp[i][j],dp[i][k]+dp[k+1][j]+sum[j+1]-sum[i]);}}}cout &lt;&lt; dp[0][n-1] &lt;&lt;endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-B-最长公共子序列"><a href="#问题-B-最长公共子序列" class="headerlink" title="问题 B: 最长公共子序列"></a>问题 B: 最长公共子序列</h1><p>时间限制: 1 Sec 内存限制: 128 MB</p><h2 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h2><p>一个字符串A的子串被定义成从A中顺次选出若干个字符构成的串。如A=“cdaad” ,顺次选1，3，5个字符就构成子串” cad” ,现给定两个字符串，求它们的最长共公子串。</p><h2 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h2><p>第一行两个字符串用空格分开。两个串的长度均小于2000 。</p><h2 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h2><p>最长子串的长度。</p><h2 id="样例输入-6"><a href="#样例输入-6" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">abccd aecd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="样例输出-6"><a href="#样例输出-6" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main(){string str1,str2;cin &gt;&gt; str1 &gt;&gt; str2;int m = str1.size();int n = str2.size();vector&lt;vector&lt;int&gt;&gt; dp(m+1,vector&lt;int&gt;(n+1,0));for(int i=1;i&lt;=m;i++){for(int j=1;j&lt;=n;j++){if(str1[i-1] == str2[j-1]){dp[i][j] = dp[i-1][j-1] + 1;}else{dp[i][j] = max(dp[i-1][j],dp[i][j-1]);}}}cout &lt;&lt; dp[m][n] &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-C-三角形的路径权"><a href="#问题-C-三角形的路径权" class="headerlink" title="问题 C: 三角形的路径权"></a>问题 C: 三角形的路径权</h1><p>时间限制: 1 Sec 内存限制: 128 MB</p><h2 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h2><p>如输入样例所示出了一个数字三角形。请编一个程序计算从顶至底的某处的一条路径，使该路径所经过的数字的总和最大。每一步可沿左斜线向下或右斜线向下走；1&lt; 三角形行数&lt; 25；三角形中的数字为整数&lt; 1000；</p><h2 id="输入-7"><a href="#输入-7" class="headerlink" title="输入"></a>输入</h2><p>输入第一行为N，表示有N行 后面N行表示三角形每条路的路径权。</p><h2 id="输出-7"><a href="#输出-7" class="headerlink" title="输出"></a>输出</h2><p>输出路径所经过的数字的总和最大的答案。</p><h2 id="样例输入-7"><a href="#样例输入-7" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">573 88 1 02 7 4 44 5 2 6 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-7"><a href="#样例输出-7" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">30<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h2><p>逆向，自底向上</p><p>i == N 时 <code>dp[i][j] = mp[i][j]</code></p><p>其他 ：<code>dp[i][j]=max(dp[i+1][j],dp[i+1][j+1])+mp[i][j]</code></p><h2 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main(){int n;cin &gt;&gt; n;vector&lt;vector&lt;int&gt;&gt; mp(n,vector&lt;int&gt;(n,-1));for(int i=0;i&lt;n;i++){for(int j=0;j&lt;=i;j++){cin &gt;&gt; mp[i][j];}}vector&lt;vector&lt;int&gt;&gt; dp(n+1,vector&lt;int&gt;(n+1,0));for(int i=n-1;i&gt;=0;i--){for(int j=0;j&lt;=i;j++){if(i == n-1){dp[i][j] = mp[i][j];}else{dp[i][j]=max(dp[i+1][j],dp[i+1][j+1])+mp[i][j];}}}cout &lt;&lt; dp[0][0] &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-D-跳跃游戏二"><a href="#问题-D-跳跃游戏二" class="headerlink" title="问题 D: 跳跃游戏二"></a>问题 D: 跳跃游戏二</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个非负整数数组，假定你的初始位置为数组第一个下标。数组中的每个元素代表你在那个位置能够跳跃的最大长度。你的目标是到达最后一个下标，并且使用最少的跳跃次数。例如：A = [2,3,1,1,4]，到达最后一个下标的最少跳跃次数为 2。（先跳跃11步，从下标0到1，然后跳跃3步，到达最后一个下标。一共两次）</p><h2 id="输入-8"><a href="#输入-8" class="headerlink" title="输入"></a>输入</h2><p>第一行输入一个正整数n(1≤n≤100)，接下来的一行，输入n个整数，表示数组A。</p><h2 id="输出-8"><a href="#输出-8" class="headerlink" title="输出"></a>输出</h2><p>最后输出最少的跳跃次数。</p><h2 id="样例输入-8"><a href="#样例输入-8" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">53 1 1 1 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-8"><a href="#样例输出-8" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h2><p>这里可以拿dp动态规划</p><p>但我选择更简单的贪心算法，求最大覆盖范围</p><p>看几次就可以覆盖终点</p><h2 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h2><h3 id="方法一-贪心算法"><a href="#方法一-贪心算法" class="headerlink" title="方法一 贪心算法"></a>方法一 贪心算法</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main(){int n;cin &gt;&gt; n;vector&lt;int&gt; nums(n,0);for(int i=0;i&lt;n;i++){cin &gt;&gt; nums[i];}int curDistance = 0;    // 当前覆盖的最远距离下标int ans = 0;            // 记录走的最大步数int nextDistance = 0;   // 下一步覆盖的最远距离下标for(int i=0;i&lt;n-1;i++){nextDistance = max(nums[i]+i,nextDistance);if(i == curDistance){curDistance = nextDistance;ans++;}}cout &lt;&lt; ans &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-E-字母排序"><a href="#问题-E-字母排序" class="headerlink" title="问题 E: 字母排序"></a>问题 E: 字母排序</h1><p>时间限制: 1 Sec</p><p> 内存限制: 128 MB</p><h2 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h2><p>XXXX年突然有外星人造访，但大家语言不通，不过科学家们经过研究发现外星人用26个英文字母组成的单词中最长不降子序列的长度来表述数字，且英文字母的排列顺序不同，现给出其排列顺序，再给出外星人说的每个数字（其实是每个英文单词，用空格隔开），翻译出外星人所说的数字（连续输出，最后加回车）。(因为是最长不降子序列，所以数字中没有0，也就是说外星人的数字是大于0的数字)。例如，我们正常的字母排列顺序是abcdefg…….xyz，代表a&lt; b&lt; c&lt; …..&lt; x&lt; y&lt; z abcd efg hhh ihg四个字符串的最长不降子序列的长度分别为4 3 3 1。</p><h2 id="输入-9"><a href="#输入-9" class="headerlink" title="输入"></a>输入</h2><p>第1，2行为字符串 含义如题描述。1≤第二行长度≤255。</p><h2 id="输出-9"><a href="#输出-9" class="headerlink" title="输出"></a>输出</h2><p>输出答案，含义如题描述</p><h2 id="样例输入-9"><a href="#样例输入-9" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">abcdefghijklmnopqrstuvwxyzabcd efg hhh ihg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-9"><a href="#样例输出-9" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">4331<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main(){string str;cin &gt;&gt; str;    //这里map映射，因为是26的字母不分大小写，如果混合使用，统一转成小写就好了，map用红黑树，unordered_map应用哈希unordered_map&lt;char,int&gt; map;for(int i=0;i&lt;str.size();i++){map[str[i]] = i;}while(cin &gt;&gt; str){//里面就是最简单最大子序列//这里初始化为1vector&lt;int&gt; dp(str.size(),1);int ans = 0;for(int i=0;i&lt;str.size();i++){for(int j=0;j&lt;i;j++){if(map[str[i]] &gt;= map[str[j]]){dp[i] = max(dp[i],dp[j]+1);}if(ans &lt; dp[i]){ans = dp[i];}}}cout &lt;&lt; ans;}cout &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="实验三"><a href="#实验三" class="headerlink" title="实验三"></a>实验三</h1><h1 id="问题-A-Homework"><a href="#问题-A-Homework" class="headerlink" title="问题 A: Homework"></a>问题 A: Homework</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h2><p>临近开学了，大家都忙着收拾行李准 备返校，但 I_Love_C 却不为此担心! 因为他的心思全在暑假作业上：目前为止还未开动。</p><p>暑假作业是很多张试卷，我们这些从试卷里爬出来的人都知道，卷子上的题目有选择题、填空题、简答题、证明题等。而做选择题的好处就在于工作量很少，但又因为选择题题目都普遍很长。如果有 5 张试卷，其中 4 张是选择题，最后一张是填空题，很明显做最后一张所花的时间要比前 4 张长很多。但如果你只做了选择题，虽然工作量很少，但表面上看起来也已经做了4/5的作业了。</p><p>I_Love_C决定就用这样的方法来蒙混过关，他统计出了做完每一张试卷所需的时间以及它做完后能得到的价值（按上面的原理，选择题越多价值当然就越高咯）。</p><p>现在就请你帮他安排一下，用他仅剩的一点时间来做最有价值的作业。</p><h2 id="输入-10"><a href="#输入-10" class="headerlink" title="输入"></a>输入</h2><p>测试数据包括多组。每组测试数据以两个整数 M,N(1&lt;M&lt;20,1&lt;N&lt;10000) 开头，分别表示试卷的数目和 I_Love_C 剩下的时间。接下来有 M 行，每行包括两个整数 T,V(1&lt;T&lt;N,1&lt;V&lt;10000)分别表示做完这张试卷所需的时间以及做完后能得到的价值，输入以 0 0 结束。</p><h2 id="输出-10"><a href="#输出-10" class="headerlink" title="输出"></a>输出</h2><p>对应每组测试数据输出 I_Love_C 能获得的最大价值。保留小数点 2 位</p><p>提示：float 的精度可能不够，你应该使用 double 类型。</p><h2 id="样例输入-10"><a href="#样例输入-10" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">4 204 105 2210 31 20 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-10"><a href="#样例输出-10" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">37.00<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h2><p>贪心算法，寻找性价比最高的</p><h2 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;bool cmp(vector&lt;double&gt;a,vector&lt;double&gt; b){return a[2] &gt; b[2];}int main(){int m,n;while(cin &gt;&gt; m &gt;&gt; n){if(m == 0 &amp;&amp; n ==0){break;}vector&lt;vector&lt;double&gt;&gt; homework(m,vector&lt;double&gt;(3,0));for(int i=0;i&lt;m;i++){cin &gt;&gt; homework[i][0] &gt;&gt; homework[i][1];homework[i][2] = homework[i][1] / homework[i][0];}sort(homework.begin(),homework.end(),cmp);double ans = 0; for(int i=0;i&lt;n;i++){if(n &gt; homework[i][0]){ans += homework[i][1];n -= homework[i][0];}else{ans += homework[i][2] * n;break;}}printf("%.2lf\n",ans);}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-B-区间包含问题"><a href="#问题-B-区间包含问题" class="headerlink" title="问题 B: 区间包含问题"></a>问题 B: 区间包含问题</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h2><p>已知 n 个左闭右开区间 [a,b)，对其进行 m 次询问，求区间[l,r]最多可以包含 n 个区间中的多少个区间，并且被包含的所有区间都不相交。</p><h2 id="输入-11"><a href="#输入-11" class="headerlink" title="输入"></a>输入</h2><p>输入包含多组测试数据，对于每组测试数据：</p><p>第一行包含两个整数 n ,m (1≤n≤100000,1≤m≤100) 。</p><p>接下来 n 行每行包含两个整数 a ,b (0≤a&lt;b≤10^9) 。</p><p>接下来 m 行每行包含两个整数 l ,r (0≤l&lt;r≤10^9) 。</p><h2 id="输出-11"><a href="#输出-11" class="headerlink" title="输出"></a>输出</h2><p>对于每组测试数据，输出 m 行，每行包含一个整数。</p><p>数据过大请使用快速输入输出。</p><h2 id="样例输入-11"><a href="#样例输入-11" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">4 31 32 41 41 21 21 31 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-11"><a href="#样例输出-11" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">112<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="思路-11"><a href="#思路-11" class="headerlink" title="思路"></a>思路</h2><p>就是右端点小排序</p><p>优先选取满足小区间</p><h2 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;bool cmp(vector&lt;int&gt; a, vector&lt;int&gt; b){return a[1] &lt; b[1];}int main(){int n, m;while(cin &gt;&gt; n &gt;&gt; m){vector&lt;vector&lt;int&gt;&gt; point(n,vector&lt;int&gt;(2,0));for(int i=0;i&lt;n;i++){cin &gt;&gt; point[i][0] &gt;&gt; point[i][1];}sort(point.begin(),point.end(),cmp);while(m--){int left,right;cin &gt;&gt; left &gt;&gt; right;int ans = 0;for(int i=0;i&lt;n;i++){if(point[i][1] &gt; right){break;}if(left &lt;= point[i][0]){left = point[i][1];ans++;}}cout &lt;&lt; ans &lt;&lt; endl;}}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-C-最长子序列"><a href="#问题-C-最长子序列" class="headerlink" title="问题 C: 最长子序列"></a>问题 C: 最长子序列</h1><p>时间限制: 1 Sec 内存限制: 128 MB</p><h2 id="题目描述-12"><a href="#题目描述-12" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个数组中找出和最大的连续几个数。（至少包含一个数）</p><p>例如：</p><p>数组A[] = [-2,1,-3,4,-1,2,1,-5,4]，则连续的子序列[4,-1,2,1]有最大的和6.</p><h2 id="输入-12"><a href="#输入-12" class="headerlink" title="输入"></a>输入</h2><p>第一行输入一个不超过1000的整数n。</p><p>第二行输入n个整数A[i]。</p><h2 id="输出-12"><a href="#输出-12" class="headerlink" title="输出"></a>输出</h2><p>输出一个整数，表示最大的和。</p><h2 id="样例输入-12"><a href="#样例输入-12" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">31 1 -2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-12"><a href="#样例输出-12" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-12"><a href="#思路-12" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-12"><a href="#代码-12" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main(){int n;cin &gt;&gt; n;vector&lt;int&gt; nums(n,0);for(int i=0;i&lt;n;i++){cin &gt;&gt; nums[i];}int sum = 0;int ans = INT_MIN;for(int i=0;i&lt;n;i++){sum += nums[i];if(sum &gt; ans){ans = sum;}if(sum &lt; 0){sum = 0;}}cout &lt;&lt; ans &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-D-三值排序"><a href="#问题-D-三值排序" class="headerlink" title="问题 D: 三值排序"></a>问题 D: 三值排序</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-13"><a href="#题目描述-13" class="headerlink" title="题目描述"></a>题目描述</h2><p>排序是一种很频繁的计算任务。一个实际的例子是，当我们给某项竞赛的优胜者按金银铜牌排序的时候。在这个任务中可能的值只有三种1，2和3。我们用交换的方法把他排成升序的。</p><p>写一个程序计算出，计算出的一个包括1、2、3三种值的数字序列，排成升序所需的最少交换次数。</p><h2 id="输入-13"><a href="#输入-13" class="headerlink" title="输入"></a>输入</h2><p>输入第1行为类别的数量N（1≤N≤1000）</p><p>输入第2行到第N+1行，每行包括一个数字（1或2或3）。</p><h2 id="输出-13"><a href="#输出-13" class="headerlink" title="输出"></a>输出</h2><p>输出包含一行，为排成升序所需的最少交换次数。</p><h2 id="样例输入-13"><a href="#样例输入-13" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">9221333231<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-13"><a href="#样例输出-13" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-13"><a href="#思路-13" class="headerlink" title="思路"></a>思路</h2><p>交换次序的，</p><p>这个不太懂，背吧</p><h2 id="代码-13"><a href="#代码-13" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main(){int n;cin &gt;&gt; n;int sum[4] = {0,0,0,0};vector&lt;int&gt; nums(n,0);for(int i=0;i&lt;n;i++){cin &gt;&gt; nums[i];sum[nums[i]]++;}int x = 0,y = 0,z=0;for(int i=0;i&lt;sum[1];i++){if(nums[i] != 1){x++;}}for(int i=sum[1];i&lt;sum[1]+sum[2];i++){if(nums[i] == 3){y++;}}for(int i=sum[1]+sum[2];i&lt;n;i++){if(nums[i] == 2){z++;}}cout &lt;&lt; x + max(y,z) &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-E-法师康的工人"><a href="#问题-E-法师康的工人" class="headerlink" title="问题 E: 法师康的工人"></a>问题 E: 法师康的工人</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-14"><a href="#题目描述-14" class="headerlink" title="题目描述"></a>题目描述</h2><p>三个法师康的工人每天早上6点到工厂开始到三条产品生产线上组装桔子手机。第一个工人在200时刻开始（从6点开始计时，以秒作为单位）在生产线上开始生产，一直到1000时刻。第二个工人，在700时刻开始，在1100时刻结束。第三个工人从1500时刻工作到2100时刻。期间最长至少有一个工人在生产线上工作的连续时间为900秒（从200时刻到1100时刻），而最长的无人生产的连续时间（从生产开始到生产结束）为400时刻（1100时刻到1500时刻）。</p><p>你的任务是用一个程序衡量N个工人在N条产品线上的工作时间列表（1≤N≤5000，以秒为单位）。</p><p>·最长的至少有一个工人在工作的时间段</p><p>·最长的无人工作的时间段（从有人工作开始计）</p><h2 id="输入-14"><a href="#输入-14" class="headerlink" title="输入"></a>输入</h2><p>输入第1行为一个整数N，第2-N+1行每行包括两个均小于1000000的非负整数数据，表示其中一个工人的生产开始时间与结束时间。</p><h2 id="输出-14"><a href="#输出-14" class="headerlink" title="输出"></a>输出</h2><p>输出为一行，用空格分隔开两个我们所求的数。</p><h2 id="样例输入-14"><a href="#样例输入-14" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">3200 1000700 11001500 2100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-14"><a href="#样例输出-14" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">900 400<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-14"><a href="#思路-14" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-14"><a href="#代码-14" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;bool cmp(vector&lt;int&gt; a, vector&lt;int&gt; b){if(a[0] == b[0])return a[1] &lt; b[1];return a[0] &lt; b[0];}int main(){int n;cin &gt;&gt; n;vector&lt;vector&lt;int&gt;&gt; point(n,vector&lt;int&gt;(2,0));for(int i=0;i&lt;n;i++){cin &gt;&gt; point[i][0] &gt;&gt; point[i][1];}sort(point.begin(),point.end(),cmp);int maxx = 0;int minn = 0;int start,end;start = point[0][0];end = point[0][1];for(int i=1;i&lt;n;i++){if(point[i][0] &lt;= end){end =max(point[i][1],end);maxx = max(maxx,end - start);}else{start = point[i][0];minn = max(minn,start - end);end = point[i][1];}}cout &lt;&lt; maxx &lt;&lt; " " &lt;&lt; minn &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="作业一"><a href="#作业一" class="headerlink" title="作业一"></a>作业一</h1><h1 id="问题-A-进制转换"><a href="#问题-A-进制转换" class="headerlink" title="问题 A: 进制转换"></a>问题 A: 进制转换</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-15"><a href="#题目描述-15" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个十进制正整数，然后输出它所对应的八进制数。</p><h2 id="输入-15"><a href="#输入-15" class="headerlink" title="输入"></a>输入</h2><p>输入一个十进制正整数n(1≤n≤10<em>6</em>) 。</p><h2 id="输出-15"><a href="#输出-15" class="headerlink" title="输出"></a>输出</h2><p>输出n对应的八进制数，输出在一行。</p><h2 id="样例输入-15"><a href="#样例输入-15" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="样例输出-15"><a href="#样例输出-15" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">12<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-15"><a href="#思路-15" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-15"><a href="#代码-15" class="headerlink" title="代码"></a>代码</h2><h3 id="方法一-c语言-o强转"><a href="#方法一-c语言-o强转" class="headerlink" title="方法一 c语言%o强转"></a>方法一 c语言%o强转</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main(){int n;cin &gt;&gt; n;printf("%o\n",n);return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二-存储"><a href="#方法二-存储" class="headerlink" title="方法二 %/存储"></a>方法二 %/存储</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main(){int n;cin &gt;&gt; n;vector&lt;int&gt; num;while(n){num.push_back(n%8);n /= 8;}for(int i=num.size()-1;i&gt;=0;i--){cout &lt;&lt; num[i];}cout &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-B-排列问题"><a href="#问题-B-排列问题" class="headerlink" title="问题 B: 排列问题"></a>问题 B: 排列问题</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-16"><a href="#题目描述-16" class="headerlink" title="题目描述"></a>题目描述</h2><p>  输入一个可能含有重复字符的字符串，打印出该字符串中所有字符的全排列。</p><h2 id="输入-16"><a href="#输入-16" class="headerlink" title="输入"></a>输入</h2><p>单组测试数据，输入数据是一个长度不超过10个字符的字符串，以逗号结尾。</p><h2 id="输出-16"><a href="#输出-16" class="headerlink" title="输出"></a>输出</h2><p>打印出该字符串中所有字符的全排列。以字典序顺序输出，用空格分隔。</p><h2 id="样例输入-16"><a href="#样例输入-16" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">abc,<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="样例输出-16"><a href="#样例输出-16" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">abc acb bac bca cab cba<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-16"><a href="#思路-16" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-16"><a href="#代码-16" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;string path;vector&lt;string&gt; result;vector&lt;int&gt; used;void backtrack(string str){if(path.size() == str.size()){result.push_back(path);return;}for(int i=0;i&lt;str.size();i++){if(used[i]){continue;}used[i] = 1;path.push_back(str[i]);backtrack(str);path.pop_back();used[i] = 0;}}int main(){string str;cin &gt;&gt; str;str.pop_back();sort(str.begin(),str.end());used.resize(str.size(),0);backtrack(str);for(auto s : result){cout &lt;&lt; s &lt;&lt; " ";}cout &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-C-快速幂"><a href="#问题-C-快速幂" class="headerlink" title="问题 C: 快速幂"></a>问题 C: 快速幂</h1><p>时间限制: 1 Sec</p><p>内存限制: 128 MB</p><h2 id="题目描述-17"><a href="#题目描述-17" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="%E7%BB%BC%E5%90%88%E7%89%88.assets/20180914130647_85638-16364329703111.png" alt="img"></p><h2 id="输入-17"><a href="#输入-17" class="headerlink" title="输入"></a>输入</h2><p>多组测试样例，最多50组。每组测试样例给定一个整数x(1&lt;=x&lt;=25000)</p><h2 id="输出-17"><a href="#输出-17" class="headerlink" title="输出"></a>输出</h2><p>对每个样例，输出一行，代表f(x)对100000007取余的结果。</p><h2 id="样例输入-17"><a href="#样例输入-17" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">345<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-17"><a href="#样例输出-17" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">332893414<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="思路-17"><a href="#思路-17" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-17"><a href="#代码-17" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;const long long mod = 100000007;long long mypow(long long x,long long m){long long ans = 1;while(m){if(m &amp; 1){ans = (ans * x) % mod;}m &gt;&gt;= 1;x = (x * x) %mod;}return ans;}int main(){int n;while(cin &gt;&gt; n){long long ans = 1;for(int i=1;i&lt;=n;i++){ans =(ans + mypow(i,i)) % mod;}cout &lt;&lt; ans &lt;&lt;endl;}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-D-求第k小"><a href="#问题-D-求第k小" class="headerlink" title="问题 D: 求第k小"></a>问题 D: 求第k小</h1><p>时间限制: 1 Sec</p><p>内存限制: 128 MB</p><h2 id="题目描述-18"><a href="#题目描述-18" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定n(1&lt;=n&lt;=1000000)个元素，求第k小数(1&lt;=k&lt;=n)。</p><h2 id="输入-18"><a href="#输入-18" class="headerlink" title="输入"></a>输入</h2><p>一组样例。第一行输入两个整数n和k。第二行输入n个不同的int范围内的数。</p><h2 id="输出-18"><a href="#输出-18" class="headerlink" title="输出"></a>输出</h2><p>输出一行，输出第k小数。</p><h2 id="样例输入-18"><a href="#样例输入-18" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">5 21 5 3 2 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-18"><a href="#样例输出-18" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="代码-18"><a href="#代码-18" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int nums[1000002];int main(){int n,k;cin &gt;&gt; n &gt;&gt; k;for(int i=0;i&lt;n;i++){cin &gt;&gt; nums[i];}sort(nums,nums+n);cout &lt;&lt; nums[k-1] &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-E-沙子的质量"><a href="#问题-E-沙子的质量" class="headerlink" title="问题 E: 沙子的质量"></a>问题 E: 沙子的质量</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-19"><a href="#题目描述-19" class="headerlink" title="题目描述"></a>题目描述</h2><p>设有N堆沙子排成一排，其编号为1，2，3，…，N（N&lt; =300）。每堆沙子有一定的数量，可以用一个整数来描述，现在要将N堆沙子合并成为一堆，每次只能合并相邻的两堆，合并的代价为这两堆沙子的数量之和，合并后与这两堆沙子相邻的沙子将和新堆相邻，合并时由于选择的顺序不同，合并的总代价也不相同，如有4堆沙子分别为1 3 5 2我们可以先合并1、2堆，代价为4，得到4 5 2又合并1，2堆，代价为9，得到9 2，再合并得到11，总代价为4+9+11=24，如果第二步是先合并2，3堆，则代价为7，得到4 7，最后一次合并代价为11，总代价为4+7+11=22；问题是：找出一种合理的方法，使总的代价最小。输出最小代价。</p><h2 id="输入-19"><a href="#输入-19" class="headerlink" title="输入"></a>输入</h2><p>第一行一个数N表示沙子的堆数N。 第二行N个数，表示每堆沙子的质量。 a[i]&lt; =1000。</p><h2 id="输出-19"><a href="#输出-19" class="headerlink" title="输出"></a>输出</h2><p>合并的最小代价。</p><h2 id="样例输入-19"><a href="#样例输入-19" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">41 3 5 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-19"><a href="#样例输出-19" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-18"><a href="#思路-18" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-19"><a href="#代码-19" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main(){int n;cin &gt;&gt; n;vector&lt;int&gt; nums(n,0);for(int i=0;i&lt;n;i++){cin &gt;&gt; nums[i];}vector&lt;int&gt; sum(n+1,0);for(int i=0;i&lt;n;i++){sum[i+1] = sum[i] + nums[i]; }vector&lt;vector&lt;int&gt;&gt; dp(n,vector&lt;int&gt;(n,INT_MAX));for(int i=0;i&lt;n;i++){dp[i][i] = 0;}for(int len=2;len&lt;=n;len++){for(int i=0;i + len -1 &lt; n;i++){int j = i + len -1;for(int k=i;k&lt;j;k++){dp[i][j] = min(dp[i][j],dp[i][k]+dp[k+1][j] + sum[j+1]-sum[i]);}}}cout &lt;&lt; dp[0][n-1] &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-F-最长公共子序列"><a href="#问题-F-最长公共子序列" class="headerlink" title="问题 F: 最长公共子序列"></a>问题 F: 最长公共子序列</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-20"><a href="#题目描述-20" class="headerlink" title="题目描述"></a>题目描述</h2><p>一个字符串A的子串被定义成从A中顺次选出若干个字符构成的串。如A=“cdaad” ,顺次选1，3，5个字符就构成子串” cad” ,现给定两个字符串，求它们的最长共公子串。</p><h2 id="输入-20"><a href="#输入-20" class="headerlink" title="输入"></a>输入</h2><p>第一行两个字符串用空格分开。两个串的长度均小于2000 。</p><h2 id="输出-20"><a href="#输出-20" class="headerlink" title="输出"></a>输出</h2><p>最长子串的长度。</p><h2 id="样例输入-20"><a href="#样例输入-20" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">abccd aecd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="样例输出-20"><a href="#样例输出-20" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-19"><a href="#思路-19" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-20"><a href="#代码-20" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main(){string str1,str2;cin &gt;&gt; str1 &gt;&gt; str2;int m = str1.size();int n = str2.size();vector&lt;vector&lt;int&gt;&gt; dp(m+1,vector&lt;int&gt;(n+1,0));for(int i=1;i&lt;=m;i++){for(int j=1;j&lt;=n;j++){if(str1[i-1] == str2[j-1]){dp[i][j] = dp[i-1][j-1] + 1;}else{dp[i][j] = max(dp[i][j-1],dp[i-1][j]);}}}cout &lt;&lt; dp[m][n] &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-G-sort"><a href="#问题-G-sort" class="headerlink" title="问题 G: sort"></a>问题 G: sort</h1><p>时间限制: 1 Sec </p><p>内存限制: 64 MB</p><h2 id="题目描述-21"><a href="#题目描述-21" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你n个整数，请按从大到小的顺序输出其中前m大的数。</p><h2 id="输入-21"><a href="#输入-21" class="headerlink" title="输入"></a>输入</h2><p>每组测试数据有两行，第一行有两个数n,m(0&lt;n,m&lt;1000000)，第二行包含n个各不相同，且都处于区间[-500000,500000]的整数。</p><h2 id="输出-21"><a href="#输出-21" class="headerlink" title="输出"></a>输出</h2><p>对每组测试数据按从大到小的顺序输出前m大的数。</p><h2 id="样例输入-21"><a href="#样例输入-21" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">5 33 -35 92 213 -644<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-21"><a href="#样例输出-21" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">213 92 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-20"><a href="#思路-20" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-21"><a href="#代码-21" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int nums[1000001];bool cmp(int a,int b){return a &gt; b;}int main(){int n,m;cin &gt;&gt; n &gt;&gt; m;for(int i=0;i&lt;n;i++){cin &gt;&gt; nums[i];}sort(nums,nums+n,cmp);for(int i=0;i&lt;m;i++){cout &lt;&lt; nums[i] &lt;&lt; " ";}cout &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-H-Joseph"><a href="#问题-H-Joseph" class="headerlink" title="问题 H: Joseph"></a>问题 H: Joseph</h1><p>时间限制: 1 Sec </p><p>内存限制: 32 MB</p><h2 id="题目描述-22"><a href="#题目描述-22" class="headerlink" title="题目描述"></a>题目描述</h2><p>The Joseph’s problem is notoriously known. For those who are not familiar with the original problem: from among n people, numbered 1, 2, . . ., n, standing in circle every mth is going to be executed and only the life of the last remaining person will be saved. Joseph was smart enough to choose the position of the last remaining person, thus saving his life to give us the message about the incident. For example when n = 6 and m = 5 then the people will be executed in the order 5, 4, 6, 2, 3 and 1 will be saved. </p><p>Suppose that there are k good guys and k bad guys. In the circle the first k are good guys and the last k bad guys. You have to determine such minimal m that all the bad guys will be executed before the first good guy.</p><p>约瑟夫问题是臭名昭著的。对于那些不熟悉原问题的人来说：从n个人中，编号为1，2，…，n，每隔m月站成一圈就要被处死，只有最后剩下的人的生命才能得到挽救。约瑟夫很聪明地选择了最后剩下的人的位置，从而保住了他的性命，给我们带来了关于这个事件的信息。例如，当n=6，m=5时，那么人们将按5、4、6、2、3的顺序被处决，1人将获救。</p><p>假设有k个好人和k个坏人。在这个圈子里，前k个是好人，后k个是坏人。你必须确定这样一个最小的m，使所有的坏人都在第一个好人之前被处决。</p><h2 id="输入-22"><a href="#输入-22" class="headerlink" title="输入"></a>输入</h2><p>The input file consists of separate lines containing k. The last line in the input file contains 0. You can suppose that 0 &lt; k &lt; 14.</p><p>输入文件由包含 k 的单独行组成。输入文件的最后一行包含 0。您可以假设 0 &lt; k &lt; 14。</p><h2 id="输出-22"><a href="#输出-22" class="headerlink" title="输出"></a>输出</h2><p>The output file will consist of separate lines containing m corresponding to k in the input file</p><p>输出文件将由包含与输入文件中的 k 对应的 m 的单独行组成</p><h2 id="样例输入-22"><a href="#样例输入-22" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">340<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-22"><a href="#样例输出-22" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">530<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="思路-21"><a href="#思路-21" class="headerlink" title="思路"></a>思路</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits/stdc++.h&gt;using namespace std;bool check(int m,int k){int res = 0;for(int i=1;i&lt;=k;i++){res = (res + m -1) % (2*k-i+1);if(res &lt; k){return false;}}return true;}int main(){int k;while((cin &gt;&gt; k) &amp;&amp; k){for(int i=k+1;;i++){if(check(i,k) == true){cout &lt;&lt; i &lt;&lt; endl;break;}}}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-I-Factstone-Benchmark"><a href="#问题-I-Factstone-Benchmark" class="headerlink" title="问题 I: Factstone Benchmark"></a>问题 I: Factstone Benchmark</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-23"><a href="#题目描述-23" class="headerlink" title="题目描述"></a>题目描述</h2><p>Amtel has announced that it will release a 128-bit computer chip by 2010, a 256-bit computer by 2020, and so on, continuing its strategy of doubling the word-size every ten years. (Amtel released a 64-bit computer in 2000, a 32-bit computer in 1990, a 16-bit computer in 1980, an 8-bit computer in 1970, and a 4-bit computer, its first, in 1960.)</p><p>Amtel will use a new benchmark - the <em>Factstone</em> - to advertise the vastly improved capacity of its new chips. The <em>Factstone</em> rating is defined to be the largest integer <em>n</em> such that <em>n!</em> can be represented as an unsigned integer in a computer word.</p><p>Given a year <em>1960 ≤ y ≤ 2160</em>, what will be the <em>Factstone</em> rating of Amtel’s most recently released chip?</p><p>Amtel公司已经宣布，它将在2010年之前发布128位计算机芯片，在2020年之前发布256位计算机，以此类推，继续其每十年将字数增加一倍的战略。(Amtel在2000年发布了64位计算机，1990年发布了32位计算机，1980年发布了16位计算机，1970年发布了8位计算机，1960年发布了其第一款4位计算机）。</p><p>Amtel公司将使用一种新的基准—Factstone—来宣传其新芯片的巨大改进的能力。Factstone评级被定义为最大的整数n，使n！可以在计算机字中表示为一个无符号整数。</p><p>考虑到1960≤y≤2160年，Amtel最近发布的芯片的Factstone等级将是多少？</p><h2 id="输入-23"><a href="#输入-23" class="headerlink" title="输入"></a>输入</h2><p>There are several test cases. For each test case, there is one line of input containing <em>y</em>. A line containing 0 follows the last test case.</p><p>有几个测试用例。对于每个测试用例，有一行包含 y 的输入。包含 0 的行跟随最后一个测试用例</p><h2 id="输出-23"><a href="#输出-23" class="headerlink" title="输出"></a>输出</h2><p>For each test case, output a line giving the Factstone rating. </p><p>对于每个测试用例，输出一行给出Factstone等级。</p><h2 id="样例输入-23"><a href="#样例输入-23" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">196019810<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-23"><a href="#样例输出-23" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">38<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="思路-22"><a href="#思路-22" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-22"><a href="#代码-22" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits/stdc++.h&gt;using namespace std;int main(){int n;while((cin &gt;&gt; n) &amp;&amp; n){double  a = log2(4.0);for (int i = 1960; i &lt;= n; i += 10)a *= 2;double  f = 0;int i = 0;while(f &lt; a){++i;f += log2(double(i));}cout &lt;&lt; i - 1 &lt;&lt; endl;}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-J-Ants"><a href="#问题-J-Ants" class="headerlink" title="问题 J: Ants"></a>问题 J: Ants</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-24"><a href="#题目描述-24" class="headerlink" title="题目描述"></a>题目描述</h2><p>An army of ants walk on a horizontal pole of length <em>l</em> cm, each with a constant speed of 1 cm/s. When a walking ant reaches an end of the pole, it immediatelly falls off it. When two ants meet they turn back and start walking in opposite directions. We know the original positions of ants on the pole, unfortunately, we do not know the directions in which the ants are walking. Your task is to compute the earliest and the latest possible times needed for all ants to fall off the pole. </p><p>一群蚂蚁走在一根长为 l cm 的水平杆上，每支蚂蚁以 1 cm/s 的恒定速度行走。当一只行走的蚂蚁到达杆子的末端时，它会立即从杆子上掉下来。当两只蚂蚁相遇时，它们会转身向相反的方向走。我们知道蚂蚁在杆子上的原始位置，不幸的是，我们不知道蚂蚁行走的方向。你的任务是计算所有蚂蚁从杆子上掉下来所需的最早和最晚时间。</p><h2 id="输入-24"><a href="#输入-24" class="headerlink" title="输入"></a>输入</h2><p>The first line of input contains one integer giving the number of cases that follow. The data for each case start with two integer numbers: the length of the pole (in cm) and <em>n</em>, the number of ants residing on the pole. These two numbers are followed by <em>n</em> integers giving the position of each ant on the pole as the distance measured from the left end of the pole, in no particular order. All input integers are not bigger than 1000000 and they are separated by whitespace. </p><p>输入的第一行包含一个整数，给出后面的案例数。每个案例的数据都以两个整数开始：杆的长度（以厘米为单位）和 n，杆上的蚂蚁数量。这两个数字后跟 n 个整数，表示每只蚂蚁在杆子上的位置，即从杆子左端测量的距离，没有特定的顺序。所有输入的整数都不大于 1000000，并且它们以空格分隔。</p><h2 id="输出-24"><a href="#输出-24" class="headerlink" title="输出"></a>输出</h2><p>For each case of input, output two numbers separated by a single space. The first number is the earliest possible time when all ants fall off the pole (if the directions of their walks are chosen appropriately) and the second number is the latest possible such time.</p><p>对于输入的每种情况，输出由单个空格分隔的两个数字。第一个数字是所有蚂蚁从杆子上掉下来的最早时间（如果它们的行走方向选择得当），第二个数字是最晚的时间。</p><h2 id="样例输入-24"><a href="#样例输入-24" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">210 32 6 7214 711 12 7 13 176 23 191<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-24"><a href="#样例输出-24" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">4 838 207<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="思路-23"><a href="#思路-23" class="headerlink" title="思路"></a>思路</h2><p><code>Min=max(Min,min(a[i],L-a[i]));</code></p><p><code>Max=max(Max,max(a[i],L-a[i]));</code></p><h2 id="代码-23"><a href="#代码-23" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits/stdc++.h&gt;using namespace std;int main(){int t;cin &gt;&gt; t;while(t--){int l,n;cin &gt;&gt; l &gt;&gt; n;vector&lt;int&gt; ants(n,0);for(int i=0;i&lt;n;i++){cin &gt;&gt; ants[i];}int Max = 0, Min = 0;for(int i=0;i&lt;n;i++){Min = max(Min,min(ants[i],l-ants[i]));Max = max(Max,max(ants[i],l-ants[i]));}cout &lt;&lt; Min &lt;&lt; " " &lt;&lt; Max &lt;&lt; endl;}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-K-Matches-Game"><a href="#问题-K-Matches-Game" class="headerlink" title="问题 K: Matches Game"></a>问题 K: Matches Game</h1><p>时间限制: 1 Sec </p><p>内存限制: 64 MB</p><h2 id="题目描述-25"><a href="#题目描述-25" class="headerlink" title="题目描述"></a>题目描述</h2><p>Here is a simple game. In this game, there are several piles of matches and two players. The two player play in turn. In each turn, one can choose a pile and take away arbitrary number of matches from the pile (Of course the number of matches, which is taken away, cannot be zero and cannot be larger than the number of matches in the chosen pile). If after a player’s turn, there is no match left, the player is the winner. Suppose that the two players are all very clear. Your job is to tell whether the player who plays first can win the game or not. </p><p>这是一个简单的游戏。在这场比赛中，有几堆比赛和两名球员。两个玩家轮流玩。在每一回合中，可以选择一堆并从堆中带走任意数量的火柴（当然，被带走的火柴数量不能为零，也不能大于所选堆中的火柴数量）。如果在轮到玩家之后，没有剩余比赛，则该玩家为赢家。假设两个玩家都非常清楚。你的工作是判断先玩的玩家能否赢得比赛。</p><h2 id="输入-25"><a href="#输入-25" class="headerlink" title="输入"></a>输入</h2><p>The input consists of several lines, and in each line there is a test case. At the beginning of a line, there is an integer M (1 &lt;= M &lt;=20), which is the number of piles. Then comes M positive integers, which are not larger than 10000000. These M integers represent the number of matches in each pile.</p><p>输入由几行组成，每行都有一个测试用例。在一行的开头，有一个整数M（1 &lt;= M &lt;=20），就是桩的数量。然后是M个正整数，不大于10000000。这M个整数代表每堆匹配的数量。</p><h2 id="输出-25"><a href="#输出-25" class="headerlink" title="输出"></a>输出</h2><p>For each test case, output “Yes” in a single line, if the player who play first will win, otherwise output “No”.</p><p>对于每个测试用例，单行输出“Yes”，如果先玩的玩家获胜，否则输出“No”。</p><h2 id="样例输入-25"><a href="#样例输入-25" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">2 45 453 3 6 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-25"><a href="#样例输出-25" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">NoYes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="思路-24"><a href="#思路-24" class="headerlink" title="思路"></a>思路</h2><p>这题有问题，我一直感觉学算法，优化应该在熟悉证明上，在算法复杂度上进行优化，而不是在语言效率，底层输入输出上。</p><h2 id="代码-24"><a href="#代码-24" class="headerlink" title="代码"></a>代码</h2><h3 id="c-过不了"><a href="#c-过不了" class="headerlink" title="c++过不了"></a>c++过不了</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits/stdc++.h&gt;using namespace std;int main(){int m;while(~scanf("%d",&amp;m)){int flag = 0;long long x;for(int i=0;i&lt;m;i++){cin &gt;&gt; x;flag ^= x;}if(flag) cout &lt;&lt; "Yes" &lt;&lt; endl;elsecout &lt;&lt; "No" &lt;&lt; endl; }return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="c就能过"><a href="#c就能过" class="headerlink" title="c就能过"></a>c就能过</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            flag<span class="token operator">^=</span>x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-L-sort2"><a href="#问题-L-sort2" class="headerlink" title="问题 L: sort2"></a>问题 L: sort2</h1><p>时间限制: 1 Sec</p><p>内存限制: 64 MB</p><h2 id="题目描述-26"><a href="#题目描述-26" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你n个整数，请按从大到小的顺序输出其中前m大的数。</p><h2 id="输入-26"><a href="#输入-26" class="headerlink" title="输入"></a>输入</h2><p>每组测试数据有两行，第一行有两个数n,m(0&lt;n,m&lt;1000000)，第二行包含n个都处于区间[-500000,500000]的整数，<strong><em>整数可能会重复出现\</em></strong>。</p><h2 id="输出-26"><a href="#输出-26" class="headerlink" title="输出"></a>输出</h2><p>对每组测试数据按从大到小的顺序输出前m大的数。</p><h2 id="样例输入-26"><a href="#样例输入-26" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">10 51 2 3 4 5 6 7 7 8 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-26"><a href="#样例输出-26" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">9 8 7 7 6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-25"><a href="#思路-25" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-25"><a href="#代码-25" class="headerlink" title="代码"></a>代码</h2><h3 id="直接sort超时"><a href="#直接sort超时" class="headerlink" title="直接sort超时"></a>直接sort超时</h3><h3 id="map超时"><a href="#map超时" class="headerlink" title="map超时"></a>map超时</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int nums[1000001];int main(){int n,m;cin &gt;&gt; n &gt;&gt; m;map&lt;int,int&gt; mp;for(int i=0;i&lt;n;i++){cin &gt;&gt; nums[i];if(mp.find(nums[i]) != mp.end()){mp[nums[i]]++;}mp.insert(pair&lt;int,int&gt;(nums[i],1));}int i = 0;for(auto num : mp){while(num.second){nums[i] = num.first;num.second--;i++;}}for(int i=n-1;i&gt;n-m-1;i--){cout &lt;&lt; nums[i] &lt;&lt; " ";}cout &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits/stdc++.h&gt;using namespace std;const int offset = 500000;int Hash[1000001] = {0};int main(){int m,n;while(cin &gt;&gt; n &gt;&gt; m){for(int i=0;i&lt;n;i++){int x;cin &gt;&gt; x;Hash[x+offset]++;}for(int i=offset;i&gt;=-offset &amp;&amp; m &gt; 0;i--){while(Hash[i+offset] &gt; 0 &amp;&amp; m &gt; 0){cout &lt;&lt; i &lt;&lt; " ";Hash[i+offset]--;m--;}}cout &lt;&lt; endl;}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="作业二"><a href="#作业二" class="headerlink" title="作业二"></a>作业二</h1><h1 id="问题-A-单词排序"><a href="#问题-A-单词排序" class="headerlink" title="问题 A: 单词排序"></a>问题 A: 单词排序</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-27"><a href="#题目描述-27" class="headerlink" title="题目描述"></a>题目描述</h2><p>小红学会了很多英文单词，妈妈为了帮小红加强记忆，拿出纸、笔，把 N 个单词写在纸上的一行里，小红看了几秒钟后，将这张纸扣在桌子上。妈妈问小红：“你能否将这 N 个单词按照字典排列的顺序，从小到大写出来？”小红按照妈妈的要求写出了答案。现在请你编写程序帮助妈妈检查小红的答案是否正确。注意：所有单词都由小写字母组成，单词两两之间用一个空格分隔。</p><h2 id="输入-27"><a href="#输入-27" class="headerlink" title="输入"></a>输入</h2><p>输入包含两行。</p><p>第一行仅包括一个正整数N(0&lt;N≤26)。</p><p>第二行包含N个单词，表示妈妈写出的单词，两两之间用一个空格分隔。</p><p>单个单词长度不超过1010。</p><h2 id="输出-27"><a href="#输出-27" class="headerlink" title="输出"></a>输出</h2><p>输出仅有一行。针对妈妈写出的单词，按照字典排列的顺序从小到大排列成一行的结果，每个单词后带一个空格。</p><h2 id="样例输入-27"><a href="#样例输入-27" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">4city boy tree student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-27"><a href="#样例输出-27" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">boy city student tree <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-26"><a href="#思路-26" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-26"><a href="#代码-26" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits/stdc++.h&gt;using namespace std;int main(){int n;cin &gt;&gt; n;vector&lt;string&gt; strs;for(int i=0;i&lt;n;i++){string str;cin &gt;&gt; str;strs.push_back(str);}sort(strs.begin(),strs.end());for(int i=0;i&lt;n;i++){cout &lt;&lt; strs[i] &lt;&lt; " ";}cout &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-B-求数组的最长递减子序列"><a href="#问题-B-求数组的最长递减子序列" class="headerlink" title="问题 B: 求数组的最长递减子序列"></a>问题 B: 求数组的最长递减子序列</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-28"><a href="#题目描述-28" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个整数序列，输出它的最长递减（注意不是“不递增”）子序列。</p><h2 id="输入-28"><a href="#输入-28" class="headerlink" title="输入"></a>输入</h2><p>输入包括两行，第一行包括一个正整数N（N&lt;=1000），表示输入的整数序列的长度。第二行包括用空格分隔开的N个整数，整数范围区间为[-30000,30000]。</p><h2 id="输出-28"><a href="#输出-28" class="headerlink" title="输出"></a>输出</h2><p>输出最长递减子序列，数字之间有一个空格。</p><h2 id="样例输入-28"><a href="#样例输入-28" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">89 4 3 2 5 4 3 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-28"><a href="#样例输出-28" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">9 5 4 3 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-27"><a href="#思路-27" class="headerlink" title="思路"></a>思路</h2><p>求个数很简单，但最后输出的是序列数组，这个比较麻烦。</p><p>前面求出dp动态数组和最大值，顺便记录最大值的下表和值</p><p>以及每一步的前面的下表，方便后面循环查找。</p><h2 id="代码-27"><a href="#代码-27" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits/stdc++.h&gt;using namespace std;int main(){int n;cin &gt;&gt; n;vector&lt;int&gt; nums(n,0);for(int i=0;i&lt;n;i++){cin &gt;&gt; nums[i];}vector&lt;int&gt; dp(n,1);vector&lt;int&gt; track(n,-1);int result = 0;int rp = -1;for(int i=0;i&lt;n;i++){for(int j=0;j&lt;i;j++){if((nums[i] &lt; nums[j]) &amp;&amp; dp[j]+1 &gt; dp[i]){dp[i] = dp[j] + 1;track[i] = j;}if(dp[i] &gt; result){result = dp[i];rp = i;}}}vector&lt;int&gt; ans;for(int i=result;i&gt;0;i--){ans.push_back(nums[rp]);if(track[rp] == -1)break;rp = track[rp];}for(int i=ans.size()-1;i&gt;=0;i--){cout &lt;&lt; ans[i] &lt;&lt; " ";}cout &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-C-矩形滑雪场"><a href="#问题-C-矩形滑雪场" class="headerlink" title="问题 C: 矩形滑雪场"></a>问题 C: 矩形滑雪场</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-29"><a href="#题目描述-29" class="headerlink" title="题目描述"></a>题目描述</h2><p>zcb喜欢滑雪。他来到了一个滑雪场，这个滑雪场是一个矩形，为了简便，我们用r行c列的矩阵来表示每块地形。为了得到更快的速度，滑行的路线必须向下倾斜。 例如样例中的那个矩形，可以从某个点滑向上下左右四个相邻的点之一。例如24-17-16-1，其实25-24-23…3-2-1更长，事实上这是最长的一条。</p><h2 id="输入-29"><a href="#输入-29" class="headerlink" title="输入"></a>输入</h2><p>第1行:两个数字r，c(1 ≤ r, c ≤ 100)，表示矩阵的行列。第2..r+1行:每行c个数，表示这个矩阵。</p><h2 id="输出-29"><a href="#输出-29" class="headerlink" title="输出"></a>输出</h2><p>仅一行:输出1个整数，表示可以滑行的最大长度。</p><h2 id="样例输入-29"><a href="#样例输入-29" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">5 51 2 3 4 516 17 18 19 615 24 25 20 714 23 22 21 813 12 11 10 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-29"><a href="#样例输出-29" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">25<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-28"><a href="#思路-28" class="headerlink" title="思路"></a>思路</h2><p>有点难，dfs搜索应该可以</p><p>这里还是那动态规划，把这个看成大型的二维的最长递减序列。</p><h2 id="代码-28"><a href="#代码-28" class="headerlink" title="代码"></a>代码</h2><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"> #include&lt;bits/stdc++.h&gt;using namespace std;struct node{int x;int y;int n;};bool cmp(node a,node b){    return a.n&lt;b.n;}//node nums[100005];int main(){int m,n;cin &gt;&gt; m &gt;&gt; n;vector&lt;node&gt; nums(m*n);int index = 0;for(int i=0;i&lt;m;i++){for(int j=0;j&lt;n;j++){cin &gt;&gt; nums[index].n;nums[index].x = i;nums[index].y = j;index++;}}sort(nums.begin(),nums.end(),cmp);//大型的最长递减子序列int result = 0;vector&lt;int&gt; dp(index,1);for(int i=0;i&lt;index;i++){for(int j=0;j&lt;i;j++){//这里判断条件改成前后左右if(((nums[i].x==nums[j].x &amp;&amp; abs(nums[i].y-nums[j].y)==1) || (nums[i].y==nums[j].y &amp;&amp; abs(nums[i].x-nums[j].x)==1)) &amp;&amp; nums[i].n &gt; nums[j].n){dp[i] = max(dp[i],dp[j]+1);}if(dp[i] &gt; result){result = dp[i];}}}cout &lt;&lt; result &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits/stdc++.h&gt;using namespace std;struct node{int x,y,h;};bool cmp(node a,node b){return a.h &lt; b.h;}node nums[999999];int main(){int r,c;cin &gt;&gt; r &gt;&gt; c;int n = 0;for(int i=0;i&lt;r;i++){for(int j=0;j&lt;c;j++){cin &gt;&gt; nums[n].h;nums[n].x = i;nums[n].y = j;n++; }}sort(nums,nums+n,cmp);vector&lt;int&gt; dp(n,1);int result = 0;for(int i=0;i&lt;n;i++){for(int j=0;j&lt;i;j++){if((nums[i].h &gt; nums[j].h) &amp;&amp; (abs(nums[i].x-nums[j].x) + abs(nums[i].y-nums[j].y)) == 1){dp[i] = max(dp[i],dp[j]+1);}if(dp[i] &gt; result){result = dp[i];}}}cout &lt;&lt; result &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-D-Homework"><a href="#问题-D-Homework" class="headerlink" title="问题 D: Homework"></a>问题 D: Homework</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-30"><a href="#题目描述-30" class="headerlink" title="题目描述"></a>题目描述</h2><p>临近开学了，大家都忙着收拾行李准 备返校，但 I_Love_C 却不为此担心! 因为他的心思全在暑假作业上：目前为止还未开动。</p><p>暑假作业是很多张试卷，我们这些从试卷里爬出来的人都知道，卷子上的题目有选择题、填空题、简答题、证明题等。而做选择题的好处就在于工作量很少，但又因为选择题题目都普遍很长。如果有 5 张试卷，其中 4 张是选择题，最后一张是填空题，很明显做最后一张所花的时间要比前 4 张长很多。但如果你只做了选择题，虽然工作量很少，但表面上看起来也已经做了4/5的作业了。</p><p>I_Love_C决定就用这样的方法来蒙混过关，他统计出了做完每一张试卷所需的时间以及它做完后能得到的价值（按上面的原理，选择题越多价值当然就越高咯）。</p><p>现在就请你帮他安排一下，用他仅剩的一点时间来做最有价值的作业。</p><h2 id="输入-30"><a href="#输入-30" class="headerlink" title="输入"></a>输入</h2><p>测试数据包括多组。每组测试数据以两个整数 M,N(1&lt;M&lt;20,1&lt;N&lt;10000) 开头，分别表示试卷的数目和 I_Love_C 剩下的时间。接下来有 M 行，每行包括两个整数 T,V(1&lt;T&lt;N,1&lt;V&lt;10000)分别表示做完这张试卷所需的时间以及做完后能得到的价值，输入以 0 0 结束。</p><h2 id="输出-30"><a href="#输出-30" class="headerlink" title="输出"></a>输出</h2><p>对应每组测试数据输出 I_Love_C 能获得的最大价值。保留小数点 2 位</p><p>提示：float 的精度可能不够，你应该使用 double 类型。</p><h2 id="样例输入-30"><a href="#样例输入-30" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">4 204 105 2210 31 20 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-30"><a href="#样例输出-30" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">37.00<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-29"><a href="#思路-29" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-29"><a href="#代码-29" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;bool cmp(vector&lt;double&gt;a,vector&lt;double&gt; b){return a[2] &gt; b[2];}int main(){int m,n;while(cin &gt;&gt; m &gt;&gt; n){if(m == 0 &amp;&amp; n ==0){break;}vector&lt;vector&lt;double&gt;&gt; homework(m,vector&lt;double&gt;(3,0));for(int i=0;i&lt;m;i++){cin &gt;&gt; homework[i][0] &gt;&gt; homework[i][1];homework[i][2] = homework[i][1] / homework[i][0];}sort(homework.begin(),homework.end(),cmp);double ans = 0; for(int i=0;i&lt;n;i++){if(n &gt; homework[i][0]){ans += homework[i][1];n -= homework[i][0];}else{ans += homework[i][2] * n;break;}}printf("%.2lf\n",ans);}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-E-区间包含问题"><a href="#问题-E-区间包含问题" class="headerlink" title="问题 E: 区间包含问题"></a>问题 E: 区间包含问题</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-31"><a href="#题目描述-31" class="headerlink" title="题目描述"></a>题目描述</h2><p>已知 n 个左闭右开区间 [a,b)，对其进行 m 次询问，求区间[l,r]最多可以包含 n 个区间中的多少个区间，并且被包含的所有区间都不相交。</p><h2 id="输入-31"><a href="#输入-31" class="headerlink" title="输入"></a>输入</h2><p>输入包含多组测试数据，对于每组测试数据：</p><p>第一行包含两个整数 n ,m (1≤n≤100000,1≤m≤100) 。</p><p>接下来 n 行每行包含两个整数 a ,b (0≤a&lt;b≤10^9) 。</p><p>接下来 m 行每行包含两个整数 l ,r (0≤l&lt;r≤10^9) 。</p><h2 id="输出-31"><a href="#输出-31" class="headerlink" title="输出"></a>输出</h2><p>对于每组测试数据，输出 m 行，每行包含一个整数。</p><p>数据过大请使用快速输入输出。</p><h2 id="样例输入-31"><a href="#样例输入-31" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">4 31 32 41 41 21 21 31 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-31"><a href="#样例输出-31" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">112<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="思路-30"><a href="#思路-30" class="headerlink" title="思路"></a>思路</h2><p>就是右端点小排序</p><p>优先选取满足小区间</p><h2 id="代码-30"><a href="#代码-30" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;bool cmp(vector&lt;int&gt; a, vector&lt;int&gt; b){return a[1] &lt; b[1];}int main(){int n, m;while(cin &gt;&gt; n &gt;&gt; m){vector&lt;vector&lt;int&gt;&gt; point(n,vector&lt;int&gt;(2,0));for(int i=0;i&lt;n;i++){cin &gt;&gt; point[i][0] &gt;&gt; point[i][1];}sort(point.begin(),point.end(),cmp);while(m--){int left,right;cin &gt;&gt; left &gt;&gt; right;int ans = 0;for(int i=0;i&lt;n;i++){if(point[i][1] &gt; right){break;}if(left &lt;= point[i][0]){left = point[i][1];ans++;}}cout &lt;&lt; ans &lt;&lt; endl;}}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-F-最长子序列"><a href="#问题-F-最长子序列" class="headerlink" title="问题 F: 最长子序列"></a>问题 F: 最长子序列</h1><p>时间限制: 1 Sec 内存限制: 128 MB</p><h2 id="题目描述-32"><a href="#题目描述-32" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个数组中找出和最大的连续几个数。（至少包含一个数）</p><p>例如：</p><p>数组A[] = [-2,1,-3,4,-1,2,1,-5,4]，则连续的子序列[4,-1,2,1]有最大的和6.</p><h2 id="输入-32"><a href="#输入-32" class="headerlink" title="输入"></a>输入</h2><p>第一行输入一个不超过1000的整数n。</p><p>第二行输入n个整数A[i]。</p><h2 id="输出-32"><a href="#输出-32" class="headerlink" title="输出"></a>输出</h2><p>输出一个整数，表示最大的和。</p><h2 id="样例输入-32"><a href="#样例输入-32" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">31 1 -2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-32"><a href="#样例输出-32" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-31"><a href="#思路-31" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-31"><a href="#代码-31" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main(){int n;cin &gt;&gt; n;vector&lt;int&gt; nums(n,0);for(int i=0;i&lt;n;i++){cin &gt;&gt; nums[i];}int sum = 0;int ans = INT_MIN;for(int i=0;i&lt;n;i++){sum += nums[i];if(sum &gt; ans){ans = sum;}if(sum &lt; 0){sum = 0;}}cout &lt;&lt; ans &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-G-元素整除问题"><a href="#问题-G-元素整除问题" class="headerlink" title="问题 G: 元素整除问题"></a>问题 G: 元素整除问题</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-33"><a href="#题目描述-33" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入20个整数，输出其中能被数组中其它元素整除的那些数组元素。</p><h2 id="输入-33"><a href="#输入-33" class="headerlink" title="输入"></a>输入</h2><p>输入20个整数</p><h2 id="输出-33"><a href="#输出-33" class="headerlink" title="输出"></a>输出</h2><p>按输入顺序输出符合要求的数字，每行输出一个整数。</p><h2 id="样例输入-33"><a href="#样例输入-33" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="样例输出-33"><a href="#样例输出-33" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">46891012141516182021<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思路-32"><a href="#思路-32" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-32"><a href="#代码-32" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std; int main(){    vector&lt;int&gt; nums(20,0);    for(int i=0;i&lt;20;i++){        cin &gt;&gt; nums[i];    }    for(int i=0;i&lt;20;i++){        bool flag = false;        for(int j=0;j&lt;20;j++){            if(i == j){                continue;            }            if((nums[i] % nums[j]) == 0){                flag = true;            }        }        if(flag){            cout &lt;&lt; nums[i] &lt;&lt;endl;        }    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-H-渊子赛马"><a href="#问题-H-渊子赛马" class="headerlink" title="问题 H: 渊子赛马"></a>问题 H: 渊子赛马</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-34"><a href="#题目描述-34" class="headerlink" title="题目描述"></a>题目描述</h2><p>赛马是一古老的游戏，早在公元前四世纪的中国，处在诸侯割据的状态，历史上称为“战国时期”。在魏国作官的孙膑，因为受到同僚庞涓的迫害，被齐国使臣救出后，到达齐国国都。 赛马是当时最受齐国贵族欢迎的娱乐项目。上至国王，下到大臣，常常以赛马取乐，并以重金赌输赢。田忌多次与国王及其他大臣赌输赢，屡赌屡输。一天他赛马又输了，回家后闷闷不乐。孙膑安慰他说：“下次有机会带我到马场看看，也许我能帮你。” 孙膑仔细观察后发现，田忌的马和其他人的马相差并不远，只是策略运用不当，以致失败。 比赛前田忌按照孙膑的主意，用上等马鞍将下等马装饰起来，冒充上等马，与齐王的上等马比赛。第二场比赛，还是按照孙膑的安排，田忌用自己的上等马与国王的中等马比赛，在一片喝彩中，只见田忌的马竟然冲到齐王的马前面，赢了第二场。关键的第三场，田忌的中等马和国王的下等马比赛，田忌的马又一次冲到国王的马前面，结果二比一，田忌赢了国王。 就是这么简单，现在渊子也来赛一赛马。假设每匹马都有恒定的速度，所以速度大的马一定比速度小的马先到终点（没有意外！！）。不允许出现平局。最后谁赢的场数多于一半(不包括一半)，谁就是赢家(可能没有赢家)。渊子有 N(1&lt;=n&lt;=1000)匹马参加比赛。对手的马的数量与渊子马的数量一样，并且知道所有的马的速度。聪明的你来预测一下这场世纪之战的结果，看看渊子能否赢得比赛。</p><h2 id="输入-34"><a href="#输入-34" class="headerlink" title="输入"></a>输入</h2><p>输入有多组测试数据。 每组测试数据包括 3 行： 第一行输入 N。表示马的数量。 第二行有 N 个整型数字，即渊子的 N 匹马的速度。 第三行有 N 个整型数字，即对手的 N 匹马的速度。 当 N 为 0 时退出。</p><h2 id="输出-34"><a href="#输出-34" class="headerlink" title="输出"></a>输出</h2><p>若通过聪明的你精心安排，如果渊子能赢得比赛，那么输出YES。 否则输出NO。</p><h2 id="样例输入-34"><a href="#样例输入-34" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">52 3 3 4 51 2 3 4 542 2 1 22 2 3 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-34"><a href="#样例输出-34" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">YESNO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="思路-33"><a href="#思路-33" class="headerlink" title="思路"></a>思路</h2><p>贪心吧</p><p>先分别排序，看<code>a[i] &gt; b[j]</code>  如果大于那就赢了一把，敌方换马，如果一直没赢，因为从大到小排序，证明后面也赢不了。</p><p>切记记录失败次数。</p><h2 id="代码-33"><a href="#代码-33" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits/stdc++.h&gt;using namespace std;int main(){int n;while((cin &gt;&gt; n) &amp;&amp; n){vector&lt;int&gt; a(n,0);vector&lt;int&gt; b(n,0);for(int i=0;i&lt;n;i++){cin &gt;&gt; a[i];}for(int i=0;i&lt;n;i++){cin &gt;&gt; b[i];}sort(a.begin(),a.end());sort(b.begin(),b.end());int cnt1 =0, cnt2 = 0;int j = 0;for(int i=0;i&lt;n;i++){if(a[i] &gt; b[j]){cnt1++;j++;}else{cnt2++;}}if(cnt1 &gt; cnt2){cout &lt;&lt; "YES" &lt;&lt; endl;}else{cout &lt;&lt; "NO" &lt;&lt; endl;}}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-I-The-Hardest-Problem-Ever"><a href="#问题-I-The-Hardest-Problem-Ever" class="headerlink" title="问题 I: The Hardest Problem Ever"></a>问题 I: The Hardest Problem Ever</h1><p>时间限制: 1 Sec </p><p>内存限制: 32 MB</p><h2 id="题目描述-35"><a href="#题目描述-35" class="headerlink" title="题目描述"></a>题目描述</h2><p>Julius Caesar lived in a time of danger and intrigue. The hardest situation Caesar ever faced was keeping himself alive. In order for him to survive, he decided to create one of the first ciphers. This cipher was so incredibly sound, that no one could figure it out without knowing how it worked. </p><p>You are a sub captain of Caesar’s army. It is your job to decipher the messages sent by Caesar and provide to your general. The code is simple. For each letter in a plaintext message, you shift it five places to the right to create the secure message (i.e., if the letter is ‘A’, the cipher text would be ‘F’). Since you are creating plain text out of Caesar’s messages, you will do the opposite: </p><p>Cipher text<br>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z </p><p>Plain text<br>V W X Y Z A B C D E F G H I J K L M N O P Q R S T U </p><p>Only letters are shifted in this cipher. Any non-alphabetical character should remain the same, and all alphabetical characters will be upper case.</p><p>朱利叶斯·凯撒生活在一个充满危险和阴谋的时代。凯撒面临的最艰难的情况是让自己活着。为了让他活下来，他决定创造第一个密码。这个密码非常可靠，如果不知道它是如何工作的，就没有人能猜出它。</p><p>你是凯撒军队的副队长。你的工作是破译凯撒发送的信息并提供给你的将军。代码很简单。对于明文消息中的每个字母，您将其向右移动五位以创建安全消息（即，如果字母是“A”，则密文将是“F”）。由于您是从 Caesar 的消息中创建纯文本，因此您将执行相反的操作：</p><p>密文</p><p>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</p><p>纯文本</p><p>V W X Y Z A B C D E F G H I J K L M N O P Q R S T U</p><p>在这个密码中只有字母被移位。任何非字母字符都应保持不变，所有字母字符都将大写。</p><h2 id="输入-35"><a href="#输入-35" class="headerlink" title="输入"></a>输入</h2><p>Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets. All characters will be uppercase. </p><p>A single data set has 3 components: </p><ol><li>Start line - A single line, “START” </li><li>Cipher message - A single line containing from one to two hundred characters, inclusive, comprising a single message from Caesar </li><li>End line - A single line, “END” </li></ol><p>Following the final data set will be a single line, “ENDOFINPUT”. </p><p>此问题的输入将包含最多 100 个数据集的（非空）系列。每个数据集将根据以下描述进行格式化，并且不会有分隔数据集的空行。所有字符都将大写。</p><p>单个数据集有 3 个组成部分：</p><p>起始行 - 单行，“START”</p><p>密码消息 - 一行包含 1 到 200 个字符（含），包含来自 Caesar 的单个消息</p><p>结束行 - 单行，“END”</p><p>在最终数据集之后将是一行，“ENDOFINPUT”。</p><h2 id="输出-35"><a href="#输出-35" class="headerlink" title="输出"></a>输出</h2><p>For each data set, there will be exactly one line of output. This is the original message by Caesar.</p><p>对于每个数据集，只会有一行输出。这是凯撒的原始信息。</p><h2 id="样例输入-35"><a href="#样例输入-35" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">STARTNS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJXENDSTARTN BTZQI WFYMJW GJ KNWXY NS F QNYYQJ NGJWNFS ANQQFLJ YMFS XJHTSI NS WTRJENDSTARTIFSLJW PSTBX KZQQ BJQQ YMFY HFJXFW NX RTWJ IFSLJWTZX YMFS MJENDENDOFINPUT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-35"><a href="#样例输出-35" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSESI WOULD RATHER BE FIRST IN A LITTLE IBERIAN VILLAGE THAN SECOND IN ROMEDANGER KNOWS FULL WELL THAT CAESAR IS MORE DANGEROUS THAN HE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="思路-34"><a href="#思路-34" class="headerlink" title="思路"></a>思路</h2><p>凯撒加密，难度上没啥，就是控制输入输出得调试。</p><h2 id="代码-34"><a href="#代码-34" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits/stdc++.h&gt;using namespace std;int main(){string str;while(1){cin &gt;&gt; str;if(str == "ENDOFINPUT"){break;}else if(str == "START"){cin &gt;&gt; str;string s;getline(cin,s);s = str + s;string c;for(int i=0;i &lt; s.size();i++){if(s[i] &gt;= 'A' &amp;&amp; s[i] &lt;= 'Z'){c.push_back((s[i] - 'A'+26-5)%26 + 'A');}else{c.push_back(s[i]);}}cout &lt;&lt; c &lt;&lt; endl;}else if(str == "END"){continue;}}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-J-Rock-Paper-Scissors-Tournament"><a href="#问题-J-Rock-Paper-Scissors-Tournament" class="headerlink" title="问题 J: Rock-Paper-Scissors Tournament"></a>问题 J: Rock-Paper-Scissors Tournament</h1><p>时间限制: 3 Sec </p><p>内存限制: 64 MB</p><h2 id="题目描述-36"><a href="#题目描述-36" class="headerlink" title="题目描述"></a>题目描述</h2><p>Rock-Paper-Scissors is game for two players, A and B, who each choose, independently of the other, one of rock, paper, or scissors. A player chosing paper wins over a player chosing rock; a player chosing scissors wins over a player chosing paper; a player chosing rock wins over a player chosing scissors. A player chosing the same thing as the other player neither wins nor loses.<br>A tournament has been organized in which each of n players plays k rock-scissors-paper games with each of the other players - k<em>n</em>(n-1)/2 games in total. Your job is to compute the win average for each player, defined as w / (w + l) where w is the number of games won, and l is the number of games lost, by the player. </p><p>Rock-Paper-Scissors 是 A 和 B 两个玩家的游戏，他们各自独立地选择石头、纸或剪刀之一。选择纸的玩家胜过选择石头的玩家；选择剪刀的玩家胜过选择纸的玩家；选择石头的玩家胜过选择剪刀的玩家。与其他玩家选择相同事物的玩家既不会赢也不会输。</p><p>已经组织了一个锦标赛，其中 n 个玩家中的每一个与其他每个玩家玩 k 个石头剪刀布游戏 - 总共 k<em>n</em>(n-1)/2 个游戏。您的工作是计算每个玩家的平均获胜次数，定义为 w / (w + l)，其中 w 是该玩家赢得的游戏数量，l 是该玩家输掉的游戏数量。</p><h2 id="输入-36"><a href="#输入-36" class="headerlink" title="输入"></a>输入</h2><p>Input consists of several test cases. The first line of input for each case contains 1 &lt;= n &lt;= 100 1 &lt;= k &lt;= 100 as defined above. For each game, a line follows containing p1, m1, p2, m2. 1 &lt;= p1 &lt;= n and 1 &lt;= p2 &lt;= n are distinct integers identifying two players; m1 and m2 are their respective moves (“rock”, “scissors”, or “paper”). A line containing 0 follows the last test case.</p><p>输入由几个测试用例组成。每个案例的第一行输入包含 1 &lt;= n &lt;= 100 1 &lt;= k &lt;= 100，如上所定义。对于每个游戏，后面有一行包含 p1、m1、p2、m2。 1 &lt;= p1 &lt;= n 和 1 &lt;= p2 &lt;= n 是识别两个玩家的不同整数； m1 和 m2 是它们各自的移动（“石头”、“剪刀”或“纸”）。包含 0 的行跟随最后一个测试用例。</p><h2 id="输出-36"><a href="#输出-36" class="headerlink" title="输出"></a>输出</h2><p>Output one line each for player 1, player 2, and so on, through player n, giving the player’s win average rounded to three decimal places. If the win average is undefined, output “-“. Output an empty line between cases.</p><p>为玩家 1、玩家 2 等输出一行，通过玩家 n，将玩家的胜利平均值四舍五入到小数点后三位。如果未定义获胜平均值，则输出“-”。在案例之间输出一个空行。</p><h2 id="样例输入-36"><a href="#样例输入-36" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">2 41 rock 2 paper1 scissors 2 paper1 rock 2 rock2 rock 1 scissors2 11 rock 2 paper0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-36"><a href="#样例输出-36" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">0.3330.6670.0001.000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思路-35"><a href="#思路-35" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-35"><a href="#代码-35" class="headerlink" title="代码"></a>代码</h2><h1 id="问题-K-Balloon-Robot"><a href="#问题-K-Balloon-Robot" class="headerlink" title="问题 K: Balloon Robot"></a>问题 K: Balloon Robot</h1><p>时间限制: 1 Sec </p><p>内存限制: 64 MB</p><h2 id="题目描述-37"><a href="#题目描述-37" class="headerlink" title="题目描述"></a>题目描述</h2><p>The 2017 China Collegiate Programming Contest Qinhuangdao Site is coming! There will be (n) teams participating in the contest, and the contest will be held on a huge round table with (m) seats numbered from 1 to (m) in clockwise order around it. The (i)-th team will be seated on the (s_i)-th seat.</p><p>BaoBao, an enthusiast for competitive programming, has made (p) predictions of the contest result before the contest. Each prediction is in the form of ((a_i,b_i)), which means the (a_i)-th team solves a problem during the (b_i)-th time unit.</p><p>As we know, when a team solves a problem, a balloon will be rewarded to that team. The participants will be unhappy if the balloons take almost centuries to come. If a team solves a problem during the (t_a)-th time unit, and the balloon is sent to them during the (t_b)-th time unit, then the unhappiness of the team will increase by (t_b-t_a). In order to give out balloons timely, the organizers of the contest have bought a balloon robot.</p><p>At the beginning of the contest (that is to say, at the beginning of the 1st time unit), the robot will be put on the (k)-th seat and begin to move around the table. If the robot moves past a team which has won themselves some balloons after the robot’s last visit, it will give all the balloons they deserve to the team. During each unit of time, the following events will happen <strong>in order</strong>:</p><ol><li>The robot moves to the next seat. That is to say, if the robot is currently on the (i)-th ((1 \le i &lt; m)) seat, it will move to the ((i+1))-th seat; If the robot is currently on the (m)-th seat, it will move to the 1st seat.</li><li>The participants solve some problems according to BaoBao’s prediction.</li><li>The robot gives out balloons to the team seated on its current position if needed.</li></ol><p>BaoBao is interested in minimizing the total unhappiness of all the teams. Your task is to select the starting position (k) of the robot and calculate the minimum total unhappiness of all the teams according to BaoBao’s predictions.</p><h2 id="输入-37"><a href="#输入-37" class="headerlink" title="输入"></a>输入</h2><p>There are multiple test cases. The first line of the input contains an integer T, indicating the number of test cases. For each test case:</p><p>The first line contains three integers (n), (m) and (p) ((1 \le n \le 10^5), (n \le m \le 10^9), (1 \le p \le 10^5)), indicating the number of participating teams, the number of seats and the number of predictions.</p><p>The second line contains (n) integers (s_1, s_2, \dots, s_n) ((1 \le s_i \le m), and (s_i \ne s_j) for all (i \ne j)), indicating the seat number of each team.</p><p>The following (p) lines each contains two integers (a_i) and (b_i) ((1 \le a_i \le n), (1 \le b_i \le 10^9)), indicating that the (a_i)-th team solves a problem at time (b_i) according to BaoBao’s predictions.</p><p>It is guaranteed that neither the sum of (n) nor the sum of (p) over all test cases will exceed (5 \times 10^5).</p><h2 id="输出-37"><a href="#输出-37" class="headerlink" title="输出"></a>输出</h2><p>For each test case output one integer, indicating the minimum total unhappiness of all the teams according to BaoBao’s predictions.</p><h2 id="样例输入-37"><a href="#样例输入-37" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">42 3 31 21 12 11 42 3 51 21 12 11 21 31 43 7 53 5 71 52 13 31 52 52 100 21 511 5002 1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-37"><a href="#样例输出-37" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">14550<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思路-36"><a href="#思路-36" class="headerlink" title="思路"></a>思路</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/15/hello-world/"/>
      <url>/2021/11/15/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="欢迎访问我的博客"><a href="#欢迎访问我的博客" class="headerlink" title="欢迎访问我的博客"></a>欢迎访问我的博客</h2><p>欢迎访问，这里预计不定期更新一些最近的思路和一些奇奇怪怪的想法，当然也包括日常emo，欢迎吐槽。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
