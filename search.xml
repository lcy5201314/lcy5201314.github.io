<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>人工智能控制</title>
      <link href="/2022/04/25/2022-4-25-ren-gong-zhi-neng-kong-zhi-fu-xi/"/>
      <url>/2022/04/25/2022-4-25-ren-gong-zhi-neng-kong-zhi-fu-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="人工智能控制"><a href="#人工智能控制" class="headerlink" title="人工智能控制"></a>人工智能控制</h1><blockquote><p>参考胡神笔记进一步完善，仅供参考。</p><p>==目录==</p><p>[TOC]</p></blockquote><h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><blockquote><p>这一章目前不考，暂时不打算复习，有时间再补充</p></blockquote><h2 id="知识表示"><a href="#知识表示" class="headerlink" title="知识表示"></a>知识表示</h2><h3 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h3><ul><li><strong>概念</strong>: 知识反应了客观世界中事物之间的关系，不同事物或者相同事物之间的不同关系形成了不同的知识</li></ul><ul><li><strong>特性</strong>： 知识具有相对正确性、不正确性、可表示性、可利用性</li><li><strong>知识表示</strong>：将人类知识形式化或者模型化。知识表示是对知识的一种描述，或者说是一组约定，一种计算机可以接受的用于描述知识的数据结构</li></ul><h3 id="一阶谓词逻辑表示法"><a href="#一阶谓词逻辑表示法" class="headerlink" title="一阶谓词逻辑表示法"></a>一阶谓词逻辑表示法</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li><p>命题：<strong>非真即假的陈述句</strong>（一个命题在不同条件下真值可能改变）</p></li><li><p>原子命题：简单陈述句表达的命题称为简单命题或原子命题。</p></li><li><p>谓词：一般形式；$P(x_1,x_2,\dots,x_n)$,其中$P$是谓词名，$x_1,x_2,\dots,x_n$是个体</p></li><li><p>个体：可以是常量、变量、函数、谓词</p></li><li><p>谓词公式连接词：否定 $\neg$ 、析取 $\vee$ 、合取 $\wedge$ 、蕴含 $\rightarrow$ 、等价 $\leftrightarrow$</p></li><li><p>量词：全称量词 $\forall$ 、存在量词 $\exists$ ，（出现顺序将影响命题含义）</p></li><li><p>谓词公式：原子谓词公式的有限步套娃缝合</p></li><li><p>连接词和量词的优先级是如上出现的顺序由高到低</p><p>否定 $\neg$ 、析取 $\vee$ 、合取 $\wedge$ 、蕴含 $\rightarrow$ 、等价 $\leftrightarrow$</p></li></ul><ul><li>量词辖域：位于量词后面的单个谓词或者用括孤括起来的谓词公式</li><li>约束变元与自由变元：辖域内，与量词中同名的变元称为约束变元，不同名的变元称为自由变元</li><li>谓词公式在个体域上的解释：个体域中的实体对谓词演算表达式的每个常量、变量谓词和函数符号的指派，对于每一个解释，谓词公式都可以求出一个真值</li><li><p>永真、永假、可满足、不可满足</p><ul><li>如果谓词公式P对个体域D上的任何一个解释都取得真值T,则称P在D上是永真的；如果P在每个非空个体域上均永真，则称P永真</li><li>如果谓词公式P对个体域D上的任何一个解释都取得真值F,则称P在D上是永假的；如果P在每个非空个体域上均永假，则称P永假。</li><li>对于谓词公式P，如果至少存在一个解释使得P在此解释下的真值为T，则称P是可满足的，否则，不存在任何一个解释，则称P是不可满足的。</li></ul></li><li>谓词公式的等价性<ul><li>设P与Q是两个谓词公式，D是它们共同的个体域，若对D上的任何一个解释，P与Q都有相同的真值，则称公式P和Q在D上是等价的。如果D是任意个体域，则称P和Q是等价的，记为$P \Leftrightarrow Q $</li></ul></li><li>对于谓词公式P与Q，如果P→Q永真，则称公式P永真蕴含Q，且称Q为P的逻辑结论，称P为Q的前提，记为$P \Rightarrow  Q$。</li></ul><h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><h5 id="主要等价式"><a href="#主要等价式" class="headerlink" title="主要等价式"></a>主要等价式</h5><ul><li>交换律</li></ul><script type="math/tex; mode=display">\begin{array}{l}P \vee Q \Leftrightarrow Q \vee P \\P \wedge Q \Leftrightarrow Q \wedge P\end{array}</script><ul><li>结合律</li></ul><script type="math/tex; mode=display">\begin{array}{l}(P \vee Q) \vee R \Leftrightarrow P \vee(Q \vee R) \\(P \wedge Q) \wedge R \Leftrightarrow P \wedge(Q \wedge R)\end{array}</script><ul><li>分配律</li></ul><script type="math/tex; mode=display">\begin{array}{l}P \vee(Q \wedge R) \Leftrightarrow(P \vee Q) \wedge(P \vee R) \\P \wedge(Q \vee R) \Leftrightarrow(P \wedge Q) \vee(P \wedge R)\end{array}</script><ul><li>徳 - 摩根律 (De.Morgen)</li></ul><script type="math/tex; mode=display">\begin{array}{l}\neg(P \vee Q) \Leftrightarrow \neg P \wedge \neg Q \\\neg(P \wedge Q) \Leftrightarrow \neg P \vee \neg Q\end{array}</script><ul><li>双重否定律(对合律)</li></ul><script type="math/tex; mode=display">\neg \neg P \Leftrightarrow P</script><ul><li>吸收律</li></ul><script type="math/tex; mode=display">\begin{array}{l}P \vee(P \wedge Q) \Leftrightarrow P \\P \wedge(P \vee Q) \Leftrightarrow P\end{array}</script><ul><li>补余律 (否定律)</li></ul><script type="math/tex; mode=display">\begin{array}{l}P \vee \neg P \Leftrightarrow T \\P \wedge \neg P \Leftrightarrow F\end{array}</script><ul><li>连接词化归律</li></ul><script type="math/tex; mode=display">\begin{array}{c}P \rightarrow Q \Leftrightarrow \neg P \vee Q \\P \leftrightarrow Q \Leftrightarrow(P \rightarrow Q) \wedge(Q \rightarrow P) \\P \leftrightarrow Q \Leftrightarrow(P \wedge Q) \vee(\neg P \wedge \neg Q)\end{array}</script><ul><li>逆否律</li></ul><script type="math/tex; mode=display">P \rightarrow Q \Leftrightarrow \neg Q \rightarrow \neg P</script><ul><li>量词转换律</li></ul><script type="math/tex; mode=display">\begin{array}{l}\neg(\exists x) P \Leftrightarrow(\forall x)(\neg P) \\\neg(\forall x) P \Leftrightarrow(\exists x)(\neg P)\end{array}</script><ul><li>量词分配律</li></ul><script type="math/tex; mode=display">\begin{array}{l}(\forall x)(P \wedge Q) \Leftrightarrow(\forall x) P \wedge(\forall x) Q \\(\exists x)(P \vee Q) \Leftrightarrow(\exists x) P \vee(\exists x) Q\end{array}</script><h5 id="永真蕴含式"><a href="#永真蕴含式" class="headerlink" title="永真蕴含式"></a>永真蕴含式</h5><ul><li>化简律</li></ul><script type="math/tex; mode=display">\begin{array}{l}P \wedge Q \Rightarrow P \\P \wedge Q \Rightarrow Q\end{array}</script><ul><li>附加律</li></ul><script type="math/tex; mode=display">\begin{array}{l}P \Rightarrow P \vee Q \\Q \Rightarrow P \vee Q \\Q \Rightarrow P \rightarrow Q\end{array}</script><ul><li>假言推理</li></ul><script type="math/tex; mode=display">P, P \rightarrow Q \Rightarrow Q</script><p>即由  $P$  为真及$  P \rightarrow Q  $为真, 可推出 $ Q $ 为真。</p><ul><li>拒取式推理</li></ul><script type="math/tex; mode=display">\neg Q, P \rightarrow Q \Rightarrow \neg P</script><p>即由$   Q  $ 为假及$  P \rightarrow Q  $ 为真, 可推出  P  为假。</p><ul><li>假言三段论</li></ul><script type="math/tex; mode=display">P \rightarrow Q, \quad Q \rightarrow R \Rightarrow P \rightarrow R</script><p>即由 $  P \rightarrow Q, Q \rightarrow R $  为真, 可推出 $  P \rightarrow R  $ 为真。</p><ul><li>析取三段论</li></ul><script type="math/tex; mode=display">\neg P, P \vee Q \Rightarrow Q</script><ul><li>二难推理</li></ul><script type="math/tex; mode=display">P \vee Q, P \rightarrow R, Q \rightarrow R \Rightarrow R</script><ul><li>全称固化</li></ul><script type="math/tex; mode=display">(\forall x) P(x) \Rightarrow P(y)</script><p>其中,  y  是个体域中的任一个体, 利用此永真蕴含式可消去公式中的全称量词。</p><ul><li>存在固化</li></ul><script type="math/tex; mode=display">(\exists x) P(x) \Rightarrow P(y)</script><p>其中,  y  是个体域中某一个可使  P(y)  为真的个体。利用此永真蕴含式可消去公式中的存在量词。</p><h5 id="推理规则"><a href="#推理规则" class="headerlink" title="推理规则"></a>推理规则</h5><ul><li><strong>P规则</strong>: 在推理的任何步骤上都可引人前提。</li><li><strong>T规则</strong>: 在推理过程中, 如果前面步㗫中有一个或多个公式永真蓝含公式  $S $, 则可把 $ S $ 引 人推理过程中。</li><li><strong>CP规则</strong>: 如果能从  $R $ 和前提集合中推出 $ S$  来, 则可从前提集合推出 $ R \rightarrow S$  来。其中, $ R $ 为 任意引人的命题。</li><li><strong>反证法</strong>:  $P \Rightarrow Q $, 当且仅当$  P \wedge \neg Q \Leftrightarrow F$ , 即,$  Q  $为 $ P  $的逻轱结论, 当且仅当 $ P \wedge \neg Q  $是不可满 足的。</li><li>因此有下定理:</li></ul><script type="math/tex; mode=display">定理  Q  为  P_{1}, P_{2}, \cdots, P_{n}  的逻辑结论, 当且仅当  \left(P_{1} \wedge P_{2} \wedge \cdots \wedge P_{n}\right) \wedge \neg Q  是不可满足的。</script><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>优点：自然、精确、严密、容易实现</li><li>局限：不能表示不确定的知识、组合爆炸、效率低</li></ul><h3 id="产生式表示法"><a href="#产生式表示法" class="headerlink" title="产生式表示法"></a>产生式表示法</h3><ul><li>产生式作用：<strong>通常用于表示事实</strong>、规则以及它们的不确定性度量，适合于表示事实性知识和规则性知识。</li><li>表示<ul><li>确定性规则知识：if P then Q</li><li>不确定性规则知识：if P then Q (confidence_ level[alpha])</li><li>确定性事实性知识：(obj, key, value)  or  (relation, obj1, obj2)</li><li>不确定性事实性知识：(obj, key, value, confidence_ level[alpha])  or (relation, obj1, obj2, confidence_ level[alpha])</li></ul></li><li>产生式与谓词逻辑中的蕴含式的区别<ul><li>除逻辑蕴含外，产生式还包括各种操作、规则、变换、算子、函数等。例如，<code>如果炉温超过上限，则立即关闭风门</code> 是一个产生式，但不是蕴含式。</li><li>蕴含式只能表示精确知识，而产生式不仅可以表示精确的知识，还可以表示不精确知识。蕴含式的匹配总要求是精确的。产生式匹配可以是精确的，也可以是不精确的，只要按某种算法求出的相似度落在预先指定范围内就认为是可匹配的。</li></ul></li><li>特点<ul><li>优点：自然、模块、有效、清晰</li><li>局限：效率不高、不能表达结构性知识</li><li>适用：知识不存在结构关系，知识是经验性的、不确定的，没有统一理论的、求解过程可被表示为一系列相对独立的操作，且每个操作可被表示为产生式规则</li></ul></li></ul><h3 id="框架表示法"><a href="#框架表示法" class="headerlink" title="框架表示法"></a>框架表示法</h3><blockquote><p>感觉这不就是数据库？</p></blockquote><ul><li>框架：一种描述所论对象（一个事物、事件或概念)，属性的数据结构。</li><li>一个框架由若干个槽组成，每一个槽又可分为侧面。</li><li>一个槽用于描述所论对象某一方面的属性。一个侧面用于描述相应属性的一个方面。</li><li>槽和侧面所具有的属性值分别被称为槽值和侧面值。</li><li>特点：结构性、继承性、自然性</li></ul><h3 id="语义网络和知识图谱"><a href="#语义网络和知识图谱" class="headerlink" title="语义网络和知识图谱"></a>语义网络和知识图谱</h3><blockquote><p>好像没学，不过这部分才应该是主流吧，现在很多在搞知识图谱，南大那边。想复现，有机会补坑（一直挖坑）</p></blockquote><h2 id="确定性推理"><a href="#确定性推理" class="headerlink" title="确定性推理"></a>确定性推理</h2><h3 id="推理"><a href="#推理" class="headerlink" title="推理"></a>推理</h3><ul><li>演绎推理：一般到个别（三段论）</li><li>归纳推理：个别到一般（完全归纳、不完全归纳）</li><li>默认推理</li><li>确定性推理：知识证据确定、推出结论确定</li><li>不确定性推理：知识证据不确定、推出结论不确定（似然推理：概率论、模糊推理：模糊逻辑）</li><li>单调推理、非单调推理</li><li>启发式推理、非启发式推理</li><li>推理方向<ul><li>正向推理：事实驱动推理，已知事实到结论，简单易实现，目的性不强，效率低</li><li>逆向推理：目标驱动推理，以某个假设目标作为出发点，不必使用和目标无关的知识，目的性强，有利于向用户提供解释，但是起始目标的选择具有盲目性，比较复杂</li><li>混合推理：先正后反，先反后正</li><li>双向推理：同时进行到中间的结论</li></ul></li><li>冲突消解策略：排序，按照针对性、事实新鲜性、匹配度、条件个数划分优先级</li></ul><h3 id="自然演绎推理"><a href="#自然演绎推理" class="headerlink" title="自然演绎推理"></a>自然演绎推理</h3><ul><li>自然演绎推理：从一组已知为真的事实出发，运用经典逻辑的推理规则推出结论的过程。（P规则、T规则、<strong>假言推理</strong>、拒取式推理）（其实直接记住$P \rightarrow Q$的真值表就行）<ul><li>假言：$P \rightarrow Q ,  P\Rightarrow  Q $</li><li>拒取：$P \rightarrow Q ,  \neg Q \Rightarrow  \neg P $</li></ul></li><li>常见错误<ul><li>否定前件：<script type="math/tex">P \rightarrow Q , \neg P\Rightarrow  \neg Q (\times )</script></li><li>肯定后件：$P \rightarrow Q , Q \Rightarrow  P (\times )$</li></ul></li><li>特点<ul><li>优点：表达定理证明过程自然，易理解。拥有丰富的推理规则，推理过程灵活。便于嵌入领域启发式知识。</li><li>缺点：易产生组合爆炸，得到的中间结论一般呈指数形式递增。</li></ul></li></ul><h4 id="例题"><a href="#例题" class="headerlink" title="==例题=="></a>==例题==</h4><blockquote><p>  设已知如下事实:</p><p>（1）凡是容易的课程小王 (Wang) 都喜欢;</p><p>(2) C 班的课程都是容易的;</p><p>(3) ds 是 C班的一门课程。</p><p>求证: 小王喜欢  d s  这门课程。</p></blockquote><p>证明 首先定义谓词：</p><p>$ \operatorname{EASY}(x): x  $是容易的;</p><p> $\operatorname{LIKE}(x, y): x  $喜欢  y ;</p><p>$C(x): x  $是 $ C  $班的一门课程。</p><p>$ (\forall x)(E A S Y(x) \rightarrow L I K E(  Wang, x))  $凡是容易的课程小王都是喜欢的;</p><p> $(\forall x)(C(x) \rightarrow E A S Y(x)) \quad C $ 班的课程都是容易的;</p><p>$C(d s) \quad d s  $是 $  C  $ 班的课程;</p><p>$LIKE (Wang,  d s  ) $小王喜欢 $ d s $ 这门课程, 这是待求证的问题。</p><script type="math/tex; mode=display">(\forall x)(E A S Y(x) \rightarrow \operatorname{LIKE}(\text { Wang }, x)) \\\text { EASY }(z) \rightarrow \text { LIKE }(\text { Wang }, z) \\(\forall x)(C(x) \rightarrow E A S Y(x)) \\C(y) \rightarrow E A S Y(y) \\C(d s), C(y) \rightarrow E A S Y(y) \Rightarrow E A S Y(d s) \\EASY  (d s) , EASY  (z) \rightarrow  LIKE (Wang,  z)  \\LIKE (Wang, ds)  \\</script><h3 id="谓词公式转化子句集"><a href="#谓词公式转化子句集" class="headerlink" title="谓词公式转化子句集"></a>谓词公式转化子句集</h3><ul><li>定义：原子谓词公式（不可分解的命题）、文字（原子及其否定）、子句（<strong>文字的析取式</strong>）（离散中的主析取范式）、空子句NIL、子句集合</li><li><strong><em>▲谓词公式转化子句集解题步骤</em></strong><ol><li>使用公式消去 $\rightarrow $ 和 $\leftrightarrow $ 符号</li><li>否定后移，把 $\neg$ 移动到紧靠谓词的位置</li><li>变量标准化，在不同辖域的时候用了同一个自变量符号需要换一个</li><li>消除 $\exists$ ，用 $x$ 的函数代替</li><li>化为前束型 <code>(前缀){母式}</code> ，前缀是全称量词串，母式是不含量词的谓词公式</li><li>化为 Skolem 标准型 $\left(\forall x_{1}\right)\left(\forall x_{2}\right) \cdots\left(\forall x_{n}\right) M$ ，这里要用的又是<strong>合取范式</strong></li><li>省略 $\forall$</li><li>省略 $\wedge$，也就是写成<strong>合取范式每个项的集合</strong>形式</li><li>子句变量标准化，也就是每个子句使用不同的自变量</li></ol></li></ul><h4 id="例题-1"><a href="#例题-1" class="headerlink" title="==例题=="></a>==例题==</h4><blockquote><p>将下列谓词公式化为子句集</p><script type="math/tex; mode=display">(\forall x)\{[\neg P(x) \vee \neg Q(x)] \rightarrow(\exists y)[S(x, y) \wedge Q(x)]\} \wedge(\forall x)[P(x) \vee B(x)]</script><p><strong>解答</strong></p><script type="math/tex; mode=display">(\forall x)\{\underline{[\neg P(x) \vee \neg Q(x)] \rightarrow(\exists y)[S(x, y) \wedge Q(x)]}\} \wedge(\forall x)[P(x) \vee B(x)] \\ (\forall x)\{\underline{\neg[\neg P(x) \vee \neg Q(x)]} \vee(\exists y)[S(x, y) \wedge Q(x)]\} \wedge(\forall x)[P(x) \vee B(x)] \\ (\forall x)\{[P(x) \wedge Q(x)] \vee(\exists y)[S(x, y) \wedge Q(x)]\} \wedge\underline{(\forall x)}[P(\underline{x}) \vee B(\underline{x})]\\ (\forall x)\{[P(x) \wedge Q(x)] \vee\underline{(\exists y)}[S(x, \underline{y}) \wedge Q(x)]\} \wedge(\forall w)[P(w) \vee B(w)] \\ \underline{(\forall x)}\{[P(x) \wedge Q(x)] \vee[S(x, f(x)) \wedge Q(x)]\} \wedge \underline{(\forall w)}[P(w) \vee B(w)]\\(\forall x)(\forall w)\{\{[P(x) \wedge \underline{Q(x)}] \vee[S(x, f(x)) \wedge \underline{Q(x)}]\} \wedge[P(w) \vee B(w)]\}\\\underline{(\forall x)(\forall w)}\{Q(x) \wedge[P(x) \vee S(x, f(x))] \wedge[P(w) \vee B(w)]\}\\Q(x) \underline{\wedge}[P(x) \vee S(x, f(x))] \underline{\wedge}[P(w) \vee B(w)]\\\{Q(x), P(x) \vee S(\underline{x}, f(\underline{x})), P(w) \vee B(w)\}\\子句集 = \{Q(x), P(y) \vee S(y, f(y)), P(w) \vee B(w)\}</script></blockquote><h3 id="鲁宾逊归结原理"><a href="#鲁宾逊归结原理" class="headerlink" title="鲁宾逊归结原理"></a>鲁宾逊归结原理</h3><ul><li><p>谓词公式不可满足的充要条件：其子句集不可满足</p></li><li><p>子句集中子句之间是<strong>合取</strong>关系，只要有一个子句不可满足，则子句集就不可满足</p></li><li><p>鲁宾逊归结原理的基本思想：检查子句集中是否包含空子句，若包含，则子句集不可满足。若不包含，在子句集中选择合适的子句进行归结，一旦归结出空子句，就说明子句集是不可满足的</p></li><li><p>归结：设 $C_{1}$ 与 $C_{2}$ 是子句集中的任意两个子句，如果 $C_{1}$ 中的文字 $L_{1}$ 与 $C_{2}$ 中的文字 $L_{2}$ 互补, 那么从 $C_{1}$ 和 $C_{2}$ 中分别消去 $L_{1}$ 和 $L_{2}$ ，并将二个子句中余下的部分析取，构成新子句 $C_{12}$ 。</p></li><li><p>亲本子句为真，则归结的式子也为真</p></li><li><p>新推导的子句代替被推导的子句后加入原子句集，则新子句集的不可满足性可以推出原子句集的不可满足性</p></li><li><p>新推导的子句加入原子句集，则新子句集的不可满足性和原子句集的不可满足性等价</p></li><li><p>含有变量的子句的归结（归结前，两个子句集的同一个参数名仍需改为不一样的）</p><script type="math/tex; mode=display">C_{1}=P(x) \vee Q(a), C_{2}=\neg P(b) \vee R(x)\\令 C_{2}=\neg P(b) \vee R(y), \sigma=\{b / x\}\\ \rightarrowC_{1} \sigma=P(b) \vee Q(a), C_{2} \sigma=\neg P(b) \vee R(y)\\\rightarrow C_{12}=Q(a) \vee R(y)</script></li><li><p>对于谓词逻辑，归结式是其亲本子句的逻辑结论</p></li><li>对于一阶谓词逻辑，即若子句集是不可满足的，则必存在一个从该子句集到空子句的归结演绎；若从子句集存在一个到空子句的演绎，则该子句集是不可满足的。</li><li><strong>如果没有归结出空子句，则既不能子句集说不可满足，也不能说子句集是可满足的</strong></li></ul><h3 id="归结反演"><a href="#归结反演" class="headerlink" title="归结反演"></a>归结反演</h3><ul><li>归结反演：应用归结原理证明定理的过程</li><li><strong><em>▲归结反演证明题步骤</em></strong><ol><li>将已知前提表示为谓词公式 $F$。</li><li>将待证明的结论表示为谓词公式 $Q$ ，并否定得到 $\neg Q$ 。</li><li>把谓词公式集 $\{F, \neg Q\}$ 化为子句集 $S$ 。</li><li>应用归结原理对子句集 $S$ 中的子句进行归结，并把每次归结得到的归结式都并入到 $S$ 中。反复进行，若出现了空子句，则停止归结，此时就证明了 $Q$ 为真。</li></ol></li></ul><h4 id="例题-2"><a href="#例题-2" class="headerlink" title="==例题=="></a>==例题==</h4><blockquote><p>已知：任何人的兄弟不是女性；任何人的姐妹必是女性。</p><p>事实：Mary 是 Bill 的姐妹。</p><p>求证：Mary 不是 Tom 的兄弟。</p><p><strong>解答</strong></p><p>定义谓词</p><p>$brother(x,y)$  $x$ 是 $y$ 的兄弟</p><p>$sister(x,y)$  $x$ 是 $y$ 的姐妹</p><p>$woman(x)$  $x$ 是女性</p><p>使用谓词公式表示出已知规则和结论的否定</p><script type="math/tex; mode=display">(\forall x)(\forall y)(  brother  (x, y) \rightarrow \neg  woman  (x)) \\(\forall x)(\forall y)({sister}(x, y) \rightarrow  woman  (x)) \\ sister (Mary, Bill)\\ brother(Mary, Tom)</script><p>公式转换为子句集</p><script type="math/tex; mode=display">\begin{array}{l}(1): \neg  brother (x, y) \vee \neg  woman (x) \\(2): \neg sister(x, y) \vee woman (x) \\(3): sister( Mary, Bill) \\(4): brother(Mary ,  Tom )\end{array}</script><p>选择合适的步骤归结子句集到空子句（先归结1和2不能得到空子句）</p><script type="math/tex; mode=display">\begin{array}{l}(5):Lwoman ( Mary )  && (1)(3)\\(6):\neg brother ( Mary, y) &&(4)(5)\\(7):NIL  && (2)(6)\end{array}</script></blockquote><ul><li><strong><em>▲归结反演应用题步骤</em></strong><ol><li>将已知前提表示为谓词公式 $F$。</li><li>将待求解的结论表示为 $Q$ ，否定得到$\neg Q$ ，与 $ANSWER$ 构成析取式 $\neg Q \vee ANSWER$。</li><li>把谓词公式集 $\{ F,  \neg Q \vee ANSWER \}$ 化为子句集 $S$ 。</li><li>应用归结原理对 $S$ 中子句进行归结，并把每次归结得到的归结式都并入到 $S$ 中。反复进行，若得到归结式 $ANSWER$ ，则答案就在 $ANSWER$  中。</li></ol></li></ul><h4 id="例题-3"><a href="#例题-3" class="headerlink" title="==例题=="></a>==例题==</h4><blockquote><p>已知：老王是小李的老师。小李与小张是同班同学。如果 $x$ 与 $y$ 是同班同学，则 $x$ 的老师也是 $y$ 的老师。</p><p>求解：小张的老师是谁。</p><p><strong>解答</strong></p><p>定义谓词</p><p>$T(x,y)$  $x$ 是 $y$ 的老师</p><p>$C(x,y)$  $x$ 与 $y$ 是同班同学</p><p>使用谓词公式表示出已知规则，以及待求解的结论与答案的析取式</p><script type="math/tex; mode=display">T(Wang,Li ) \\C( Li,Zhang ) \\(\forall x)(\forall y)(\forall z)(C(x, y) \wedge T(z, x) \rightarrow T(z, y)) \\\neg(\exists x) T(x,  Zhang ) \vee ANSWER(x)</script><p>公式转换为子句集</p><script type="math/tex; mode=display">\begin{array}{l}(1): T(Wang, Li)\\ (2):C(  Li,Zhang  ) \\ (3):\neg C(x, y) \vee \neg T(z, x) \vee T(z, y)\\ (4):\neg T(u , Zhang) \vee ANSWER(u)\end{array}</script><p>应用归结原理进行归结</p><script type="math/tex; mode=display">\begin{array}{l}(5): \neg C(  Li,  y) \vee T  (Wang, y) &&(2)(3) \\(6): \neg C(  Li, Zhang  ) \vee ANSWER (Wang) &&(4)(5) \\(7): ANSWER(Wang)&&(2)(6)\end{array}</script></blockquote><h2 id="不确定性推理"><a href="#不确定性推理" class="headerlink" title="不确定性推理"></a>不确定性推理</h2><h3 id="不确定推理的基本概念"><a href="#不确定推理的基本概念" class="headerlink" title="不确定推理的基本概念"></a>不确定推理的基本概念</h3><ul><li>不确定性推理：从不确定性的初始证据出发，通过运用不确定性的知识，最终推出具有一定程度的不确定性但却是合理或者近乎合理的结论的思维过程。</li><li>不确定性<ul><li>知识的不确定性（静态强度）</li><li>证据的不确定性（动态强度，初始证据和推导出的结论作为证据）</li><li>不确定性的量度   </li></ul></li></ul><ul><li>不确定性匹配算法：用来计算匹配双方相似程度的算法。</li><li>阈值：用来指出相似的“限度”。</li><li>组合证据不确定性的算法<ul><li>最大最小方法、</li><li>Hamacher方法、</li><li>概率方法、</li><li>有界方法、</li><li>Einstein方法等。</li></ul></li><li>不确定性的传递算法</li><li>结论不确定性的合成</li></ul><blockquote><p>都是不确定，都有误差和不准确。</p></blockquote><h3 id="可信度方法"><a href="#可信度方法" class="headerlink" title="可信度方法"></a>可信度方法</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><ul><li>可信度：根据经验对一个事物或现象为真的相信程度。可信度带有较大的主观性和经验性，其准确性难以把握。</li><li>C-F模型：基于可信度表示的不确定性推理的基本方法</li><li><strong>静态强度CF(H，E)</strong>：知识的强度，即当 <em>E</em> 所对应的证据为真时对 <em>H</em> 的影响程度。</li></ul><ul><li><strong>动态强度CF(E)</strong>：证据 <em>E</em> 当前的不确定性程度。</li></ul><h4 id="C-F模型"><a href="#C-F模型" class="headerlink" title="C-F模型"></a>C-F模型</h4><h5 id="知识的不确定性-CF-H-E"><a href="#知识的不确定性-CF-H-E" class="headerlink" title="知识的不确定性 CF(H,E)"></a>知识的不确定性 CF(H,E)</h5><p>在C-F模型中，知识是用产生式规则表示出来的，其一般形式：</p><p>IF   $ E $    THEN  $   H $      ($CF(H,E)$)</p><p>其中CF：可信度因子，CF(H,E)反映前提条件E和结论H的联系强度，$CF \in [-1,1]$</p><ul><li>若由于相应证据的出现增加结论H为真的可信度，则 $CF(H,E) &gt; 0 $ ,证据的出现越是支持H为真，就使 $CF(H,E) $ 的值越大。</li><li>反之， $CF(H,E) &lt; 0 $ ，证据的出现越是支持H为假， $CF(H,E) $ 的值就越小。</li><li>如果证据E的出现和结论H无关，则 $CF(H,E) = 0$</li></ul><h5 id="证据的不确定性-CF-E"><a href="#证据的不确定性-CF-E" class="headerlink" title="证据的不确定性 CF(E)"></a>证据的不确定性 CF(E)</h5><p>在C-F模型中，证据的不确定性也是用可行度因子表示。</p><ul><li><em>CF(E)</em>＝0.6： <em>E</em>的可信度为0.6</li></ul><ul><li>证据E的可信度取值范围 $CF \in [-1,1]$</li><li>对于初始证据，若所有观察S能肯定它为真，则 $CF(E) = 1$</li><li>若肯定它为假，则 $CF(E) = -1$</li><li>若以某种程度为真，则 $0 &lt; CF(E) &lt; 1$，若以某种程度为假，则 $-1 &lt; CF(E) &lt; 0$</li><li>若未获得任何相关的观察，则 $CF(E) = 0$</li></ul><h5 id="组合证据的不确定算法"><a href="#组合证据的不确定算法" class="headerlink" title="组合证据的不确定算法"></a>组合证据的不确定算法</h5><ul><li>合取(AND)$\and$：$CF(E) = \min \{ CF(E_1),CF(E_1),…,CF(E_n)\}$</li><li>析取(OR)$\or$：$CF(E) = \max \{ CF(E_1),CF(E_1),…,CF(E_n)\}$</li></ul><h5 id="不确定性的传递算法"><a href="#不确定性的传递算法" class="headerlink" title="不确定性的传递算法"></a>不确定性的传递算法</h5><p>结论H的可信度计算如下：</p><ul><li>$CF(H)=CF(H, E) \times \max \{0, CF(E)\}$</li><li>当$CF(E) &lt; 0$时，则$CF(H) = 0$</li><li>当$CF(E) = 1$时，则$CF(H) = CF(H,E)$</li></ul><h5 id="结论不确定性的合成算法"><a href="#结论不确定性的合成算法" class="headerlink" title="结论不确定性的合成算法"></a>结论不确定性的合成算法</h5><ul><li><p>已知<br>IF $E_1$ THEN H(CF(H,$E_1$))<br>IF $E_2$ THEN H(CF(H,$E_2$))</p></li><li><p>先对每一条知识求出 $CF(H)$<br>$CF_1(H)=CF(H, E_1) \times \max \{0, CF(E_1)\}$<br>$CF_2(H)=CF(H, E_2) \times \max \{0, CF(E_2)\}$</p></li><li><p>再求出 $E_1$ 和 $E_2$ 综合影响形成的可信度 $CF_{1,2}(H)$</p><script type="math/tex; mode=display">C F_{1,2}(H)=\left\{\begin{array}{ccc}C F_{1}(H)+C F_{2}(H)-C F_{1}(H) C F_{2}(H) & \text { 若 } C F_{1}(H) \geqslant 0,  C F_{2}(H) \geqslant 0 \\C F_{1}(H)+C F_{2}(H)+C F_{1}(H) C F_{2}(H) & \text { 若 } C F_{1}(H)<0,  C F_{2}(H)<0 \\\frac{C F_{1}(H)+C F_{2}(H)}{1-\min \left\{\left|C F_{1}(H)\right|,\left|C F_{2}(H)\right|\right\}} & \text { 若 } C F_{1}(H) \text { 与 }  C F_{2}(H) \text { 异号 }\end{array}\right.</script></li></ul><h4 id="例题-4"><a href="#例题-4" class="headerlink" title="==例题=="></a>==例题==</h4><p>题目：</p><script type="math/tex; mode=display">\begin{array}{l}r_{1}: \text { IF } E_{1}  \text { THEN  } \quad H  (0.8) \\r_{2}: \text { IF } E_{2}  \text { THEN } \quad  H  (0.6) \\r_{3}: \text { IF } E_{3}  \text { THEN } \quad H  (-0.5) \\r_{4}: \text { IF } E_{4} \text { AND }\left(E_{5} \text { OR } E_{6}\right) \quad \text { THEN } E_{1}(0.7) \\r_{5}: \text { IF } E_{7} \text { AND } E_{8} \quad \text { THEN } E_{3} \quad(0.9) \\\text { 已知 : } C F\left(E_{2}\right)=0.8, C F\left(E_{4}\right)=0.5, C F\left(E_{5}\right)=0.6, C F\left(E_{6}\right)=0.7, C F\left(E_{7}\right)=0.6, C F\left(E_{8}\right)=0.9 \text { 。求 } C F(H)_{\circ}\end{array}</script><ol><li>求出对应CF(E)和CF(H)</li></ol><script type="math/tex; mode=display">\begin{array}{l}\left.C F\left(E_{1}\right)=0.7 \times \max \left\{0, C F\left[\begin{array}{lllll}E_{4} & \text { AND } & \left(E_{5}\right. & \text { OR } & E_{6}\end{array}\right)\right]\right\}\\=0.7 \times \max \left\{0, \min \left\{C F\left(E_{4}\right), C F\left(E_{5} \quad \text { OR } \quad E_{6}\right)\right\}\right\}\\=0.7 \times \max \left\{0, \min \left\{C F\left(E_{4}\right), \max \left\{C F\left(E_{5}\right), C F\left(E_{6}\right)\right\}\right\}\right\}\\=0.7 \times \max \{0, \min \{0.5, \max \{0.6,0.7\}\}\}\\=0.35\\\\C F\left(E_{3}\right)=0.9 \times \max \left\{0, C F\left(E_{7} \quad \text { AND } \quad E_{8}\right)\right\}\\=0.9 \times \max \left\{0, \min \left\{C F\left(E_{7}\right), C F\left(E_{8}\right)\right\}\right\}\\=0.9 \times \max \{0, \min \{0.6,0.9\}\}\\=0.54\\\\C F_{1}(H)=0.8 \times \max \left\{0, C F\left(E_{1}\right)\right\}\\=0.8 \times \max \{0,0.35\}\\=0.28\\\\C F_{2}(H)=0.6 \times \max \left\{0, C F\left(E_{2}\right)\right\}\\=0.6 \times \max \{0,0.8\}\\=0.48\\\\C F_{3}(H)=-0.5 \times \max \left\{0, C F\left(E_{3}\right)\right\}\\=-0.5 \times \max \{0,0.54\}\\=-0.27\end{array}</script><ol><li>根据不确定性合成算法合成CF(H)</li></ol><script type="math/tex; mode=display">\begin{array}{l}C F_{1,2}(H) &=C F_{1}(H)+C F_{2}(H)-C F_{1}(H) \times C F_{2}(H) \\&=0.28+0.48-0.28 \times 0.48 \\&=0.63 \\\\C F_{1,2,3}(H) &=\frac{C F_{1,2}(H)+C F_{3}(H)}{1-\min \left\{\left|C F_{1,2}(H)\right|,\left|C F_{3}(H)\right|\right\}} \\& =\frac{0.63-0.27}{1-\min \{0.63,0.27\}} \\& =\frac{0.36}{1-0.27} \\& =0.49\end{array}</script><p>最后得出结论，综合可信度为：$CF(H)=0.49$</p><h3 id="证据理论"><a href="#证据理论" class="headerlink" title="证据理论"></a>证据理论</h3><h4 id="概率分配函数"><a href="#概率分配函数" class="headerlink" title="概率分配函数"></a>概率分配函数</h4><ul><li><strong>样本空间</strong> : 设 D 是变量 x 所有可能取值的集合，且 D 中的元素是互斥的，在任一时刻x 都取且只能取 D 中的某一个元素为值，则称 D 为 x 的样本空间。</li><li><strong>概率分配函数</strong>:</li></ul><p>设函数 $M:2^D \to [0,1]（对任何一个属于$D$的子集$A$，命它对应一个数$M \in  [0，1]）  且满足</p><script type="math/tex; mode=display">M(\varnothing) = 0\\\sum_{A\subseteq D}M(A) = 1\\</script><p>则$M$是$2^D$上的基本概率分配函数，$M(A)$称为 A的基本概率数。</p><ul><li>设样本空间$D$中有$n$个元素，则$D$中子集的个数为$2^D$个。<br>   $2^D: D$的所有子集。</li><li>概率分配函数：把D的任意一个子集A都映射为[0，1]上的一个数$M(A)$。<br>   $A\subset D, A \neq D$时，$M(A)$: 对相应命题A的精确信任度。</li><li>概率分配函数与概率不同。 </li></ul><h4 id="信任函数"><a href="#信任函数" class="headerlink" title="信任函数"></a>信任函数</h4><p>命题的信任函数 (belief function)  $Bel$  :</p><script type="math/tex; mode=display">2^{D} \rightarrow[0,1] \text { 且 } \operatorname{Bel}(A)=\sum_{B \subseteq A} M(B) \quad \forall A \subseteq D</script><ul><li><p>$\operatorname{Bel}(A) $ : 对命题 $ \mathbf{A}  $为真的总的信任程度。</p></li><li><p>由信任函数及概率分配函数的定义推出:</p></li></ul><script type="math/tex; mode=display">\begin{array}{l}\operatorname{Bel}(\varnothing)=M(\varnothing)=0 \\\operatorname{Bel}(D)=\sum_{B \subseteq D} M(B)=1\end{array}</script><ul><li>下限函数</li></ul><h4 id="似然函数"><a href="#似然函数" class="headerlink" title="似然函数"></a>似然函数</h4><ul><li>似然函数（plansibility function）：不可驳斥函数或上限函数。</li></ul><p>似然函数  $Pl: 2^{D} \rightarrow[0,1]$ , 且</p><script type="math/tex; mode=display">P l(A)=1-\operatorname{Bel}(\neg A) \text { 对所有的 } A \subseteq D</script><ul><li>推论：<script type="math/tex; mode=display">Pl(A) = \sum_{A \cap B \neq \varnothing}M(B)</script></li></ul><blockquote><p>信任函数与似然函数的关系</p><p>因为</p><script type="math/tex; mode=display">\begin{aligned}\operatorname{Bel}(A)+\operatorname{Bel}(\neg A) &=\sum_{B \subseteq A} M(B)+\sum_{c \subseteq \neg 1} M(C) \\& \leqslant \sum_{E \subseteq D} M(E)=1\end{aligned}</script><p>所以</p><script type="math/tex; mode=display">\begin{aligned}P l(A)-\operatorname{Bel}(A) &=1-\operatorname{Bel}(\neg A)-\operatorname{Bel}(A) \\&=1-(\operatorname{Bel}(\neg A)+\operatorname{Bel}(A)) \\& \geqslant 0\end{aligned}</script><p>所以</p><script type="math/tex; mode=display">P l(A) \geqslant \operatorname{Bel}(A)</script><p>由于 $ \operatorname{Bel}(A)  $表示对$  A  $为真的信任程度,  $P l(A) $ 表示对 $A  $为非假的信任程度, 因此可分别称 $ \operatorname{Bel}(A)  $和 $ P l(A)  $为对 $ A  $信任程度的下限与上限, 记为</p><script type="math/tex; mode=display">A(\operatorname{Bel}(A), P l(A))</script></blockquote><h4 id="概率分配函数的正交和（证据的组合）"><a href="#概率分配函数的正交和（证据的组合）" class="headerlink" title="概率分配函数的正交和（证据的组合）"></a>概率分配函数的正交和（证据的组合）</h4><p>对相同的证据会得到2给不同的概率分配函数，对来源不同的概率分配函数进行组合，既对这俩个概率分配函数进行正交和运算。</p><ul><li>2个</li></ul><p>设 $ M_{1} $  和  $ M_{2} $  是两个概率分配函数; 则其正交和 $ M=M_{1} \oplus M_{2}  $ 为</p><script type="math/tex; mode=display">M(\varnothing)=0 \\M(A)=K^{-1} \sum_{x \cap y=A} M_{1}(x) M_{2}(y)</script><p>其中,  $K$  由下式计算</p><script type="math/tex; mode=display">K=1-\sum_{x \cap y=\varnothing} M_{1}(x) M_{2}(y)=\sum_{x \cap y \neq \varnothing} M_{1}(x) M_{2}(y)</script><ul><li>n个</li></ul><p>设$  M_{1}, M_{2}, \cdots, M_{n}  $是  n  个概率分配函数, 则其正交和  $M=M_{1} \oplus M_{2} \oplus \cdots \oplus M_{n}  $为</p><script type="math/tex; mode=display">M(\varnothing)=0 \\M(A)=K^{-1} \sum_{n A_{i}=A 1} \prod_{\leqslant i \leqslant n} M_{i}\left(A_{i}\right)</script><p>其中,  $K$  由下式计算</p><script type="math/tex; mode=display">K=\sum_{n A_{i} \neq \varnothing} \prod_{\emptyset \leqslant i \leqslant n} M_{i}\left(A_{i}\right)</script><h4 id="基于证据理论的不确定性推理"><a href="#基于证据理论的不确定性推理" class="headerlink" title="基于证据理论的不确定性推理"></a>基于证据理论的不确定性推理</h4><ul><li><p>建立问题的样本空间D。</p></li><li><p>由经验给出，或者由随机性规则和事实的信度度量算基本概率分配函数。</p></li><li><p>计算所关心的子集的信任函数值、似然函数值。</p></li><li><p>由信任函数值、似然函数值得出结论。</p></li></ul><h4 id="例题-5"><a href="#例题-5" class="headerlink" title="==例题=="></a>==例题==</h4><blockquote><p>设有规则：</p><p>(1) 如果 流鼻涕 则 感冒但非过敏性鼻炎（0.9）或 过敏性鼻炎但非感冒（0.1）</p><p>(2) 如果 眼发炎 则 感冒但非过敏性鼻炎（0.8）或 过敏性鼻炎但非感冒（0.05）</p><p>又有事实：</p><ol><li><p>小王流鼻涕 （0.9）</p></li><li><p>小王眼发炎 （0.4）</p></li></ol></blockquote><p>解：</p><h5 id="建立样本空间"><a href="#建立样本空间" class="headerlink" title="建立样本空间"></a>建立样本空间</h5><script type="math/tex; mode=display">D = \{A,B,AB,\varnothing\} \\A: 感冒B：过敏性鼻炎 \\AB：感冒且过敏性鼻炎\varnothing ：不感冒又不过敏性鼻炎</script><h5 id="基本分配函数"><a href="#基本分配函数" class="headerlink" title="基本分配函数"></a>基本分配函数</h5><p>小王流鼻涕 （0.9）时，$M_1$</p><script type="math/tex; mode=display">M_1(A) = 0.9\times 0.9 = 0.81 \\M_1(B) = 0.9\times 0.1 = 0.09 \\Bel_1(A) = M_1(A) = 0.81 \\Bel_1(B) = M_1(B) = 0.09 \\Bel_1(\varnothing) = 0 \ \ (规则定义) \\Bel_1(AB) = M_1(AB) = M_1(D) - Bel_1(A) -Bel_1(B) \\M_1(AB) = 1 -0.81 -0.09 = 0.1</script><p>小王眼发炎 （0.4）时，$M_2$</p><script type="math/tex; mode=display">M_2(A) = 0.4\times 0.8 = 0.32 \\M_2(B) = 0.4\times 0.05 = 0.02 \\Bel_2(A) = M_2(A) = 0.32 \\Bel_2(B) = M_2(B) = 0.02 \\Bel_2(\varnothing) = 0 \  \ (规则定义) \\Bel_2(AB) = M_2(AB) = Bel_2(D) - Bel_2(A) -Bel_2(B) \\M_2(AB) = 1 -0.32 -0.02 = 0.66</script><h5 id="概率分配函数组合"><a href="#概率分配函数组合" class="headerlink" title="概率分配函数组合"></a>概率分配函数组合</h5><p>总的为$M$,$M=M_1 \oplus   M_2$,正交组合：</p><script type="math/tex; mode=display">M(\varnothing) = 0 \\</script><p>由公式可得：</p><script type="math/tex; mode=display">K = 1 - \sum_{x \cap y = \varnothing}M_1(x)M_2(y)=1 - [M_1(A)M_2(B) + M_1(B)M_2(A)] \\= 1 - [0.81\times0.02 + 0.09\times0.32] = 0.955</script><script type="math/tex; mode=display">M(A) = K^{-1}\sum_{x \cap y = A}M_1(x)M_2(y) \\= K^{-1}[M_1(A)M_2(A) + M_1(A)M_2(AB) + M_1(AB)M_2(A)] \\= \frac{1}{0.955} \times 0.8258 = 0.87</script><script type="math/tex; mode=display">M(B) = K^{-1}\sum_{x \cap y = B}M_1(x)M_2(y) \\= K^{-1}[M_1(B)M_2(B) + M_1(B)M_2(AB) + M_1(AB)M_2(B)] \\= \frac{1}{0.955} \times 0.0632 = 0.066</script><p>和基本分配函数一样利用$Bel(D) = 1$</p><script type="math/tex; mode=display">Bel(A) = M(A) = 0.81 \\Bel(B) = M(B) = 0.09 \\Bel(\varnothing) = 0 \ \ (规则定义) \\Bel(AB) = M(AB) = Bel(D) - Bel(A) -Bel_1(B) \\M(AB) = 1 -0.87-0.066= 0.1</script><h5 id="似然函数分析"><a href="#似然函数分析" class="headerlink" title="似然函数分析"></a>似然函数分析</h5><script type="math/tex; mode=display">Pl(A) = 1 - Bel(\neg A) \\= 1 - [Bel(B) + Bel(\varnothing)] \\= 1- [0.066 + 0] = 0.934</script><script type="math/tex; mode=display">Pl(B) = 1 - Bel(\neg B) \\= 1 - [Bel(A) + Bel(\varnothing)] \\= 1- [0.87 + 0] = 0.13</script><p>综上所述：</p><p>A：感冒为真的信任度：0.87 非假的信任度为：0.934</p><p>B：过敏性鼻炎为真的信任度：0.066 非假的信任度为：0.13</p><p>小王大概率为感冒</p><h3 id="模糊推理方法"><a href="#模糊推理方法" class="headerlink" title="模糊推理方法"></a>模糊推理方法</h3><blockquote><p>控制理论就是这里发展，感觉模糊数学也是一个方向，没有接触过自动控制原理，感觉这玩意和PID一样，还是很有必要以后了解一下的，虽然现在强化学习和机器学习吹上了天，当实践生成中，PID和这种模糊控制，也是很常见的应用，强化学习还是理论阶段。</p></blockquote><h4 id="模糊集合"><a href="#模糊集合" class="headerlink" title="模糊集合"></a>模糊集合</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><ul><li><p>论域：所讨论的全体对象，用 U 等表示。</p></li><li><p>元素：论域中的每个对象，常用a,b,c,x,y,z表示。</p></li><li><p>集合：论域中具有某种相同属性的确定的、可以彼此区别的元素的全体，常用A，B等表示。</p></li><li><p>模糊逻辑给集合中每一个元素赋予一个介于0和1之间的实数，描述其属于一个集合的强度，该实数称为元素属于一个集合的隶属度。集合中所有元素的隶属度全体构成集合的隶属函数</p><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204211644759.png" alt="image-20220421164411344"></p></li></ul><h5 id="模糊集合的表示方法"><a href="#模糊集合的表示方法" class="headerlink" title="模糊集合的表示方法"></a>模糊集合的表示方法</h5><p>当论域中元素数目有限时，模糊集合A的数学描述：</p><script type="math/tex; mode=display">A = \{(x,\mu_A(x)),x \in X\} \\\mu_A(x) : 元素x属于模糊集A的隶属度，X是元素x的论域</script><ul><li>Zadeh表示法</li></ul><p>当论域是离散的：</p><script type="math/tex; mode=display">A=\mu_{A}\left(x_{1}\right) / x_{1}+\mu_{A}\left(x_{2}\right) / x_{2}+\cdots+\mu_{A}\left(x_{n}\right) / x_{n}=\sum_{i=1}^{n} \mu_{A}\left(x_{i}\right) / x_{i} \\  A=\left\{\mu_{A}\left(x_{1}\right) / x_{1}, \mu_{A}\left(x_{2}\right) / x_{2}, \cdots, \mu_{A}\left(x_{n}\right) / x_{n}\right\}</script><p>当论域是离散的：</p><script type="math/tex; mode=display">A=\int_{x \in U} \mu_{A}(x) / x</script><ul><li>序偶表示法</li></ul><script type="math/tex; mode=display">A=\left\{\left(\mu_{A}\left(x_{1}\right), x_{1}\right),\left(\mu_{A}\left(x_{2}\right), x_{2}\right), \cdots,\left(\mu_{A}\left(x_{n}\right), x_{n}\right)\right\}</script><ul><li>向量表示法</li></ul><script type="math/tex; mode=display">A=\left[\mu_{A}\left(x_{1}\right), \mu_{A}\left(x_{2}\right), \cdots, \mu_{A}\left(x_{n}\right)\right]</script><h5 id="隶属度函数"><a href="#隶属度函数" class="headerlink" title="隶属度函数"></a>隶属度函数</h5><ul><li>常见的隶属函数有正态分布、三角分布、梯形分布等。 </li><li>隶属函数确定方法：模糊统计法, 专家经验法, 二元对比排序法, 基本概念扩充法</li></ul><h4 id="模糊集合运算"><a href="#模糊集合运算" class="headerlink" title="模糊集合运算"></a>模糊集合运算</h4><p>模糊集合的包含关系</p><script type="math/tex; mode=display">若  \mu_{A}(x) \geqslant \mu_{B}(x) , 则称  A  包含  B , 记作  A \supseteq B  。</script><p>模糊集合的相等关系</p><script type="math/tex; mode=display">若  \mu_{A}(x)=\mu_{B}(x) , 则称  A  与  B  相等, 记作  A=B  。</script><p>模糊集合的交并补运算</p><p>设  A 、 B  是论域  U  中的两个模糊集：</p><ul><li>交运算(intersection) $ A \cap B$  :</li></ul><script type="math/tex; mode=display">\mu_{A \cap B}(x)=\min \left\{\mu_{A}(x), \mu_{B}(x)\right\}=\mu_{A}(x) \wedge \mu_{B}(x)</script><ul><li>并运算 (union)  $A \cup B$  :</li></ul><script type="math/tex; mode=display">\mu_{A \cup B}(x)=\max \left\{\mu_{A}(x), \mu_{B}(x)\right\}=\mu_{A}(x) \vee \mu_{B}(x)</script><ul><li>补运算 (complement)  $\bar{A}$  或者 $ A^{C}$  :</li></ul><script type="math/tex; mode=display">\mu_{A}^{-}(x)=1-\mu_{A}(x)</script><p>其中,  $\wedge  $表示取小运算;  $\vee$  表示取大运算。</p><p>代数运算</p><ul><li>代数积</li></ul><script type="math/tex; mode=display">\mu_{A \cdot B}(x)=\mu_{A}(x) \mu_{B}(x)</script><ul><li>代数和</li></ul><script type="math/tex; mode=display">\mu_{A+B}(x)=\mu_{A}(x)+\mu_{B}(x)-\mu_{A \cdot B}(x)</script><ul><li>有界和</li></ul><script type="math/tex; mode=display">\mu_{A \oplus B}(x)=\min \left\{1, \mu_{A}(x)+\mu_{B}(x)\right\}=1 \wedge\left[\mu_{A}(x)+\mu_{B}(x)\right]</script><ul><li>有界积</li></ul><script type="math/tex; mode=display">\mu_{A \otimes B}(x)=\max \left\{0, \mu_{A}(x)+\mu_{B}(x)-1\right\}=0 \vee\left[\mu_{A}(x)+\mu_{B}(x)-1\right]</script><h4 id="模糊关系与模糊关系的合成"><a href="#模糊关系与模糊关系的合成" class="headerlink" title="模糊关系与模糊关系的合成"></a>模糊关系与模糊关系的合成</h4><ul><li><p>$\boldsymbol{A} 、 \boldsymbol{B}  $: 模糊集合, 模糊关系用叉积(cartesian product)表示:$R: A \times B \rightarrow[0,1]$</p></li><li><p>积常用最小算子运算:$\mu_{A \times B}(a, b)=\min \left\{\mu_{A}(a), \mu_{B}(b)\right\}$</p></li><li><p>$\boldsymbol{A} 、 \boldsymbol{B}  $: 离散模糊集, 其隶属函数分别为:$\mu_{A}=\left[\mu_{A}\left(a_{1}\right), \mu_{A}\left(a_{2}\right), \cdots, \mu_{A}\left(a_{n}\right)\right], \quad \mu_{B}=\left[\mu_{B}\left(b_{1}\right), \mu_{B}\left(b_{2}\right), \cdots, \mu_{B}\left(b_{n}\right)\right]$则其叉积运算:  $\quad \mu_{A \times B}(a, b)=\mu_{A}^{T} \circ \mu_{B} $</p></li></ul><p>设 $U 、 V 、 W  $是论域, $ Q  $是$  U  $到$  V  $的一个模糊关系,$  R  $是 $ V  $到 $ W  $的一个模糊关系, 则模糊关系$  Q  $与模糊关系 $ R  $的合成$  Q \circ R  $是$ U  $到$  W $ 的一个模糊关系, 它具有隶属函数</p><script type="math/tex; mode=display">\mu_{Q \bullet R}(u, w)=\bigcup_{v \in V}\left(\mu_{Q}(u, v) \wedge \mu_{R}(v, w)\right)</script><p>当论域$  U 、 V 、 W $  为有限时, 模糊关系的合成可用模糊矩阵的合成表示。设$   Q 、 R 、 S  $ 三个模糊关系对应的模糊矩阵分别为</p><script type="math/tex; mode=display">Q=\left(q_{i j}\right)_{n \times m}, \quad R=\left(r_{j k}\right)_{m \times l}, \quad S=\left(s_{i k}\right)_{n \times l}</script><p>则有</p><script type="math/tex; mode=display">S_{i k}=\bigcup_{j=1}^{m}\left(q_{i j} \wedge r_{j k}\right)</script><p>模糊关系$  Q  $与模糊关系$  R  $的合成$  S $ 是模糊矩阵的叉乘 $ Q \circ R $ 。</p><ul><li>最大-最小合成法：写出矩阵乘积QR中的每个元素，然后将其中的乘积运算用取小运算代替，求和运算用取大运算代替。</li><li>最大-代数积合成法：写出矩阵乘积QR中的每个元素，然后将其中的求和运算用取大运算代替，而乘积运算不变。</li></ul><h4 id="模糊推理"><a href="#模糊推理" class="headerlink" title="模糊推理"></a>模糊推理</h4><ul><li><p>模糊知识表示 : 如果 （条件） →  则 （结论）</p></li><li><p>模糊规则：从条件论域到结论论域的模糊关系矩阵 R。通过条件模糊向量与模糊关系 R 的合成进行模糊推理，得到结论的模糊向量，然后采用“清晰化”方法将模糊结论转换为精确量。</p></li><li><p>对 IF  A  THEN  B 类型的模糊规则的推理  </p><ul><li>若已知输入为$  \boldsymbol{A} $, 则输出为$  \boldsymbol{B} $; 若现在已知输入为$  A^{\prime} $, 则输出$B^{\prime} $ 用合成规则求取$  B^{\prime}=A^{\prime} \circ R  $其中模糊关系 $ R  :  \mu_{R}(x, y)=\min \left[\mu_{A}(x), \mu_{B}(y)\right] $</li></ul><ul><li>控制规则库的 $ N  $条规则有 $ \boldsymbol{N}  $个模糊关系:$  R_{1}, R_{2}, \cdots, R_{n}  $对于整个系统的全部控制规则所对应的模糊关系 $ R  $:</li></ul><script type="math/tex; mode=display">R=R_{1} \bigcup R_{2} \bigcup \cdots \bigcup R_{n}=\bigcup_{i=1}^{n} R_{i}</script></li></ul><h4 id="模糊决策"><a href="#模糊决策" class="headerlink" title="模糊决策"></a>模糊决策</h4><ul><li>“模糊决策”(“模糊判决”、“解模糊”或“清晰化”）：由模糊推理得到的结论或者操作是一个模糊向量，转化为确定值的过程。</li><li>最大隶属度法 </li><li><p>加权平均判决法</p><script type="math/tex; mode=display">U=\frac{\sum_{i=1}^{n} \mu\left(u_{i}\right) u_{i}}{\sum_{i=1}^{n} \mu\left(u_{i}\right)}</script></li><li><p>中位数法 </p></li></ul><h4 id="例题-6"><a href="#例题-6" class="headerlink" title="==例题=="></a>==例题==</h4><script type="math/tex; mode=display">设有模糊控制规则: 如果温度低, 则将风门开大。设温度和风门开度的论域为  \{1,2,3,4,5\}  。\\ 温度低 和 风门大 的模糊量可以表示为\\温度低  =1.0 / 1+0.6 / 2+0.3 / 3+0.0 / 4+0.0 / 5  \\风门大  =0.0 / 1+0.0 / 2+0.3 / 3+0.6 / 4+1.0 / 5 已知事实 “温度较低”, 可以表示为\\温度较低  =0.8 / 1+1.0 / 2+0.6 / 3+0.3 / 4+0.0 / 5 \\试用模糊推理确定风门开度。</script><ol><li>确定模糊关系R</li></ol><script type="math/tex; mode=display">\begin{aligned}R &=\left[\begin{array}{l}1.0 \\0.6 \\0.3 \\0.0 \\0.0\end{array}\right] \cdot\left[\begin{array}{lllll}0.0 & 0.0 & 0.3 & 0.6 & 1.0\end{array}\right] \\&=\left[\begin{array}{llllll}1.0 \wedge 0.0 & 1.0 \wedge 0.0 & 1.0 \wedge 0.3 & 1.0 \wedge 0.6 & 1.0 \wedge 1 . \theta \\0.6 \wedge 0.0 & 0.6 \wedge 0.0 & 0.6 \wedge 0.3 & 0.6 \wedge 0.6 & 0.6 \wedge 1.0 \\0.3 \wedge 0.0 & 0.3 \wedge 0.0 & 0.3 \wedge 0.3 & 0.3 \wedge 0.6 & 0.3 \wedge 1.0 \\0.0 \wedge 0.0 & 0.0 \wedge 0.0 & 0.0 \wedge 0.3 & 0.0 \wedge 0.6 & 0.0 \wedge 1.0 \\0.0 \wedge 0.0 & 0.0 \wedge 0.0 & 0.0 \wedge 0.3 & 0.0 \wedge 0.6 & 0.0 \wedge 1.0\end{array}\right] \\&=\left[\begin{array}{lllll}0.0 & 0.0 & 0.3 & 0.6 & 1.0 \\0.0 & 0.0 & 0.3 & 0.6 & 0.6 \\0.0 & 0.0 & 0.3 & 0.3 & 0.3 \\0.0 & 0.0 & 0.0 & 0.0 & 0.0 \\0.0 & 0.0 & 0.0 & 0.0 & 0.0\end{array}\right]\end{aligned}</script><ol><li>模糊推理</li></ol><script type="math/tex; mode=display">\begin{aligned}B^{\prime} &=A^{\prime} \cdot R=\left[\begin{array}{l}0.8 \\1.0 \\0.6 \\0.3 \\0.0\end{array}\right]^{\mathrm{T}} \cdot\left[\begin{array}{lllll}0.0 & 0.0 & 0.3 & 0.6 & 1.0 \\0.0 & 0.0 & 0.3 & 0.6 & 0.6 \\0.0 & 0.0 & 0.3 & 0.3 & 0.3 \\0.0 & 0.0 & 0.0 & 0.0 & 0.0 \\0.0 & 0.0 & 0.0 & 0.0 & 0.0\end{array}\right] \\&=[0.0,0.0,0.3,0.6,0.8]\end{aligned}</script><ol><li>模糊决策</li></ol><p>​        用最大隶属度法进行决策得风门开度为5。用加权平均判决法和中位数法进行决策得风门开度为4。</p><h2 id="搜索求解"><a href="#搜索求解" class="headerlink" title="搜索求解"></a>搜索求解</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li><p>盲目搜索：在不具有对特定问题的任何有关信息的条件下，按固定的步骤（依次或随机调用操作算子）进行的搜索。</p></li><li><p>启发式搜索：考虑特定问题领域可应用的知识，动态地确定调用操作算子的步骤，优先选择较适合的操作算子，尽量减少不必要的搜索，以求尽快地到达结束状态。</p></li></ul><h3 id="状态空间表示法"><a href="#状态空间表示法" class="headerlink" title="状态空间表示法"></a>状态空间表示法</h3><ul><li>状态：表示系统状态、事实等叙述型知识的一组变量或数组：<script type="math/tex; mode=display">Q= [q_1,q_2,\dots,q_n]^T</script></li><li>操作：表示引起状态变化的过程型知识的一组关系或函数：<script type="math/tex; mode=display">F= \{f_1,f_2,\dots,f_m\}</script></li><li>状态空间：利用状态变量和操作符号，表示系统或问题的有关知识的符号体系，状态空间是一个四元组：<script type="math/tex; mode=display">(A,O,S_0,G) \\S: 状态集合 \\ O: 操作算子集合\\S_0: 包含问题的初始状态是S的非空子集\\G: 若干具体状态或满足某些性质的路径信息描述</script></li><li>求解路径：从$S_0$结点到$G$结点的路径。</li><li>状态空间解：一个有限的操作算子序列。</li></ul><p>示例：</p><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204191700779.png" alt="image-20220419170029558"></p><h3 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h3><blockquote><p>考试重点局限在回溯法，传统搜索，未涉及启发式等</p></blockquote><h4 id="回溯法原理"><a href="#回溯法原理" class="headerlink" title="回溯法原理"></a>回溯法原理</h4><p>回溯算法实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”。</p><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ul><li>用未处理状态表（NPS）使算法能返回（回溯）到其中任一状态。 </li><li>用一张“死胡同”状态表（NSS）来避免算法重新搜索无解的路径。 </li><li>在PS 表中记录当前搜索路径的状态，当满足目的时可以将它作为结果返回。 </li><li>为避免陷入死循环必须对新生成的子状态进行检查，看它是否在该三张表中 。</li></ul><h5 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h5><p><strong>回溯法解决的问题都可以抽象为树形结构</strong>，是的，我指的是所有回溯法的问题都可以抽象为树形结构！</p><p>因为回溯法解决的都是在集合中递归查找子集，<strong>集合的大小就构成了树的宽度，递归的深度，都构成的树的深度</strong>。</p><p>递归就要有终止条件，所以必然是一棵高度有限的树（N叉树）。</p><h5 id="回溯法解决的问题"><a href="#回溯法解决的问题" class="headerlink" title="回溯法解决的问题"></a>回溯法解决的问题</h5><p>回溯法，一般可以解决如下几种问题：</p><ul><li>组合问题：N个数里面按一定规则找出k个数的集合</li><li>切割问题：一个字符串按一定规则有几种切割方式</li><li>子集问题：一个N个数的集合里有多少符合条件的子集</li><li>排列问题：N个数按一定规则全排列，有几种排列方式</li><li>棋盘问题：N皇后，解数独等等</li></ul><p>主要是组合和排列问题，然后还有一些搜索（当然这里主要是介绍搜索）</p><h5 id="回溯法模板"><a href="#回溯法模板" class="headerlink" title="回溯法模板"></a>回溯法模板</h5><p>算法c++解题模板</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void backtracking(参数) {    if (终止条件) {        存放结果;        return;    }    for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {        处理节点;        backtracking(路径，选择列表); // 递归        回溯，撤销处理结果    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="宽度优先搜索（BFS）"><a href="#宽度优先搜索（BFS）" class="headerlink" title="宽度优先搜索（BFS）"></a>宽度优先搜索（BFS）</h4><p><strong>宽度优先搜索(breadth-first search，广度优先搜索):</strong>以接近起始节点的程度（深度）为依据，进行逐层扩展的节点搜索方法。</p><blockquote><p>就是层次遍历，利用优先队列控制。</p></blockquote><ul><li>open表（NPS表)：已经生成出来但其子状态未被搜索的状态。</li><li>closed表（ PS表和NSS表的合并）：记录了已被生成扩展过的状态。</li></ul><blockquote><p>感觉没必要看直接看例题就行了 </p></blockquote><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204191716470.png" alt="image-20220419171653245" style="zoom:50%;"></p><h4 id="深度优先搜索（DFS）"><a href="#深度优先搜索（DFS）" class="headerlink" title="深度优先搜索（DFS）"></a>深度优先搜索（DFS）</h4><p>深度优先搜索（Depth-first Search): 首先扩展最新产生的节点, 深度相等的节点按生成次序的盲目搜索。</p><ul><li>防止搜索过程沿着无益的路径扩展下去，往往给出一个节点扩展的最大深度——深度界限；</li><li>与宽度优先搜索算法最根本的不同：将扩展的后继节点放在OPEN表的前端。</li><li>深度优先搜索算法的OPEN表后进先出。</li></ul><h3 id="启发式搜索"><a href="#启发式搜索" class="headerlink" title="启发式搜索"></a>启发式搜索</h3><h4 id="启发式信息"><a href="#启发式信息" class="headerlink" title="启发式信息"></a>启发式信息</h4><p>用来简化搜索过程有关具体问题领域的特性的信息叫做启发信息。</p><ul><li>启发式图搜索策略（利用启发信息的搜索方法）的特点：重排OPEN表，选择最有希望的节点加以扩展。</li></ul><p>按运用的方法分类：</p><ol><li>陈述性启发信息：用于更准确、更精炼地描述状态</li><li>过程性启发信息：用于构造操作算子</li><li>控制性启发信息：表示控制策略的知识</li></ol><p>按作用分类： </p><ol><li>用于扩展节点的选择，即用于决定应先扩展哪一个节点，以免盲目扩展。</li><li>用于生成节点的选择，即用于决定要生成哪些后继节点，以免盲目生成过多无用的节点。</li><li>用于删除节点的选择，即用于决定删除哪些无用节点，以免造成进一步的时空浪费。</li></ol><h4 id="估价函数"><a href="#估价函数" class="headerlink" title="估价函数"></a>估价函数</h4><p>估算节点“希望”程度的量度。</p><p>估价函数值$ f(n)$ ：从初始节点经过 n节点到达目标节点的路径的最小代价估计值，其一般形式是</p><script type="math/tex; mode=display">f(n) = g(n)+h(n) \\ g(n)：从初始节点 S0 到节点 n 的实际代价 \\ h(n)：从节点 n 到目标节点 S_g 的最优路径的估计代价，称为启发函数。</script><ul><li>A 搜索算法：使用了估价函数 $f$的最佳优先搜索。</li></ul><h3 id="例题-7"><a href="#例题-7" class="headerlink" title="==例题=="></a>==例题==</h3><h4 id="积木问题"><a href="#积木问题" class="headerlink" title="积木问题"></a>积木问题</h4><blockquote><p>不太懂怎么写过程，画图得了，画树，总不可能比我算法考试2个$2^5$树更难画了。</p></blockquote><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h5><p>通过搬动积木块，希望从初始状态达到一个目的状态，即三块积木堆叠在一起。</p><h5 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h5><p>算子MOVE（X，Y）的先决条件：</p><p>1、被搬动积木顶必为空</p><p>2、若Y是积木，Y顶部也必须为空</p><p>3、同状态下操作算子运用次数不得多于1次</p><h5 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h5><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204191730482.png" alt="image-20220419173042295" style="zoom:67%;"></p><p>Open表：S6， S7 ， S8 ，S9 ， S10</p><p>Closed表：S0 ，S1 ，S2，S3 ，S4，S5</p><p>扩展节点数：6</p><p>生成节点数：10</p><h4 id="卒子穿阵（迷宫）"><a href="#卒子穿阵（迷宫）" class="headerlink" title="卒子穿阵（迷宫）"></a>卒子穿阵（迷宫）</h4><h5 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h5><p>要求一卒子从顶部通过下图所示的阵列到达底部。卒子行进中不可进入到代表敌兵驻守的区域（标注1），并不准后退。假定深度限制值为5。</p><div class="table-container"><table><thead><tr><th style="text-align:center">行\列</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th></tr></thead><tbody><tr><td style="text-align:center"><strong>1</strong></td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center"><strong>2</strong></td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center"><strong>3</strong></td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center"><strong>4</strong></td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr></tbody></table></div><h5 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h5><p>这里规定优先级，先向下，再向左，向右。</p><blockquote><p>这里一个bug，不知道第一行是否能左右移动，左右走没有意义，只会加大搜索空间，以为题目是顶部，所以（1，n）的下一个目标只应该 是（2，n），达到最优。</p><p>（1,3） - &gt; (1,4) 大于（1,4）直接出发</p></blockquote><p>这里和书有一点点出入，书上太乱了，既不是完全的回溯dfs也不是剪枝</p><p>这里做以下规定</p><ul><li>从（1，n）出发，为不同出发点，（1，n）的下一个状态只能为（2，n）</li><li>（n,m）（n&gt;1）下一个状态优先级依次为： {（n+1,m）,(n,m-1),(n,m+1)}(不能后退)</li><li>遇到边缘和敌兵（1）状态为死</li><li>最大深度为5</li><li>注：如过求全部路径，直接在（1，n）状态之间平移转换。</li></ul><p>解题如下：</p><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204191943510.png" alt="1-第 1 页" style="zoom:50%;"></p><p>如果不限制的化，maybe：</p><p>没有剪枝，大量冗余</p><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204191936900.png" alt="1-第 2 页"></p><p>如果加上不可重复进入</p><p>maybe：</p><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204191947515.png" alt="1-第 3 页" style="zoom:50%;"></p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 人工智能 </tag>
            
            <tag> 数理逻辑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工业互联网</title>
      <link href="/2022/04/02/2022-4-2-gong-ye-hu-lian-wang/"/>
      <url>/2022/04/02/2022-4-2-gong-ye-hu-lian-wang/</url>
      
        <content type="html"><![CDATA[<h1 id="工业互联网"><a href="#工业互联网" class="headerlink" title="工业互联网"></a>工业互联网</h1><blockquote><p>作者：    李春阳<br>时间：    2021.7.26 - 2021.9.5<br>内容：    工业互联网导论学习</p></blockquote><p><strong>目录</strong></p><p>[TOC]</p><h2 id="1-工业互联网概述"><a href="#1-工业互联网概述" class="headerlink" title="1 工业互联网概述"></a>1 工业互联网概述</h2><h3 id="1-1起源和发展"><a href="#1-1起源和发展" class="headerlink" title="1.1起源和发展"></a>1.1起源和发展</h3><h4 id="1-1-1-起源"><a href="#1-1-1-起源" class="headerlink" title="1.1.1 起源"></a>1.1.1 起源</h4><ul><li>2012年美国通用电气公司提出</li><li>德国工业4.0</li><li>中国制造2025</li><li>中国工业互联网建设白皮书</li></ul><h4 id="1-1-2-前景"><a href="#1-1-2-前景" class="headerlink" title="1.1.2 前景"></a>1.1.2 前景</h4><ul><li>国家支持</li><li>产业转型</li><li>新工业革命</li></ul><h3 id="1-2-定义及其价值"><a href="#1-2-定义及其价值" class="headerlink" title="1.2 定义及其价值"></a>1.2 定义及其价值</h3><h4 id="1-2-1-定义"><a href="#1-2-1-定义" class="headerlink" title="1.2.1 定义"></a>1.2.1 定义</h4><p>工业互联网（Industrial Internet）是新一代信息通信技术与工业经济深度融合的新型基础设施、应用模式和工业生态，通过对人、机、物、系统等的全面连接，构建起覆盖全产业链、全价值链的全新制造和服务体系，为工业乃至产业数字化、网络化、智能化发展提供了实现途径，是第四次工业革命的重要基石。</p><p>工业互联网不是互联网在工业的简单应用，而是具有更为丰富的内涵和外延。它以网络为基础、平台为中枢、数据为要素、安全为保障，既是工业数字化、网络化、智能化转型的基础设施，也是互联网、大数据、人工智能与实体经济深度融合的应用模式，同时也是一种新业态、新产业，将重塑企业形态、供应链和产业链。</p><p>当前，工业互联网融合应用向国民经济重点行业广泛拓展，形成平台化设计、智能化制造、网络化协同、个性化定制、服务化延伸、数字化管理六大新模式，赋能、赋智、赋值作用不断显现，有力的促进了实体经济提质、增效、降本、绿色、安全发展。</p><blockquote><p>工业互联网，从字面上可直观理解为，将工业系统与信息网络高度融合而形成的互联互通网络。<br>它是传统OT，CT和IT的高度融合：</p><ul><li>CT：通信技术（Communication Technology）。中国通信行业三巨头：移动、电信、联通、广电；通信制造服务业巨头：华为、诺基亚、爱立信、中兴等。</li><li>IT：计算机技术（Internet/ Information Technology）。目前的IT领域的巨头主要有：百度、阿里、腾讯、思科、微软、谷歌等。</li><li>OT：运营/操作技术（Operation Technology）。只要是与生产和管理过程相关的均属此范畴。</li></ul></blockquote><h4 id="1-2-2内涵"><a href="#1-2-2内涵" class="headerlink" title="1.2.2内涵"></a>1.2.2内涵</h4><ul><li>互联 + 计算</li><li>数字化</li><li>网络化</li><li>智能化</li><li>感知过程，计算分配，提高效率</li></ul><h4 id="1-2-3特点"><a href="#1-2-3特点" class="headerlink" title="1.2.3特点"></a>1.2.3特点</h4><ul><li><p>万物互联<br>数据入网进行分配计算</p></li><li><p>数据驱动<br>通过数据进行计算分析，控制进程</p></li><li><p>软件定义<br>对外软件控制，APP及其相关平台</p></li><li><p>平台支撑<br>建立云服务平台，计算及其分析，核心处理</p></li><li><p>服务增值<br>通过对外ToB短贩卖服务架构设计方案</p></li><li><p>智能主导<br>数字化决策，可视化展现</p></li><li><p>组织重构<br>管理模式，根据资源进程调度人，机，物</p></li></ul><blockquote><p>这里我感觉应该核心在计算不在连接，万物互联是最基本的，而边缘计算处理分析调度才是工业互联网的核心。</p></blockquote><h3 id="1-3工业互联网与智能制造"><a href="#1-3工业互联网与智能制造" class="headerlink" title="1.3工业互联网与智能制造"></a>1.3工业互联网与智能制造</h3><blockquote><ul><li>优势互补</li><li>工业互联网重点在连接+计算，提供平台及其服务</li><li>智能制作硬件出发，突出设计流程，使用机器人，机械臂等加快流水产物</li><li>俩者互补，对数据进行分析反馈制造业，数字孪生，虚拟加现实的模拟</li></ul></blockquote><h3 id="1-4架构"><a href="#1-4架构" class="headerlink" title="1.4架构"></a>1.4架构</h3><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251308040.jpg" alt="v2-e7da1740a30a9569ded12bcbb9554af3_1440w"></p><p>边缘层：也叫边缘计算层。作为连接工业互联网和底层物理设备的桥梁，它主要负责对接不同厂商、不同协议设备，开展从物理层到平台层的数据采集与传输、异构设备协议解析与转换，以及多元数据分析与处理，降低网络传输负载和云端计算压力。</p><ul><li><p>IaaS层：也称基础设施层。主要是一些与硬件服务器、数据存储、5G网络及虚拟化技术相关的基础设施，可以为工业互联网平台的安全、稳定运行提供硬件支撑。</p></li><li><p>PaaS层：也称为平台层，相当于一个开放、可扩展的工业操作系统。基于底层通用的资源、流程、数据管理模块，建立与开发工具、大数据和数据模型库相关的微服务组件，将不同行业、不同场景的工具/技术/知识/经验等资源，封装形成微服务架构，供各类开发者快速地定制、开发、测试和部署各类App应用。</p></li><li><p>SaaS层：即软件应用层。一方面基于工业PaaS层的工业操作系统，将传统的工业软件部署到工业互联网平台中，这个过程称为“云化”；另一方面，吸引更多的第三方软件开发企业，入驻到工业互联网平台中，提供一系列与工业互联网服务相关的APP，有效促进工业互联网在实际工业系统中落地。</p></li></ul><p>通过工业互联网，工业软件企业将传统的软件能力转化为平台PaaS及SaaS服务，以更低的成本和灵活的交付优势吸引更多客户。</p><h4 id="1-5技术体系"><a href="#1-5技术体系" class="headerlink" title="1.5技术体系"></a>1.5技术体系</h4><ul><li><p>网络体系</p><ul><li>网络连接</li><li>标识解析</li><li>边缘计算</li></ul></li><li><p>平台体系</p><ul><li>平台数据</li><li>工业APP</li><li>边缘计算</li></ul></li><li>安全体系<ul><li>防御</li><li>识别</li><li>监控</li></ul></li><li>应用体系<ul><li>管理</li></ul></li></ul><h2 id="2-工业互联网网络互联"><a href="#2-工业互联网网络互联" class="headerlink" title="2 工业互联网网络互联"></a>2 工业互联网网络互联</h2><h3 id="2-1概述"><a href="#2-1概述" class="headerlink" title="2.1概述"></a>2.1概述</h3><p>系统之间互联，信息共享，这里包括网络互联和数据互通<br>主要在网络协议上</p><h4 id="2-1-1-工厂内部网络"><a href="#2-1-1-工厂内部网络" class="headerlink" title="2.1.1 工厂内部网络"></a>2.1.1 工厂内部网络</h4><p>俩层三级（工业信息IT，网络工厂控制OT，现场级，车间级，工厂级）</p><ul><li>工业IT网络（IP6/IP4双栈）</li><li>工厂OT网络（以太网）</li><li>直达机器和在制品的连接（传感器等）</li><li>广泛的无线连接（WiFi，ZigBee，蓝牙等）</li><li>基于SDN的IT/OT组网</li><li>工厂主干网络和边缘网络的互联（工业PON互联</li></ul><h4 id="2-1-2工厂外部网络"><a href="#2-1-2工厂外部网络" class="headerlink" title="2.1.2工厂外部网络"></a>2.1.2工厂外部网络</h4><p>智能工厂三个专线，出厂2产品一个转线</p><ul><li>上网专线（智能工厂与互联网连接）</li><li>互联专线(智能工厂与上下游企业连接)</li><li>上云专线(智能工厂与云端连接)</li><li>上网专线（出厂产品和互联网互联）</li></ul><h3 id="2-2工业现场总线"><a href="#2-2工业现场总线" class="headerlink" title="2.2工业现场总线"></a>2.2工业现场总线</h3><ul><li>传感器总线（位）<br>  ASI,Seriplex</li><li>设备总线（字节）<br>  CAN, Interbus， Profibus-DP</li><li>现场总线（数据流）<br>  FF，LonWorks，</li></ul><h3 id="2-3工业以太网"><a href="#2-3工业以太网" class="headerlink" title="2.3工业以太网"></a>2.3工业以太网</h3><p>采用TCP/IP协议</p><h3 id="2-4时间敏感网络"><a href="#2-4时间敏感网络" class="headerlink" title="2.4时间敏感网络"></a>2.4时间敏感网络</h3><p>时间敏感网络（TSN）是IEEE802.1扩展<br>基于标准以太网，凭借时间同步，数据调度，负载整形优化</p><p>时间敏感网络技术用以太网物理接口承接工业内有线连接，基于通用标准构建工业以太网数据链路层传输；作为底层的通用架构，为实现传统OT与IT网络的融合提供了技术基础，不仅并为打破以封闭协议为维度由某一厂商主导的产业模式提供可能，提高了工业设备的连接性和通用性，并且为包括大数据分析以及智能的、连接的系统和机器在内的新的业务提供了更快的发展路径，使得工业互联网网络技术和产业生态变得更为开放和富有活力。</p><p>时间敏感网络（TSN）技术遵循标准的以太网协议体系，天然具有更好的互联互通优势，可以在提供确定性时延、带宽保证等能力的同时，实现标准的、开放的二层转发，提升了互操作性，同时降低了成本。可以整合相互隔离的工业控制网络为原有的分层的工业信息网络与工业控制网络向融合的扁平化的架构演进提供了技术支撑。</p><p>时间敏感网络主要在时间同步、流量调度以及互操作三个方面对以太网技术协议进行了优化升级，包括利用gPTP 技术提升时间同步机制的性能，利用时间分片、抢占、流过滤等技术扩展流量调度手段，以及利用路径控制、冗余备份以及YANG模型等技术增强网络的互操作功能。目前标准的制定主要集中在基于标准以太网的基础共性标准以及结合应用场景的技术细化和升级两个方面：基础共性标准：时间敏感网络（TSN）技术为以太网协议的MAC层提供了一套通用的时间敏感机制，在确保以太网数据通讯的时间确定性的同时，为不同协议网络之间的互操作提供了可能。IEEE802.1 TSN 工作组目前已经完成基础共性协议的制定和发布，主要特性集中在时间同步、流量调度、网络管理以及安全可靠三大类，</p><p>当前，工业领域的网络架构是分层实现的，对于工业互联网场景下的设备互联和数据互通需求满足度不高。工业互联网网络需要同时具备实现控制网络中各业务单元的互通和打通从现场控制到云端的数据通路的能力。如果将传统意义上的二层TSN网络和三层Detnet网络看作是广义的时间敏感网络，那么其在工业网络中的应用范围，主要可以包括图中所示的7个位置：①将TSN网络部署于控制器到现场设备之间，实现控制信号的高质量确定性时延传输；②将TSN网络部署于控制器之间，实现协同信号的高精度同步传输；③将TSN网络部署于控制器与监控设备（SCADA）或者HMI之间，实现维护数据的高质量传输；时间敏感网络产业白皮书20④将TSN网络部署于IT网络与OT网络之间，助力实现生产数据向信息系统的上传以及控制管理信息向生产设备的下发；⑤将TSN网络部署于移动前传网络，为射频单元（RRU）与基带处理单元（BBU）之间的确定性传输提供网络支撑，⑥将Detnet网络部署于IT网络与云平台之间，实现企业内部IT网络与私有云平台业务的确定性时延承载；⑦将Detnet网络部署于企业外网中，在企业分支之间，企业与数据中心，工业企业与上下游企业之间建立全业务共网承载的管道，实现按业务要求调配网络资源。可以看出，将时间敏感网络可以做为工业网络互联互通的核心，连接存量的传统工业以太网产线、接入采集海量工业数据的物联网、支撑高精度、远程控制的信号承载，实现各类型工业业务的共网络承载，并按需保证传输质量。</p><blockquote><p>安全<br>协议包括一些帧检测和重复过滤，可以避免网络攻击，流量过载，重复冗余增加可靠信，</p></blockquote><h3 id="2-5工业无源光网络"><a href="#2-5工业无源光网络" class="headerlink" title="2.5工业无源光网络"></a>2.5工业无源光网络</h3><h4 id="2-5-1无源光网络技术（PON）"><a href="#2-5-1无源光网络技术（PON）" class="headerlink" title="2.5.1无源光网络技术（PON）"></a>2.5.1无源光网络技术（PON）</h4><p>无源光网络（Passive Optical Network, PON）是一种纯介质网络，避免了外部设备的电磁干扰和雷电影响，减少线路和外部设备的故障率，提高了系统可靠性，同时节省了维护成本，是电信维护部门长期期待的技术。</p><p>无光源网络是一种点对多点的光纤传输和接入技术，下行采用广播方式、上行采用时分多址方式，可以灵活地组成树形、星型、总线型等拓扑结构，在光分支点只需要安装一个简单的光分支器即可，因此具有节省光缆资源、带宽资源共享、节省机房投资、建网速度快、综合建网成本低等优点。无源光网络包括ATM-PON和Ethernet-PON两种。</p><h4 id="2-5-2特点"><a href="#2-5-2特点" class="headerlink" title="2.5.2特点"></a>2.5.2特点</h4><p>PON传输速率下行为622Mbps或155Mbps，上行为155Mbps [2]  。<br>在各种宽带接入技术中，无源光网络以其容量大、传输距离长、较低成本、全业务支持等优势成为热门技术。之前已经逐步商用化的无源光网络主要有TDM-PON（APON、EPON、GPON）和WDM-PON，它们的共同特点是：<br>·可升级性好、低成本，接入网中去掉了有源设备，从而避免了电磁干扰和雷电影响，减少了线路和外部设备的故障率，降低了相应的运维成本；<br>·业务透明性较好，高带宽，可适用于任何制式和速率的信号，能比较经济地支持模拟广播电视业务，支持三重播放（Triple play，语音、视频、数据）业务；<br>·高可靠性，提供不同业务优先级的QoS保证，适应宽带接入市场IP化的发展潮流，适于大规模应用。<br>这种网络是一种点到多点的光纤传输和接入的网络，具有节省光缆资源、设备安全性高、建网速度快、成本低等突出的优点，因此随着光纤接入技术FTTB、FTTC和FTTZ等的广泛应用，无源光网络很快就成为各种FTTx最为理想的接入方式，得到了广泛的应用 [1]  。<br>目前已经形成标准的PON规范有：APON（ATM-PON）、EPON（EthernetoverPON）和GPON [3]  。</p><h4 id="2-5-3PON核心"><a href="#2-5-3PON核心" class="headerlink" title="2.5.3PON核心"></a>2.5.3PON核心</h4><p>如图1，PON（无源光网络）中最主要的三部分包括位于局端的OLT（Optical Line Terminal，光线路终端）、终端ONU（Optical Network Unit，光网络单元）、以及ODN（Optical Distribution Network，光配线网）。PON“无源”是指ODN全部由光分路器（Splitter）等无源器件组成，不含有任何电子器件及电源。</p><blockquote><p>安全</p><ul><li>组网安全（依靠光链路保护倒换技术）</li><li>设备安全（关键冗余）</li><li>现场环境安全（工业ONU支持强电磁干扰，抗振动等干扰）</li><li>数据安全（三重搅动加密）</li><li>业务安全（多种VLAN，专网隔离）</li></ul></blockquote><h3 id="2-6工业SDN"><a href="#2-6工业SDN" class="headerlink" title="2.6工业SDN"></a>2.6工业SDN</h3><p>软件定义网络（Software Defined Network，SDN）是由美国斯坦福大学Clean-State课题研究组提出的一种新型网络创新架构，是网络虚拟化的一种实现方式。其核心技术OpenFlow通过将网络设备的控制面与数据面分离开来，从而实现了网络流量的灵活控制，使网络作为管道变得更加智能，为核心网络及应用的创新提供了良好的平台。</p><p>传统网络世界是水平标准和开放的，每个网元可以和周边网元进行互联。而在计算机的世界里，不仅水平是标准和开放的，同时垂直也是标准和开放的，从下到上有硬件、驱动、操作系统、编程平台、应用软件等等，编程者可以很容易地创造各种应用。从某个角度和计算机对比，在垂直方向上，网络是“相对封闭”和“没有框架”的，在垂直方向创造应用、部署业务是相对困难的。但SDN将在整个网络（不仅仅是网元）的垂直方向变得开放、标准化、可编程，从而让人们更容易、更有效地使用网络资源。</p><p>因此，SDN技术能够有效降低设备负载，协助网络运营商更好地控制基础设施，降低整体运营成本，成为了最具前途的网络技术之一</p><p>利用分层的思想，SDN将数据与控制相分离。在控制层，包括具有逻辑中心化和可编程的控制器，可掌握全局网络信息，方便运营商和科研人员管理配置网络和部署新协议等。在数据层，包括哑的交换机（与传统的二层交换机不同，专指用于转发数据的设备），仅提供简单的数据转发功能，可以快速处理匹配的数据包，适应流量日益增长的需求。两层之间采用开放的统一接口（如OpenFlow等）进行交互。控制器通过标准接口向交换机下发统一标准规则，交换机仅需按照这些规则执行相应的动作即可</p><h5 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h5><p>SDN是当前网络领域最热门和最具发展前途的技术之一。鉴于SDN巨大的发展潜力，学术界深入研究了数据层及控制层的关键技术，并将SDN成功地应用到企业网和数据中心等各个领域 [1]  。</p><p>传统网络的层次结构是互联网取得巨大成功的关键。但是随着网络规模的不断扩大，封闭的网络设备内置了过多的复杂协议，增加了运营商定制优化网络的难度，科研人员无法在真实环境中规模部署新协议。同时，互联网流量的快速增长，用户对流量的需求不断扩大，各种新型服务不断出现，增加了网络运维成本 [1]  。传统IT架构中的网络在根据业务需求部署上线以后，由于传统网络设备的固件是由设备制造商锁定和控制的，如果业务需求发生变动，重新修改相应网络设备上的配置是一件非常繁琐的事情。在互联网瞬息万变的业务环境下，网络的高稳定与高性能还不足以满足业务需求，灵活性和敏捷性反而更为关键。因此，SDN希望将网络控制与物理网络拓扑分离，从而摆脱硬件对网络架构的限制。</p><p>SDN所做的事是将网络设备上的控制权分离出来，由集中的控制器管理，无须依赖底层网络设备，屏蔽了底层网络设备的差异。而控制权是完全开放的，用户可以自定义任何想实现的网络路由和传输规则策略，从而更加灵活和智能。进行SDN改造后，无需对网络中每个节点的路由器反复进行配置，网络中的设备本身就是自动化连通的，只需要在使用时定义好简单的网络规则即可。因此，如果路由器自身内置的协议不符合用户的需求，可以通过编程的方式对其进行修改，以实现更好的数据交换性能。这样，网络设备用户便可以像升级、安装软件一样对网络架构进行修改，满足用户对整个网络架构进行调整、扩容或升级的需求，而底层的交换机、路由器等硬件设备则无需替换，节省大量成本的同时，网络架构的迭代周期也将大大缩短。</p><p>总之，SDN具有传统网络无法比拟的优势：首先，数据控制解耦合使得应用升级与设备更新换代相互独立，加快了新应用的快速部署；其次，网络抽象简化了网络模型,将运营商从繁杂的网络管理中解放出来，能够更加灵活地控制网络；最后，控制的逻辑中心化使用户和运营商等可以通过控制器获取全局网络信息，从而优化网络，提升网络性能 [1]  。</p><p>SDN 是当前最热门的网络技术之一，它解放了手工操作，减少了配置错误，易于统一快速部署。它被MIT列为“改变世界的十大创新技术之一”。SDN相关技术研究在全世界范围内也迅速开展，成为近年来的研究热点。2013年，SIGCOMM会议收录了多篇相关文章，甚至将SDN列为专题来研讨，带动了SDN相关研究的蓬勃发展</p><h3 id="2-7专用工业无线"><a href="#2-7专用工业无线" class="headerlink" title="2.7专用工业无线"></a>2.7专用工业无线</h3><h4 id="2-7-1-WIA-PA"><a href="#2-7-1-WIA-PA" class="headerlink" title="2.7.1 WIA-PA"></a>2.7.1 WIA-PA</h4><p><strong>特点</strong></p><p>1、基于网状及星型混合网络拓扑<br>WIA-PA为两层拓扑结构，其下层为星型结构，由簇首和簇成员构成；上层为网状结构，由网关和各簇首(兼作路由设备)构成。这样的设计保证簇成员不必选择传输路径，仅一跳即可将测量信息传送给簇首，克服了网状拓扑传送延迟的不确定性；又能利用网状结构的节点部署的灵活性和多路径抗于扰的能力，平衡了工业自动化要求无线传输确定性和可靠性的矛盾。</p><p>2、 IEEE 802．15．4协议体系<br>WIA—PA完全采用IEEE 802．15．4协议体系，这是因为该体系是当前无线短程网的主流协议体系，所有工业用、民用和军用的无线体系协议几乎都在物理层和MAC层遵循其规范，而在数据链路子层、网络层、应用层上则各自自行定义。</p><p>3、 集中式和分布式混合的管理架构<br>WIA—PA网络中使用集中式管理和分布式管理相结合的管理架构。集中式管理由网络管理者和安全管理者集中完成，它们直接管理路由设备和现场设备。在网络管理者和安全管理者直接对现场设备进行管理时，路由设备只执行管理信息的转发，不承担簇首角色。分布式管理由网络管理者/安全管理者和簇首共同完成，网络管理者/安全管理者直接管理路由设备，并将对现场设备的管理权限下放给路由设备，路由设备承担簇首角色，执行网络管理者/安全管理者代理的功能。这一设计克服了全网状结构的网管采用集中管理的可能弊端，便于维护网络的长期可靠运行。</p><p>4、面向由簇首构成的Mesh结构的集中式管理架构<br>网络管理者主要负责集中管理功能，即构建和维护由路由设备构成的Mesh结构；分配Mesh结构中路由设备之间通信所需资源；预分配路由设备可向下分配给构成Star结构的现场设备的资源；检测WIA—PA网络性能，包括设备状态、路由健康状态和信道状况。</p><p>5、面向簇的分布式管理架构<br>簇首作为网络管理者的代理，主要执行以下管理功能，即负责构建和维护有现场设备和路由设备构成的Star结构；负责将网络管理者预留给星型结构的通信资源分配给簇内现场设备；负责向网络管理者提供星型结构的网络性能。簇首作为安全管理者的代理，主要执行以下安全功能，即负责管理星型结构中使用的部分密钥；负责认证路由设备之间和路由设备与现场设备之间的通信关系。在节点资源有限的情况下，分布式管理保证了网络长期可靠的运行。</p><p>6、 虚拟通信关系VCR<br>按照所支持的应用定义了三种类型的VCR，即发布方/预订方类型(主要用于支持预先配置的周期性的数据通信，即占通信量80%以上的循环通信)，报告/汇聚类型(主要用于非周期的事件、趋势报告等)和客户端/服务器类型(以请求/响应形式支持非周期的、动态的成对单播信息传输)。这样覆盖了工业通信所需要的所有类型。</p><p>7、 超帧结构<br>超帧结构的设计主要为解决无线传输数据的效率和处理无线传输的资源有限的矛盾。将其设计为活动期和非活动期两部分，划分进行不同网络管理功能的时隙分配。活动期分为CAP(进行设备加入，簇内管理和重传)和CFP(进行移动设备与簇首间的通信)；非活动期则完成簇内通信、簇间通信以及休眠。</p><p>8、三种多路存取机制<br>WIA-PA考虑到工业自动化对通信的要求分为具有确定性通信和随机通信两种，80%以上的数据传送为循环传送，其余为事件触发的数据和其他无确定性要求的数据。另外还要考虑无线传输的可靠性，因此设计了时分多路存取TDMA、频分多路存取FDMA和载波侦听多路存取CSMA 种机制。在超帧内信标帧、CFP、簇内通信和簇间通信阶段为TDMA；CAP阶段为CSMA；在超帧间，不同簇超帧的活动期采用FDMA机制，使用不同的信道。如果信道数量不足，则采用TDMA机制</p><p>9、 三种跳频机制<br>通过在不同的阶段使用不同的跳频机制的设计，来提高无线传输的抗干扰能力和可靠性。自适应频率切换(AFS)，这是活动期在同一个超帧周期内使用相同的信道，在不同的超帧周期内根据信道状况切换信道；自适应跳频(AFH)，这是非活动期的簇内通信段在每个时隙根据信道状况更换通信信道；时隙跳频(TH)，这是非活动期的簇间通信段在每个时隙按照一定规律改变通信信道。</p><p>10、 聚合与解聚<br>为提高无线数据传输的资源利用率，设计了两级聚合功能，即数据聚合和包聚合。对现场设备和多个用户应用对象可运用数据聚合功能；对路由设备或/和多个现场设备可运用包聚合。</p><p>综上所述，WIA-PA是一种经过实际应用验证的、适合于复杂工业环境应用的无线通信网络协议。它在时间上(时分多址TDMA)、频率上(巧妙的FHSS跳频机制)和空间上(基于网状及星型混合网络拓扑形成的可靠路径传输)的综合灵活性，使这个相对简单但又很有效的协议具有嵌入式的自组织和自愈能力，大大降低了安装的复杂性，确保了无线网络具有长期而且可预期的性能。</p><blockquote><p>安全<br>WIP-PA定义了配置密钥，加入密钥，密钥加密密钥，DLS数据加密密钥和APS数据加密密钥五种密钥</p></blockquote><h4 id="2-7-2-WIA-FA"><a href="#2-7-2-WIA-FA" class="headerlink" title="2.7.2 WIA-FA"></a>2.7.2 WIA-FA</h4><p>作为国际上第一个面向工厂高速自动控制应用的无线技术规范，WIA-FA技术是工厂自动化生产线实现在线可重构的重要使能技术，对推进制造业由传统的低成本大批量生产模式向高端高附加值的个性化生产模式转变，助推我国制造业的转型升级，具有重要意义。</p><blockquote><p>安全<br>WIA-FA提供了设备认证功能，数据完整性校验功能，数据保密性功能，防止重放攻击功能，密钥管理功能和安全警告功能</p></blockquote><h4 id="2-7-3-ISA100-11a"><a href="#2-7-3-ISA100-11a" class="headerlink" title="2.7.3 ISA100.11a"></a>2.7.3 ISA100.11a</h4><p>ISA100.11a是由国际自动化学会(ISA)制定的无线网络技术标准。官方描述是“工业自动化无线系统：过程控制和相关应用”。</p><p>ISA100 委员会是 ISA 的一部分，成立于 2005 年，旨在制定标准和相关信息，这些标准和相关信息将定义在自动化和控制环境中实施无线系统的程序，重点是现场级别。该委员会由来自全球近 250 家公司的 400 多名自动化专业人士组成。该委员会还代表最终用户、无线供应商、系统集成商、研究公司、顾问、政府机构和行业联盟。委员会成员将他们的专业知识用于推进 ISA100 系列标准。</p><blockquote><p>安全<br>在传输层及其数据链路层同时进行数据加密<br>在设备入网，设备间对话的建立，密钥更新等方面进行安全管理</p></blockquote><h4 id="2-7-4-WirelessHART"><a href="#2-7-4-WirelessHART" class="headerlink" title="2.7.4 WirelessHART"></a>2.7.4 WirelessHART</h4><p>WirelessHART是一种基于高速公路可寻址远程传感器协议(HART)的 无线传感器网络技术。作为多供应商、可互操作的无线标准开发的 WirelessHART 是为满足过程现场设备网络的要求而定义的。</p><blockquote><p>安全<br>路由加密，保证端到端的安全和可靠</p></blockquote><h3 id="2-8移动通讯网络"><a href="#2-8移动通讯网络" class="headerlink" title="2.8移动通讯网络"></a>2.8移动通讯网络</h3><p>5G 技术的应用，延迟低，可靠</p><h2 id="3-工业互联网标识解析"><a href="#3-工业互联网标识解析" class="headerlink" title="3 工业互联网标识解析"></a>3 工业互联网标识解析</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><p>工业互联网标识解析体系通过条形码、二维码、无线射频识别标签等方式赋予每一个实体或虚拟对象唯一的身份编码，同时承载相关数据信息，实现实体和虚拟对象的定位、连接和对话的新型基础设施。</p><p>标识解析体系被认为是工业互联网 “ 基础中的基础 “，是支撑工业互联网互联互通的神经枢纽，也是驱动工业互联网创新发展的关键核心设施。其作用类似于互联网领域的域名解析系统（DNS）。</p><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251308127.png" alt="8326cffc1e178a82784878f6f903738da977e874"></p><h3 id="3-2-工业互联网标识解析体系架构"><a href="#3-2-工业互联网标识解析体系架构" class="headerlink" title="3.2 工业互联网标识解析体系架构"></a>3.2 工业互联网标识解析体系架构</h3><p><strong>1.根节点（国际）</strong><br>全球有多个根结点，每一个根多节点都是独立、平等的。每个根节点都是由MPA（Multi-Primary Administrator）多组管理者来负责。目前全球一共有9+1个MPA负责整个DOA/Handle根区的共同管理，面向全球范围不同国家、不同地区提供根区数据管理和根解析服务。</p><p>中国MPA联合体是DONA的四个创始人之一。2014年由国家工业信息安全发展研究中心牵头，联合北京中数创新科技有限公司以及北京西恩多纳信息技术有限公司，成立了MPA的联合体，在中国推动DOA技术的发展。中国管理的权限包括86和108开头的前缀，负责中国全球根结点的管理建设、技术研发、运营、二级节点建设和应用推广。</p><p><strong>2.国家顶级节点</strong><br>我国工业互联网重要基础服务设施，标识解析体系的核心枢纽，为国内工业互联网发展提供标识注册和解析服务。</p><p><strong>3.二级标识解析节点</strong><br>面向行业提供标识注册和解析服务。</p><p>工业互联网标识二级节点是工业互联网标识解析体系的中间环节，直接面向行业和企业提供服务。2019年4月23日，国家工业互联网标识体系二级节点（南通）正式上线应用，南通电子信息行业二级节点成为全国首个成功对接国家顶级节点。</p><p><strong>4.企业标识解析节点</strong><br>为特定工业企业提供标识注册和解析服务，并可根据该企业的规模定义工厂内标识解析系统组网形式及企业内标识数据格式。</p><p><strong>5.公共递归解析节点</strong><br>实现公共查询和访问入口。是指标识解析体系的关键性入口设施，能够通过缓存等技术手段提升整体服务性能。</p><p>当收到客户端的标识解析请求时，递归节点会首先查看本地缓存是否有查询结果，如果没有，则会通过标识解析服务器返回的应答路径查询，直至最终查询到标识所关联的地址或者信息，将其返回给客户端，并将请求结果进行缓存。</p><h3 id="3-3-工业互联网标识编码技术"><a href="#3-3-工业互联网标识编码技术" class="headerlink" title="3.3 工业互联网标识编码技术"></a>3.3 工业互联网标识编码技术</h3><h4 id="3-3-1-Handle"><a href="#3-3-1-Handle" class="headerlink" title="3.3.1 Handle"></a>3.3.1 Handle</h4><p>DOA架构和Handle系统由Robert E.Kahn博士发明，具有为各类物理实体与数字对象提供全球唯一标识、解析、信息管理与安全控制等服务的能力，目前已在国际工业互联网领域被广泛运用。Handle系统可与二维码、RFID、数据库、信息系统等有机融合，低成本实现与原有系统的无缝对接以及不同应用系统间低成本的互操作，有效合理地解决“信息孤岛”现象；为工业互联网上下游企业提供符合国际标准的、全球统一的标识服务和信息管理服务，有效支撑工业互联网、物联网、大数据、智慧城市等领域的解决方案研制与产业创新融合发展，是工业互联网的重要底层共性技术。</p><p>同时，Handle系统具备独有的兼容性、可扩展性、安全性、唯一性、永久性等特点，并具备特有的分布式管理架构和解析机制，得以形成跨地区、跨行业、跨平台、跨系统的资源整合创新服务模式以及与国际接轨且自主可控的管理架构，从而成为我国物联网信息安全的战略基石。</p><blockquote><p>与DNS兼容<br>主要应用在数字出版，数字图书馆，医药追溯中</p></blockquote><h4 id="3-3-2-OID"><a href="#3-3-2-OID" class="headerlink" title="3.3.2 OID"></a>3.3.2 OID</h4><p>按照GB/T 17969. 1(ISO/IEC 9834-1)的定义，对象是指“通信和信息处理世界中的任何事物，它是可标识(可以命名)的，同时它可被注册”。对象标识符(Object Identifier，OID)是与对象相关联的用来无歧义地标识对象的全局唯一的值，可保证对象在通信与信息处理中正确地定位和管理。通俗地讲，OID就是网络通信中对象的身份证。</p><p>与商品代码、组织机构代码、标准书号((ISBN), IP地址等其他标识机制相比，OID具有明显的特点。</p><p>(1) OID采用分层结构，灵活、可扩展性强。上述的三类代码都有固定位数限制，可标识的对象总数有限;IPv4地址就面临着因网络节点增多需要升级的问题。而OID因为没有层数限制，因此不存在这种问题。</p><p>(2) OID可用于多种编码机制之间映射的元标识。针对一种对象，往往已经存在了多种标识方式。以组织对象为例，存在组织机构代码(来自于ISO 6523-1)、银行标识代码旧ank Identifier Code，BIC,来源于ISO 9362)、国际银行账户号(International Bank Account Number，IBAN，来源于ISO 13616)、duns number等多种标识方。这些标识方式都是在不同的历史时期，针对不同的特定目的制定的，并且都已经广泛应用。随着信息化进程的加快，需要多种信息化应用的结合，首先需要对多种标识方式进行整合和映射。研究表明，从编码机制上看，只有OID和uri适宜做多种编码机制相互映射的元标识。</p><p>(3) OID可以用于多种对象的标识。OID最初是用于对网络传输中ASN.1代码的标识，因为它具有灵活、可扩展等特点，逐渐成为网络传输中多种不同类型对象的标识，例如:密码算法、硬件设备类型、组织机构等。</p><h4 id="3-3-3-GS1"><a href="#3-3-3-GS1" class="headerlink" title="3.3.3 GS1"></a>3.3.3 GS1</h4><p>GS1 (Globe standard 1)是1973年由美国统一代码委员会建立的组织，该系统拥有全球跨行业的产品、运输单元、资产、位置和服务的标识标准体系和信息交换标准体系，使产品在全世界都能够被扫描和识读 。</p><p>编码体系：标识代码、附加属性代码</p><p>数据结构：14位全球贸易项目代码 (GTIN)</p><p>数据载体：一维条码、 二维条码和射频识别</p><h4 id="3-3-4-Ecode"><a href="#3-3-4-Ecode" class="headerlink" title="3.3.4 Ecode"></a>3.3.4 Ecode</h4><p>物联网示范工程在各行业中深入开展，Ecode编码方案的提出一方面从兼容性上实现了对现有系统互联，但是，面向新的应用系统，为了避免跨系统的信息转换，需要制定切合行业应用需求，又能确保具有全局唯一性的编码方案，使得各行业物联网应用中，制定满足行业应用的物联网编码标识方案，有能够与国家物联网统一编码方案保持一致，减少系统之间的信息转换，避免信息孤岛的产生。因此，制定了国家标准《物联网标识体系—Ecode标识应用指南》（GB/T 38662-2020）。</p><p>《物联网标识体系—Ecode标识体系中间件规范》（GB/T 38663-2020）作为标识系统各模块之间的枢纽，实现异构系统之间的对接，减少无效的信息互联，分散服务器端筛选、过滤、冗余检测、数据转换等复杂的数据处理的压力，从而提髙系统的性能发挥，保证服务层与用户层数据一致性，为应用程序提供可靠的服务接口。</p><h4 id="3-3-5-EPC"><a href="#3-3-5-EPC" class="headerlink" title="3.3.5 EPC"></a>3.3.5 EPC</h4><p>EPC的载体是RFID电子标签，并借助互联网来实现信息的传递。EPC旨在为每一件单品建立全球的、开放的标识标准，实现全球范围内对单件产品的跟踪与追溯，从而有效提高供应链管理水平、降低物流成本。EPC是一个完整的、复杂的、综合的系统。</p><p>电子产品代码（EPC编码）是国际条码组织推出的新一代产品编码体系。原来的产品条码仅是对产品分类的编码，EPC码是对每个单品都赋予一个全球唯一编码，EPC编码96位（二进制）方式的编码体系。96位的EPC码，可以为2.68亿公司赋码，每个公司可以有1600万产品分类，每类产品有680亿的独立产品编码，形象的说可以为地球上的每一粒大米赋一个唯一的编码。</p><p>EPC编码的原则：<br>1、唯一性 2、简单性 3、可扩展性 4、保密性与安全性</p><p>EPC编码关注的问题：<br>1、生产厂商和产品 2、内嵌信息 3、分类 4、批量产品编码 5、载体</p><p>EPC编码结构：<br>EPC编码数据结构标准规定了EPC数据结构的特征、格式、现有EAN.UCC系统中的GTIN、SSCC、GLN、GRAI、GIAI、GSRN及NPC与EPC编码的转换方式。 EPC编码数据结构标准适用于全球和国内物流供应链各个环节的产品（物品、贸易项目、资产、位置等）与服务等的信息处理和信息交换。</p><h4 id="3-3-6-UID"><a href="#3-3-6-UID" class="headerlink" title="3.3.6 UID"></a>3.3.6 UID</h4><p>本泛在识别(Ubiquitous ID, UID)标准体系是射频识别三大标准体系之一。UID 制定标准的思路类似于 EPCglobal, 其目标也是推广自动识别技术, 构建一个完整的编码体系, 组建网络进行通信。与EPC系统不同的是, UID信息共享尽量依赖于日本的泛在网络, 它可以独立于互联网实现信息共享。</p><p>UID标准体系主要包括泛在编码体系、泛在通信、泛在解析服务器和信息系统服务器4部分。UID编码体系采用Ucode 识别码, Ucode 识别码是识别目标对象的唯一手段。UID 积极参加空中标准的制定工作, 泛在通信除了提供读写器与标签的通信外, 还提供3G、PHS 和802. 11等多种接人方式。在信息共享方面, Ucode解析服务器通过Ucode 识别码提供信息系统服务器的地址, 信息系统服务器存储并提供与Ucode 识别码相关的各种信息。</p><h3 id="3-4-工业互联网标识载体技术"><a href="#3-4-工业互联网标识载体技术" class="headerlink" title="3.4 工业互联网标识载体技术"></a>3.4 工业互联网标识载体技术</h3><h4 id="3-4-1-被动标识载体"><a href="#3-4-1-被动标识载体" class="headerlink" title="3.4.1 被动标识载体"></a>3.4.1 被动标识载体</h4><ol><li>一维条形码</li></ol><p>它是一种由黑白相间的条纹组成的图案，其中黑色部分称为“条”白色的称为“空”。条和空分别用来代表0或1，从而不同粗细条纹间的相互组合，便代表了不同的编码信息。利用二进位的编码，可以表示数字，字符和符号信息。</p><p>条形码需要使用专门仪器进行识别，即扫描枪。条形码中条和空对相同光线的反射率不同，各自的反射光强度也不一样。条形码扫描枪利用该原理，通过光学传感器检测来自不同发射区的不同反射光，对条形码进行识别。条形码标签可以用普通纸打印，也可以使用专门的标签纸打印。</p><ol><li>二维码</li></ol><p>二维码可以看作条形码的升级版。条形码是一维的，它只有横向记录信息，纵向是不记录信息的，纵向剪短，记录的信息不受影响。二维码是二维的，两个方向都记录信息。</p><p>二维码也利用二进制表示信息的。二维码就是把信息翻译成黑白小方块，然后组成一个大方块。相比于只在一个维度上，携带信息的条形码，二维码在两个维度上都携带了信息，也就做成了这个方块状的样子。</p><p>在二维码编码中，白色小方块表示0，黑色小方块表示1。用二进制编码表示了数字，字母，符号和汉字信息。所有二维码角上都有三个相同的方块，是用来给扫描定位的，不管正着扫，倒着扫，还是斜着扫，扫出来的结果都是一样的。</p><ol><li>RFID</li></ol><p>RFID和条形码、二维码不同，条形码和二维码都可以认为是打印在纸片上的图案，编码在图案上的黑白条或黑白格子里，没有芯片。RFID是电子标签，信息是保存在芯片里的，芯片可以读写。使用的打印机也是专门的打印机，能够在芯片上写入信息。</p><p>RFID系统的工作原理：阅读器或者手持机将要发送的信息，经编码后加载在某一频率的载波信号上经天线向外发送，进入阅读器工作区域的电子标签接收此脉冲信号。可以读取RFID标签中信息，或者向其中写入信息。标签可以写入信息，这是RFID技术的一大优势，条形码和二维码打印后，只能读取，不能再次写入信息。</p><p>RFID电子标签：由芯片及内置天线组成。芯片内保存有一定格式的电子数据，作为待识别物品的标识性信息，是射频识别系统真正的数据载体。内置天线用于和射频天线间进行通信。</p><p>RFID技术的产品有三大类：无源RFID产品、有源RFID产品、半有源RFID产品。无源RFID产品没有电池，有源RFID产品和半有源RFID产品都有电池，半有源RFID产品电池功率小，不与读写器通讯时依靠自身电池能量维持待激活状态。</p><ol><li>NFC</li></ol><p>NFC是目前手机非常常见的一个通信接口。可以让智能设备通过相互靠近的方式来交换数据。NFC设备也可以与一个无源的NFC标签之间进行通信，这个通信方式就和RFID是一样的。NFC技术是由RFID技术演变而来，除了通信协议，NFC标准还规定了数据交换格式。在NFC单一芯片上结合了感应式读卡器、感应式卡片和点对点的功能，能在短距离内与兼容设备进行识别和数据交换。</p><h4 id="3-4-2-主动标识载体"><a href="#3-4-2-主动标识载体" class="headerlink" title="3.4.2 主动标识载体"></a>3.4.2 主动标识载体</h4><p>1.通用集成电路卡</p><p>通用集成电路卡（UICC）是SIM卡的一种，是用于使用GSM或UMTS网络的移动终端/电话的智能卡。 UICC用于确保各种个人数据的安全性和完整性，以及用于向无线运营商标识用户的信息，以使无线运营商知道与卡相关的计划和服务。 它可以存储联系人并实现可靠和安全的语音和数据连接，还可以用于数据漫游和远程添加新的应用程序和服务。 它最好用作任何3G或4G设备的通用应用程序交付平台。</p><ol><li>芯片</li><li>模组</li></ol><p>模块是指由数个基础功能组件组成的特定功能组件，可用来组成具完整功能之系统、设备或程序。模块通常都会具有相同的制程或逻辑，更改其组成组件可调适其功能或用途。</p><h3 id="3-5-工业互联网标识异构"><a href="#3-5-工业互联网标识异构" class="headerlink" title="3.5 工业互联网标识异构"></a>3.5 工业互联网标识异构</h3><blockquote><p>这部分就是不同类型之间的相互兼容和转换<br>本质就是先解析然后再封装<br>用来协调不同标识之间的通讯和连接<br>现在部署在边缘云上就可以完成</p></blockquote><h2 id="4-工业互联网边缘计算"><a href="#4-工业互联网边缘计算" class="headerlink" title="4 工业互联网边缘计算"></a>4 工业互联网边缘计算</h2><p><strong>边缘运算</strong>（英语：Edge computing），又译为<strong>边缘计算</strong>，是一种<a href="https://zh.wikipedia.org/wiki/分散式運算">分布式运算</a>的架构，将<a href="https://zh.wikipedia.org/wiki/應用程式">应用程序</a>、数据资料与服务的运算，由网络中心节点，移往网络逻辑上的边缘节点来处理<a href="https://zh.wikipedia.org/wiki/邊緣運算#cite_note-1">[1]</a>。边缘运算将原本完全由中心节点处理大型服务加以分解，切割成更小与更容易管理的部分，分散到边缘节点去处理。边缘节点更接近于用户<a href="https://zh.wikipedia.org/wiki/終端">终端</a>设备，可以加快资料的处理与发送速度，减少<a href="https://zh.wikipedia.org/wiki/延遲_(電腦">延迟</a>)。在这种架构下，资料的分析与知识的产生，更接近于数据资料的来源，因此更适合处理<a href="https://zh.wikipedia.org/wiki/大數據">大数据</a>。</p><blockquote><p>感想<br>边缘计算，分布式计算的进阶<br>本质是把大量计算移到的边缘层，中心层负责统一调度<br>数据进行采集在边缘层进行分析和计算，然后再上传中心层分析<br>加快了进行，安全性提高<br>数据判断有局限性，只能边缘局部最优，中心统一调整<br>适合数据量大的</p></blockquote><h3 id="4-1-边缘计算概述"><a href="#4-1-边缘计算概述" class="headerlink" title="4.1 边缘计算概述"></a>4.1 边缘计算概述</h3><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251308634.png" alt="e8c2978acdf345f4802ddad94e92398f"></p><p>一 “边缘计算”究竟是何方神圣</p><p>边缘计算出现的时间并不长，这一概念有许多人进行过概括，范围界定和阐述各有不同，甚至有些是重复和矛盾的，就作者个人而言，比较推崇OpenStack（是一个由NASA和Rackspace合作研发并发起的，以Apache许可证授权的自由软件和开放源代码项目）社区的定义概念：</p><p>“边缘计算是为应用开发者和服务提供商在网络的边缘侧提供云服务和IT环境服务；目标是在靠近数据输入或用户的地方提供计算、存储和网络带宽”。</p><p>通俗地说：边缘计算本质上是一种服务，就类似于云计算、大数据服务，但这种服务非常靠近用户；为什么要这么近？目的是为了让用户感觉到刷什么内容都特别快。</p><p>边缘计算着重要解决的问题，是传统云计算（或者说是中央计算）模式下存在的高延迟、网络不稳定和低带宽问题。举一个现实的例子，几乎所有人都遇到过手机APP 出现404错误的情况 ，这样的一些错误出现就和网络状况、云服务器带宽限制有关系。由于资源条件的限制，云计算服务不可避免收到高延迟、和网络不稳定带来的影响，但是通过将部分或者全部处理程序迁移至靠近用户或数据收集点，边缘计算能够大大减少在云中心模式站点下给应用程序所带来的影响。</p><p>边缘计算,和雾计算同一时间出现，事实上两个概念之间有重叠的地方。这两个词是从2011年开始出现，如今已经成为了巨头的投资热点。先看看世界上的科技巨头们选择的方向吧：</p><p>Arm、Cisco、Dell、Intel、Microsoft、普林斯顿大学共同投资创办的雾计算研究项目OpenFog；<br>Orange (法国电信) 与 Inria(法国国立计算机及自动化研究院)共同主导的雾计算与大规模分布式云研究项目Discovery；<br>华为的“全面云化”战略， EC-IOT， 2016年成立边缘计算产业联盟；<br>Intel 的“Cloud Computing at the Edge”项目；<br>NTT 的“Edge Computing”项目， AT&amp;T 的 “Cloud 2.0”项目；<br>亚马逊AWS 发布的GreenGrass 项目（边缘计算代号）；<br>微软Azure 发IOT Edge 项目，重点发展边缘计算项目；<br>谷歌发布的IOT Core 项目；<br>阿里云发布的LinkEdge项目。<br>从2016到现在，巨头们已经在边缘计算的路上展开了激烈的角逐, 赛道已经非常的拥挤。</p><p>下图1 是一个边缘计算网络的概念图,它是连接设备和云端的重要中间环节。</p><p>图1 边缘计算基本网络架构 （图片来自bing 图片搜索）<br>边缘计算起源于广域网内搭建虚拟网络的需求，运营商们需要一个简单的、类似于云计算的管理平台，于是微缩板的云计算管理平台开始进入了市场，从这一点来看，边缘计算其实是脱胎于云计算的。随着这一微型平台的不断演化，尤其是得益于虚拟化技术（指通过虚拟化技术将一台计算机虚拟为多台逻辑计算机。在一台计算机上同时运行多个逻辑计算机，每个逻辑计算机可运行不同的操作系统，并且应用程序都可以在相互独立的空间内运行而互不影响，从而显著提高计算机的工作效率。）的不断发展，人们发现这一平台有着管理成千上万边缘节点的能力，且能满足多样化的场景需求，经过不同厂商对这一平台不断改良，并加入丰富的功能，使得边缘计算开始进入了发展的快车道。</p><p>二 为什么需要边缘计算</p><p>云计算和边缘计算通常会被用来做比较，上文也提到，边缘计算其实脱胎于云计算，那么，既然有了云计算，为何还要有边缘计算？</p><p>大家都熟悉云计算，它有着许多的特点：有着庞大的计算能力，海量存储能力，通过不同的软件工具，可以构建多种应用，我们在使用的许多APP ，本质上都是依赖各种各样的云计算技术，比如视频直播平台，电子商务平台。边缘计算脱胎于云计算，靠近设备侧，具备快速反应能力，但不能应付大量计算及存储的场合。这两者之间的关系，可以用我们身体的神经系统来解释。</p><p>云计算能够处理大量信息，并可以存储短长期的数据，这一点非常类似于我们的大脑。大脑是中枢神经中最大和最复杂的结构，也是最高部位，是调节机体功能的器官，也是意识、精神、语言、学习、记忆和智能等高级神经活动的物质基础。人类大脑的灰质层，富含着数以亿计的神经细胞，构成了智能的基础。而具有灰质层的并不只有大脑，人类的脊髓也含有灰质层，并具有简单中枢神经系统，能够负责来自四肢和躯干的反射动作，及传送脑与外周之间的神经信息。我们在初中的生物中都学习到了膝跳反应，这就是脊髓反应能力的证据。边缘计算对于云计算，就好比脊髓对于大脑，边缘计算反应速度快，无需云计算支持，但低智能程度较低，不能够适应复杂信息的处理。</p><p>每个人都有受过伤的经历，无论是被刺到还是被烫到，我们的身体都能够快速反应。就以烫伤为例，我们的神经系统大概的流程图如下所示：</p><p>在脊髓发出指令的同时，还会向大脑传递痛感的信号，让人能感觉到痛。大家看看整个过程，这钟避开风险的行动是在产生意识之前，而且速度非常快，避免了你身体的伤害。经过了亿万年的演化，现在人类的身体机构已经非常完善了，既然结构这样设计一定有他的道理。大家看看这组数据：“就人类而言，在联结脊髓到肌肉的神经细胞中，外层覆盖有髓鞘质层、直径大的神经元的信号传递速度为每秒70-120米，与之相反的脑神经元的信号传递速度为每秒0.5-2米。其间差距实在太大。”如果我们让大脑来处理避开烫伤这样的决策，并产生动作，那么我们的手最有可能出现的状况是：</p><p>所以，脊髓取代大脑做处某些快速的决策，完全是为了满足身体的某些特定功能，有不可替代的作用。如果认可存在即合理的解释，我们完全可以心安理得地接受：有云计算的时候，仍然需要边缘计算这一论断。当然 经过严密的逻辑分析，这个结论仍然成立。</p><p>未来物联网的发展会有两个趋势：海量连接及由此产生的海量数据。 具体连接和数据有多大? 根据Garter（全球最具权威的IT研究与顾问咨询公司，成立于1979年，总部设在美国康涅狄克州斯坦福）预测，2019年使用的联网物件将多达142亿个，到2021年总数将达到250亿个，它们会生成大量的数据。手机也是联网物件，每个月能够产生的流量大家自己能够估算出来，大体会在100G 的范围内。但是，物联网中的联网体，可不只有手机，比如说下面这两个物体：</p><p>波音787为例，其每一个飞行来回可产生TB级的数据，美国每个月收集360万次飞行记录；监视所有飞机中的25000个引擎，每个引擎一天产生588GB的数据。这样一个级别的数据，如果都上传到云计算的服务器中，无论对于算力和带宽，都提出了苛刻的要求。风力发电机装有测量风速、螺距、油温等多种传感器，每隔几毫秒测一次，用于检测叶片、变速箱、变频器等的磨损程度，一个具有500个风机的风场一年会产生2PB的数据。</p><p>如此PB 级别的数据，如果实时上传到云计算中心并产生决策，无论从算力和带宽的角度，都提出了苛刻的要求，更不要说由于延迟而产生的即时响应问题。面对这样的场景，边缘计算就体现出它的优势了，由于部署在设备侧附近，可以通过算法即时反馈决策，并可以过滤绝大部分的数据，有效降低云端的负荷，使得海量连接和海量数据处理成为可能。所以，边缘计算将作为云计算的补充，在未来共同存在于物联网的体系架构中。</p><p>说了这么多，总结一下这个边缘计算的优点：</p><p>低延迟：计算能力部署在设备侧附近，设备请求实时响应；<br>低带宽运行：将工作迁移至更接近于用户或是数据采集终端的能力能够降低站点带宽限制所带来的影响。尤其是当边缘节点服务减少了向中枢发送大量数据处理的请求时。<br>隐私保护：数据本地采集，本地分析，本地处理，有效减少了数据暴露在公共网络的机会，保护了数据隐私。</p><p>三 “边缘计算”的应用场景</p><p>既然边缘计算是云计算的重要补充，那么边缘计算的应用场景又有哪些呢？ 边缘计算模式的基础特性就是将计算能力更接近于用户，即站点分布范围广且边缘节点由广域网络连接。</p><ol><li><p>供零售/金融/远程连接领域使用的“开箱即用云”：提供了一系列可定制边缘计算环境，这类边缘计算主要提供给企业使用，并服务于特定产业应用。它从根本上与分布式结构相结合来达到以下效果：降低硬件消耗，多站标准化部署，灵活更替部署在边缘侧的应用（不受硬件影响，同一应用在所有节点上一致运行），提升弱网络条件下的运行稳定性。如果联网的条件有限制，通过将联网方式设定为有限网络连接时，可以提供内容缓存或提供计算、存储服务以及网络服务，比如新零售边缘计算环境。</p></li><li><p>移动连接：在5G网络大规模普及前，移动网络仍保持着受限和不稳定的特性，因此移动/无线网络也可以看作是云边缘计算的常见环境要素。许多应用或多或少都依赖于移动网络，例如应用于远程修复的增强现实、远程医疗、采集公共设施（水力，煤气，电力，设施管理）数据的物联网设备、库存、供应链以及运输解决方案、智慧城市、智慧道路和远程安全保障应用。这些应用都受益于边缘计算就近端处理的能力。</p></li><li><p>通用用户驻地设备（uCPE）:特点是网络连接有限，工作量较为稳定但需确保可用性高，同时，它也需要一种方法来支持跨上百至上千节点的数据应用混合安置，而拓展现有uCPE部署也将成为一项新要求。而这点非常适用于网络功能虚拟化（NFV Network Function Virtualization）应用，尤其当不同站点可能需要不同系列的服务链应用，或是区域内一系列不同的应用需要统一协作时。由于本地资源的利用以及必须满足在间断的网络连接下进行存储和进行数据处理，我们可需要支持网状或层次式的结构。自我修复以及与远程节点管理相结合的自我管理都是必须条件。</p></li><li><p>卫星通信（SATCOM）：该场景以大量可用的终端设备分布于最偏远和恶劣的环境为特征。将这些分散的平台用于提供托管服务极为合理的，尤其是当考虑到极高的延时，有限的带宽以及跨卫星通讯的费用。具体事例可能包括船舶（从渔船到油轮），飞机，石油钻井，采矿作业或军事基础设施。</p></li></ol><p>四 “边缘计算”的头号玩家（联盟、公司、参与者）</p><p>先来看看进入这一领域的都有哪几类公司？</p><p>边缘计算一类玩家：云计算巨头</p><p>边缘计算对云计算有一定冲击，但它与云计算也有很强的协同。国内外云服务商为了守住原本该有的市场空间，纷纷提前布局边缘计算避免被吞噬。物联网时代，更多的终端或传感器接入物联网，节点规模远远大于互联网，每个物联网节点都会产生大量的实时数据，这意味着云服务商要在边缘端布局计算，投入规模和时间周期都是巨大的挑战。当然，云服务商也不甘心被人来动自己的奶酪，国外有微软、亚马逊、谷歌，国内有阿里、华为还有百度都在积极部署边缘计算。</p><p>这些公司边缘计算技术路线虽然各不相同，但总体遵循一个规律：把边缘和云紧密结合，充分发挥边缘的低延迟，安全等特性同时，结合云的大数据分析能力。</p><p>最早发布自己的边缘计算技术的是亚马逊 AWS，框架是Greengrass,允许用户数据在本地流转，通过设计函数提取数据上传云端。</p><p>随着而来，微软推出了Azure IOT edge 。 微软在今年彻底瓦解了Windows 团队以后，投资50亿美元进军物联网市场，而主要领域则是边缘计算：微软在Build 2018开发者大会上正式宣布Azure IoT Edge开源，微软表示未来可以让开发者能够修改、调试Azure IoT Edge,同时拥有更多对于Edge 应用的控制。</p><p>2017年发布了全新的边缘计算服务Cloud IoT Core，协助企业连接及管理物联网装置，以及快速处理物联网装置所采集的数据。</p><p>阿里云在2018年 3月份推出了自己的边缘计算框架称为linkEdge，可被用于AI实践，在发布时已经有16家芯片公司、52家设备商、184款模组和网关支持阿里云物联网操作系统和边缘计算产品 。</p><p>2016年，华为发起了边缘计算产业联盟，到目前为止，已经有超过100家会员单位，其中不乏重量级的ARM，INTEL。华为自有EC-IOT平台 ，提供云管端边一体化的边缘计算开发模式。</p><p>百度在2018年伊始，百度云天工发布“智能边缘”，并开启邀请制测试。百度云天工将云端的数据管理与计算功能以软件的方式放在设备端上，将智能计算能力带向离数据源更近的地方，与云端计算良好协同，让设备变得更加智能。</p><p>边缘计算第二类玩家：传统设备巨头</p><p>由于 IOT 的迅速崛起， Intel 开始发力边缘计算市场，推出了若干平台。 在边缘端， Intel 能够提供不同规模的计算能力套件 ，或者叫做计算容器 。 Intel 的野心并不止于作为硬件平台商， 他想要建立自己的生态， 目前已经联合Wind River 推出了便利操作的边缘计算系统。</p><p>Dell , 早在2016年就高调宣布进军物联网市场，而且作为Linux Foundation 基金会下的边缘计算项目发起人，其地位不容低估。 Edgex Foundry ,是linux 基金会下的开源项目，致力于发展出具备即插即用功能的边缘计算平台， Dell 已经率先推出了基于Edgex foundry 的边缘网关， 目前并未在中国发售。</p><p>思科在2017年年中将边缘计算实现与微软Azure云平台之间互联，确保为企业提供从边缘到云端的整体性服务。</p><p>ARM， ARM 平台目前 有 CortexA, CortexR. CortexM, Mechine Learning , SecurCore几个平台， 目前，大量的智能手机（ios, android)， 商业广告机， 快递柜等，都是由ARM 支持。 由于边缘计算技术的兴起，特别是在设备侧的人脸识别， 语音识别能力兴起， ARM 的高阶芯片开始面向市场，可以有利地支持AI的发展。</p><p>随着大量的视频监控IP化，视频监控类企业也日益成为IOT企业 。 监控设备具备物理采集的功能—图像， 结合强大的边缘设备分析能力，可以提供人脸识别，交通监控等作用，成了智能城市的重要一环，主要以海康、大华为代表。</p><p>边缘计算三类玩家：CDN巨头<br>CDN（即内容分发网络）的核心价值是将数字内容智能分发到离用户更近的节点，进而提升整体分发效率，降低网络延时、节省带宽资源，其与生俱来的边缘节点属性，低延时和低带宽，令其在边缘计算市场具备先发优势，CDN本身就是边缘计算的雏形。</p><p>Akamai作为全球CDN领头羊早在2003年就与IBM合作边缘计算，今年6月Akamai与IBM在其WebSphere上提供基于边缘Edge的服务。</p><p>网宿科技也已将边缘计算当成核心战略，2016年开始建设边缘计算网络，2017年逐步推出边缘计算微服务，并将逐步开放边缘IaaS和PaaS服务。</p><p>CloudFlare公司在2017年就推出了CloudFlare Workers，以微服务的形式开放边缘计算服务，支持用户在边缘端编程，这标志着它已经初步搭建好了边缘计算的平台。</p><p>Nuu：bit宣布可以与微软的Azure宇宙数据库进行整合，同时微软的Azure系统也可以把Nuu：bit的数据整合在平台上，这也是一个极大的突破。</p><p>Limelight在今年上半年在其CDN网络上推出了增强版的EdgePrism OS软件，允许用户在边缘端进行本地内容输入和交付。</p><p>边缘计算四类玩家：运营商<br>在竞争激烈的市场中，为了获得高性能低延迟的服务，移动运营商纷纷开始部署移动边缘计算（MEC）。</p><p>中国移动已在10省20多个地市现网开展多种MEC应用试点。2018年1月，中国移动浙江公司宣布联合华为公司率先布局MEC技术，进一步推动网络实现超低时延、更佳体验，打造未来人工智能网络。</p><p>中国电信与CDN企业合作，想要通过MEC边缘CDN的部署，作为现有集中CDN的延展，同时为多网络用户服务。</p><p>AT&amp;T表示边缘计算是支持新技术的关键部分，包括物联网、软件定义网络、区块链、人工智能和5G。AT&amp;T正在AR/VR型应用、自动驾驶和智能城市项目的支持方面使用边缘计算。</p><p>德国电信（Deutsche Telekom）在提高自动驾驶汽车的连接性、数字化转型以及推进5G更好的网络性能方面使用边缘计算。</p><p>边缘计算五类玩家：核心研究机构<br>如今边缘计算的市场越来越大，不仅是众多的知名企业开始部署边缘计算，很多研究机构包括国内外的一些大学等都开始投入边缘计算这个大市场的怀抱。</p><p>中国信通院是边缘计算产业联盟ECC的发起成员之一，中国信通院与联盟多个成员共同对于边缘计算应用场景、技术架构、主要技术能力等方面展开了深入研究。在2018年1月召开的ITU-T SG20（国际电信联盟物联网和智慧城市研究组）WP1全会上，中国信通院与中国联通联合主导的《IoT requirements for Edge computing》国际标准项目成功立项。</p><p>卡内基梅隆大学在2018年1月领导了一项新的项目-CONIX，该项目获得了2750万美元的资金，在接下来的五年中，CONIX将创建位于边缘设备和云之间的网络计算架构，为边缘计算的兴起做准备。2月德国电信与Crown Castle合作在美国设立了边缘计算实验室，匹兹堡卡内基梅隆大学是该项目的中心站点。</p><p>边缘计算六类玩家：产业联盟<br>边缘计算产业联盟ECC(中国)在2016首届边缘计算产业峰会上宣布正式成立，该联盟由华为、中国科学院沈阳自动化研究所、中国信息通信研究院、英特尔公司、ARM 和软通动力共同发起成立，联盟成员总数共 62 家，这表明了边缘计算生态发展正式进入关键落地阶段。</p><p>Edgecross联盟(日本)于2017年年底成立，由6家公司创始，包括三菱电机、研华、欧姆龙、日本电气、日本IBM和日本甲骨文。边缘融合联盟Edgecross定义的边缘计算领域平台有两个目标，一个是实现生产现场小范围的物联网IoT系统，第二个是为生产数据匹配IoT化的数据标签。<br>Avnu联盟是一个利用开放标准创建低延迟、时间同步、高度可靠的联网设备的互操作性生态系统的社区。2017年12月5日，Avnu与边缘计算产业联盟签署了合作协议，目的是为了推动工业网络和边缘计算的共同利益。<br>ETSI（欧洲电信标准化协会）主动标准化MEC。运营商可以向授权的第三方开放其无线接入网络（RAN）边缘，使他们能够灵活快速地为移动用户、企业和垂直网段部署创新的应用和服务。MEC是移动基站演进和IT与电信网络融合的自然发展的结果。<br>2019年1月24日，Linux基金会在旧金山宣布成立针对边缘计算的LF Edge基金会。新的LF Edge基金会旨在为边缘计算的各种应用类型制定统一的软件堆栈、术语定义及开发框架，并促进边缘计算领域在底层形成架构上的统一，从而推动整个行业的快速发展。</p><p>五 “边缘计算”的发展挑战（邬贺铨的十问）</p><p>中国工程院院士邬贺铨是推进边缘计算技术与产业繁荣发展倡议的专家之一，对边缘计算有着更加深入的思考。在近期的2018边缘计算技术峰会上，他表示，边缘计算技术应该是一个体系，但目前包括他本人都对这个体系了解只是边缘，根本没有进入到核心，很多东西不太清楚，所以提出十问。</p><p>图9 邬贺铨 院士<br>NO1：5G MEC（移动边缘计算）应该下沉到什么位置？边缘计算放在DU？还是CU？还是放在核心网？显然靠近底下反应越快，数量越多，放在什么位置是值得研究的。</p><p>NO2：计算能力是一级设置还是多级设置？在采用MEC的前提下，还要不要同时设置云计算？在云计算和MEC之间是否需要设置雾计算？一个云计算节点联接的移动边缘计算（或雾计算）节点的合理数量是多少？</p><p>NO3：计算能力如何在云计算与边缘计算间优化配置？计算能力的分割是固定的还是可动态调整的？MEC需要向云计算节点上报过滤后的数据。云计算节点需要向MEC下发指令，除此之外两者间的通信还应有什么任务？</p><p>NO4：MEC间通过云计算节点互通还是直接通信？同样是边缘计算节点，它们之间要不要互通，或者说必须间接互通？</p><p>NO5：边缘计算需要有IaaS/PaaS/SaaS等服务能力吗？假如通过边缘计算增强人脸识别能力，边缘计算至少具备PaaS的功能，还需要可能具有一些视频转码的功能就是SaaS，有可能需要DaaS（数据即服务）的功能，边缘计算是不是都这么全？到底需要有几层，值得研究。</p><p>NO6：边缘计算需要同时具备接入、转发和控制云能力吗？如果说边缘计算是放在CU，它要集中管理好多DU，是否也应该具有控制云的能力？</p><p>NO7：MEC应该与网络切片结合吗？网络切片是5G最基本的一个特征，边缘计算要不要结合？</p><p>NO8：位于C-RAN的MEC需要按业务来配置吗？不同的边缘计算对应不同的应用，有对应移动大数据，有对应大连接的，还有对应社会与互联网数据的。在这种情况下，边缘计算是按业务来配置的，将来的边缘计算也是这样吗？</p><p>NO9：MEC是独立设置还是应与其他功能集成？基站的边缘计算首先进行大数据的收集采集，同时实现加密，在对大数据进行消化后，它回送网络数据链应该是减少的，也就意味着对数据过滤，为了过滤，它可能需要缓存，所以，边缘计算会跟缓存数据采集，数据分析，过滤，计算能力集中在一起，边缘计算绝不是单一的计算能力。</p><p>NO10：MEC的功能需要软件定义吗？MEC可仿照NFV实现软件定义，允许跨过多厂家的MEC平台有效与无缝集成来自厂商、服务提供商和第三方的应用，MEC的功能会开放吗？如果开放就要有接入权限管理。</p><p>邬贺铨还说，他对MEC的思考还不止这些，但他希望能看到答案。目前，对于边缘计算的发展思路，仍然没有到完全清晰的时刻，仍然等待各大企业对于边缘计算技术的进一步研究。</p><h3 id="4-2工业互联网边缘智能的关键技术"><a href="#4-2工业互联网边缘智能的关键技术" class="headerlink" title="4.2工业互联网边缘智能的关键技术"></a>4.2工业互联网边缘智能的关键技术</h3><ol><li>协同计算</li></ol><p>协同计算方案一般按参与计算的主体分类（见图 2），包括由云计算中心、边缘节点协同的云边协同，由边缘控制器、网关、边缘云等多种边缘设备协同的边边协同。目前工业界探索较多的是云端–边缘协同计算，按各自承担的计算任务进一步划分为预测–训练云边协同、云导向的云边协同、边缘导向的云边协同 [10]。边边协同计算是新兴的研究方向，相较于云边协同，在进一步保护用户隐私数据的同时，又避免“数据孤岛”现象 [8]。</p><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251308791.png" alt="29897dcba1f944e7bf4c570a0f7e89fc"></p><p>图 2 边云协同计算、边边协同计算示意图</p><p>注：EC 表示边缘计算。</p><p>在训练–预测云边协同中，云计算中心汇聚边缘设备的上传数据，对 AI 模型进行集中训练和更新；边缘设备承担数据入口、推理结果出口的任务，应用于视频检测、设备工况预测等方向，获得成熟的框架支持 [11]。在云导向的云边协同中，云计算中心除了负责模型的训练和更新，还承担一部分模型推理的计算任务；需要对模型选取合适的切割点，平衡计算和通信开销，如 Kang 等 [11] 提出基于 DNN 模型各层的时延估计来确定满足目标的最佳模型分割点。在边缘导向的云边协同中，边缘设备除了承担模型推理和数据收集任务，还承担在本地或近邻设备上训练和更新模型的任务。</p><p>边缘–边缘协同计算是当前协同计算的研究热点，如 McMahan 等 [12] 提出的联邦学习综合考虑了隐私性、服务质量、通信开销等多种因素，不直接上传在边缘收集到的数据，而在本地训练后向云端上传更新的参数。自治学习则更为关注边缘节点用户的定制化需求，通过数据增强、运行时缓存、模型压缩等机制，使训练任务分配到资源受限的边缘或终端设备，据此完成所有与隐私数据相关的计算并提高隐私保护能力 [9]。</p><ol><li>资源隔离</li></ol><p>边缘智能的稳健发展离不开资源隔离技术。隔离技术通过对计算、存储、网络等资源的统一管理，避免了单一程序的崩溃可能对整个系统稳定性的影响，从而保证服务的质量与可靠性。海量的物料、半成品、终端、边缘设备的参与，使工业互联网场景变得极为复杂：在流水线生产中，生产控制任务和设备状态监控任务一旦相互干扰，可能导致整条生产线停工；在汽车配件定制化生产中，配件制造跟踪数据的传输将显著增加用户隐私、核心技术参数泄露的可能性。</p><p>虚拟机（VM）技术的发展开启了云计算时代，但基于 VM 的虚拟化技术不够轻量，通常启动一台虚拟机需要数分钟的时间，不能满足边缘场景的实时性要求。容器（Docker）作为下一代虚拟化技术，对启动开销进行了重大改进，支持应用程序在基于操作系统的虚拟化隔离环境中运行；通过分层镜像，打包和分发应用只需毫秒级时延，额外资源开销很小，成为边缘系统中实现隔离的首选 [8]。目前，以 Docker 为主的容器技术、以 Kubernates 为主的容器编排技术已较为成熟 [13]，EdgeX Foundry、Azure IoT Edge、KubeEdge 等边缘计算架构都纳入了容器封装功能。在场景复杂、资源受限、开发工具和语言多样的工业互联网边缘场景下，通过容器技术封装工作负载具有良好的可行性。</p><ol><li>安全传输与隐私保护</li></ol><p>制造企业得益于工业互联网平台带来的生产高效化、决策智能化的同时，也面临着数据泄露、机密暴露、内部网络安全性下降等威胁。工业互联网平台的边缘节点和云数据中心的安全性都是值得关注的问题。</p><p>当前，主流的工业互联网平台依旧通过租用公有云、搭建私有云或综合两者使用混合云的方式来存储持久化数据 [14]。然而，云端数据中心并不可信，传统数据中心可能遭遇的问题在工业互联网场景下会带来更严重的后果；一旦云服务提供商不当操作造成数据泄露，相关的制造企业及其上下游企业都可能利益受损。为了保证数据安全，研究者提出在云端以密文形式存储用户数据，如 Rivest 等 [15] 提出的同态加密算法允许直接对密文进行特定的代数运算（见图 3），使密文运算得到的加密结果在解密后与明文进行相同运算的结果具有一致性，这为传输和处理用户数据都提供了保障。已有研究工作 [16] 探究了将同态加密算法应用到一些机器学习算法（如决策树、支持向量机）的训练过程，如 Nandakumar 等 [17] 进一步将同态加密应用到深度学习，但该方案不支持卷积层运算，在训练效率和模型精度方面都不尽如人意。</p><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251308291.png" alt="e4b7aea1f9234748bc2904a646c0eb96"></p><p>图 3 基于同态加密的端到端加密计算示意图</p><p>由于依托的硬件资源遍布在网络连接的路径上，边缘智能天然具备分布式特征 [8]，与分布式存储方案相辅相成。相较于集中式存储，分布式存储能有效缓解工业设备采集数据传输带来的带宽压力大、响应实时性差、传输能耗大、数据安全性下降等问题。目前应用较广的分布式存储协议是星际文件系统（IPFS），其本质是为分布式持久化存储和文件共享发展网络传输协议 [18]。当用户请求数据时，IPFS 系统基于搜索内容而非传统的基于域名来确定数据的存储节点，从分布式节点而非数据中心上获取数据，从而节省近 60% 的带宽并提高传输安全性。为了像传统云服务一样形成固定的盈利方式，IPFS 协议下的 Filecoin 项目新建了激励机制，服务提供方和服务使用方基于 Filecoin 代币对检索和存储服务进行交易，从而形成稳定的计费方式，促进分布式存储和边缘计算的进一步发展。</p><blockquote><p>安全<br>这里引入了同态加密<br>作为人工智能，分布式计算，边缘计算的安全研究最新领域<br>加入对抗网络让计算更安全</p></blockquote><h3 id="4-3-工业互联网边缘智能的应用"><a href="#4-3-工业互联网边缘智能的应用" class="headerlink" title="4.3 工业互联网边缘智能的应用"></a>4.3 工业互联网边缘智能的应用</h3><p>随着工业互联网产业的发展，边缘智能与实际应用深度融合。工业互联网的功能已经从数据的统一接入管理，朝着智能化分析和决策、工业机理的沉淀集成和创新改进、组件化和图形化分析等方向演进。在芯片、5G、协同计算、容器化、分布式等技术的推动下，出现了如预测性维护、机械臂控制、工业增强现实（AR）等新型应用。这些应用对前文所述的协同计算、隔离技术、隐私保护等的依赖关系如表 1 所示。预测性维护、机械臂控制、工业 AR 都离不开隔离技术的支持，一方面隔离技术能够保证各类智能应用在边缘设备上运行时彼此互不干扰；另一方面，隔离技术提高了对边缘资源的利用和调度效率，使得新兴应用以更低成本实现落地。</p><p>表 1 边缘智能关键技术与典型应用的关系</p><p><img src="%E5%9B%BE%E7%89%87/840801460e6b4a4b9350cd6df7093d43.png" alt="840801460e6b4a4b9350cd6df7093d43"></p><ol><li>高价值设备的预测性维护有效提高设备可用性和经济效益</li></ol><p>设备管理服务，如预测性维护是工业互联网场景下最广泛的需求之一。现代化流水线制造环节的生产设备通常具有非常复杂的零部件结构，一旦某一生产环节出现问题，可能导致整条流水线的生产效率下降，甚至引发停工。边缘智能技术通过对设备运行状态的实时检测，调用基于工业大数据的 AI 模型对生产设备可能的工况状态、潜在的故障模式作出推断，使预测性维护成为了可能。现有的预测性维护如国产边缘智能计算物联网（EC-IoT）方案 [7]，采用边缘网关负责设备联通和数据预处理业务，在本地对实时数据进行预分析，只将与结果相关的少量高价值数据上传到云端；从应用效果看，EC-IoT 帮助生产企业减少了超过 70% 的业务中断事件，使维护和运营成本下降了 50%。现有的预测性维护大都采取了云端训练模型并聚合数据，边缘预处理数据并上传的边云协同方式；但边缘还可利用数据的局部性进行本地增量训练模型等方式来进一步提升性能，同时分布式存储部署到边缘设备来节约云端存储资源和传输数据所需带宽。</p><ol><li>高精度机械臂使“机器取代人力”成为现实</li></ol><p>随着人力成本的上升，企业制造的附加值下降；在工业互联网迅速发展的背景下，生产过程的自动化程度不断提高，“以机器取代人力”具有可行性。工业机械臂指通过模拟人手臂、手腕和手功能完成工业制造某些工序的机械装置，已有产品可以执行“硬性加工”任务（如切割、焊接等）[6]。先进计算机视觉技术使得机械臂控制精度达到 0.01 mm， 5G 传输和边缘侧智能计算使得偏差检测、二次规划、姿态调整等步骤的时间延迟满足工业制造需求（&lt; 10 ms）[8]。目前，工业机器人、数控机床部署智能算法已经有初步的落地应用，如 ADMOS 平台通过集成数控机床行业龙头德玛吉森公司提供的应用程序接口（API），将机器学习算法部署至机床软件，实现了基于温度智能计算刀头位移的补偿需求。此外，考虑到单个制造环节往往有多个数据采集点，可以融合边边协同计算，共同完成单项智能业务的计算需求，支持系统执行更精细的任务。</p><ol><li>AI 与工业场景的深度融合催生工业 AR</li></ol><p>工业 AR 是以 AI 算法辅助工业制造为特点的新兴场景。现代高精度机械装备由数量众多的复杂零部件构成，一旦装配过程发生问题，仅靠装配工人的记忆很难独立执行繁琐的装配步骤。集成工业 AR 的辅助眼镜，借助终端和边缘的计算资源在装配过程中智能识别零部件，通过文字、动态影像指导佩戴眼镜的装配工人开展组装；美国波音公司将之应用到飞机生产线上，减少了 50% 的装配错误，将装配耗时降低至原来的 75% [4]。工业 AR 还能应用于远程故障排查，无需资深专家到达现场，而由现场维护人员佩戴 AR 眼镜并与技术专家、专业团队连线，共同完成远程检修。</p><p>边缘智能用于工业互联网场景，在性能改善、减少操作成本和保障数据安全上有一定优势。工业生产常见的状态跟踪、缺陷检测、预测性维护等需求，在近数据源处获得智能处理，可以保证响应的实时性；在边缘处理和存储数据具有多重优势，在现有云模式的数据安全保护方案基础上，结合分布式存储和边缘智能计算将进一步提高隐私数据的安全性。</p><h2 id="5-工业互联网平台"><a href="#5-工业互联网平台" class="headerlink" title="5 工业互联网平台"></a>5 工业互联网平台</h2><h3 id="5-1-工业互联网平台概述"><a href="#5-1-工业互联网平台概述" class="headerlink" title="5.1 工业互联网平台概述"></a>5.1 工业互联网平台概述</h3><p>工业互联网平台是互联网科技发展之下，为实现万物互联和智能制造而搭建起来的一个重要平台，它既是构建工业互联网的基础设施，也是将人、机器和数据连接起来的核心平台。其核心和本质是将设备、生产线、工厂、供应商、产品和客户紧密联系起来。</p><p>业互联网平台包括了数据采集（边缘层）、工业PaaS(平台层)、工业App(应用层)以及IaaS支撑。可快速实现企业产品、生产设备与系统的快速互联互通，通过数据分析、机器学习，协助提升客户部署全面灵活的业务处理能力，帮助企业实现数字化、网络化、智能化发展。</p><p>一个优秀的工业互联网平台，不仅能提供一站式的数字化解决方案，还能根据企业不同特点和需求，提供个性化的服务支撑，对企业制造进行整体优化，为企业决策提供有效数据支撑，在进行大数据收集、分析的同时，还要充分保障数据的安全性。例如徐工信息汉云</p><p>针对大型客户对数据安全、数据归属权的担忧，将提供私有化本地部署，积木式的方案让部署更灵活，并提供优秀的扩展性，同时徐工信息汉云也将提供数据、应用程序、软件开发过程的实时监测、主动防护和告警，捕捉非法入侵，执行安全策略。 </p><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251308261.png" alt="1620329923852016509"></p><p><strong>工业互联网平台四个基本功能</strong></p><p>从工业互联网定义来看，工业互联网平台需要具备四个基本功能。</p><p>一是：需要实现将不同来源和不同结构的数据进行广泛采集；</p><p>二是：需要具备并支撑海量工业数据处理的环境；</p><p>三是：需要基于工业机理和数据科学实现海量数据的深度分析，并实现工业知识的沉淀和复用；</p><p>四是：能够提供开发工具及环境，实现工业APP的开发、测试和部署。</p><p>因此，工业互联网平台体系架构必须能完全实现这四个功能，即涵盖边缘层、IaaS层、工业PaaS层、工业SaaS层以及贯穿上述各层级的安全防护。</p><p>其中，边缘层、平台层、应用层是工业互联网平台的三大核心层级。</p><p><strong>工业互联网平台的四大特征</strong></p><p>2017年工业互联网产业联盟发布的《工业互联网平台白皮书》中，将泛在连接、云化服务、知识积累、应用创新归结为工业互联网平台的四大特征。</p><p>(1)泛在连接。即具备对设备、软件、人员等各类生产要素数据的全面采集能力。</p><p>(2)云化服务。即实现基于云计算架构的海量数据存储、管理和计算。</p><p>(3)知识积累。即能够提供基于工业知识机理的数据分析能力，并实现只是的固化、积累和复用。</p><p>(4)应用创新。能够调用平台功能及资源，提公开放的工业APP开发环境，实现工业APP创新应用。</p><h3 id="5-2-工业互联网平台架构"><a href="#5-2-工业互联网平台架构" class="headerlink" title="5.2 工业互联网平台架构"></a>5.2 工业互联网平台架构</h3><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251308037.png" alt="Snipaste_2021-09-05_10-45-09"></p><p>（二）重点标准化领域和方向1.总体性标准总体性标准主要规范工业互联网的总体性、通用性、指导性标准。包括术语定义、通用需求、体系架构、测试与评估、管理、导则、网络增强演进等标准。其中：</p><p>——术语定义标准用于统一工业互联网主要概念认识，为其他工业互联网相关标准中的术语定义提供依据和支撑。标准主要涉及工业互联网领域下的场景、技术、业务等主要概念分类和汇总、新概念定义、旧术语完善、相近概念之间关系等。</p><p>——通用需求标准主要针对工业互联网在智能化生产、网络化协同、个性化定制、服务化延伸等方面的典型应用场景，给出这些应用场景下的一般能力需求，包括功能、性能、安全、可靠性、管理等需求。</p><p>——体系架构标准用以明确和界定工业互联网的对象、边界、各部分的层级关系和内在联系，包括工业互联网通用分层模型、总体架构、核心功能、不同层级和核心功能之间的关系，以及工业互联网共性能力要求。</p><p>——测试与评估标准用于针对工业互联网技术、产品和系统的测试进行规范，用于对应用领域、应用企业、应用项目的成熟度开展评估，包括测试方法、评估指标、评估方法等。</p><p>——管理标准用于规范工业互联网系统建设及运行、工业互联网企业行为，包括工业互联网系统运行管理、服务管<br>理等方面标准，以及针对企业的管理机制。</p><p>——导则主要针对工业互联网项目或系统涉及的规划、建设、实施、运维等给出指导，如设备智能化改造导则、工<br>厂内部网络互联导则等标准。</p><p>——网络增强演进标准主要针对技术引入和网络改造需求，规范新型网络引入、IPv6 推进、扁平化网络发展等标<br>准。</p><p>2.基础共性标准<br>（1）网络互联标准<br>网络互联标准主要规范网络互联所涉及的关键技术、设备及组网，包括整体网络架构、设备/产品联网、工厂内部网络、工厂外部网络、网络资源管理、网络设备、互联互通等标准。其中：</p><p>——整体网络架构标准主要规范工厂内部不同层级网络互联架构，以及工厂与设计、制造、供应链、用户等产业链各环节之间的互联架构。</p><p>——设备/产品联网标准主要定义设备/产品联网所涉及的功能、接口、通信协议、数据交换、时钟同步等要求。</p><p>——工厂内部网络标准主要包括设备、控制系统、信息系统之间网络互联标准，包括工业无线、工业以太网、工业PON、时间敏感网络、软件定义网络、低功耗无线网络等标准。</p><p>——工厂外部网络标准主要包括工厂外部网络架构，工业虚拟专网（VPN）等标准。</p><p>——网络资源管理标准主要包括工业互联网IPv6 地址管理规划、工业环境的无线频谱规划。</p><p>——网络设备标准主要包括工业网关、工业交换机、芯片及通信模块等标准。</p><p>——互联互通标准主要规范跨不同管理域互通时涉及的标准，包括互联互通架构、互联互通设备及互联互通管理所涉及的相关标准。</p><p>（2）标识解析标准<br>标识解析标准主要包括整体架构标准、编码与存储标准、采集与处理标准、解析标准、数据与交互标准、设备与中间件标准、异构标识互操作标准等。</p><p>——整体架构标准主要规范工业互联网标识解析体系的组网架构和分层模型，定义标识解析所涉及的各种功能主体和信息对象，以及注册、解析、查询、搜索等标识服务应具备的共性能力。</p><p>——编码与存储标准主要规范工业互联网标识的编码方案，包括编码长度、编码格式、分配原则，以及标识编码在条码、二维码、射频标签等各种载体中的具体存储方式。</p><p>——采集与处理标准主要规范工业互联网标识数据的采集方法，包括存储标识的载体设备与可读取标识的识读器设备之间、识读器设备与中间件设备之间、识读器设备/中间件设备与信息服务器之间的通信协议，以及识读器设备/中间件设备对标识数据的过滤、去重等原始数据处理方法。</p><p>——解析标准主要定义工业互联网标识解析系统的架构、实现流程、解析查询数据报文格式、响应数据报文格式、通信协议等。</p><p>——数据与交互标准主要规范工业互联网标识服务所涉及标识的映射记录数据格式、产品信息元数据格式等。</p><p>——设备与中间件标准主要规范工业互联网标识解析服务设备所涉及的功能、接口、协议、同步等要求。</p><p>——异构标识互操作标准主要规范多种不同工业互联网标识解析服务之间的互联互通和互操作的实现方式、交互协议、数据互认等标准。</p><p>（3）平台与支撑标准<br>平台与支撑标准主要包括工业互联网平台标准、边缘计算标准、联网资源接入标准、工业互联网服务标准、应用协议标准、系统互联与集成标准等，其中：</p><p>——工业互联网平台标准包括工业互联网平台通用要求，包括工厂内部和工厂外部工业互联网平台标准，对平台相关的功能、性能、安全、服务运维、数据保护、开放能力等要求进行规范。</p><p>——边缘计算标准包括边缘计算参考架构，边缘计算应用域、数据域、网络域的开放接口与服务标准，边缘计算开放平台、边缘计算网关等设备标准，边缘计算与云计算协同等标准。</p><p>——联网资源接入标准主要规范工业互联网平台对工厂内部各联网要素（如原材料、在制品、设备、产品、工业控制系统、工业IT 系统）以及工厂外部联网要素（如设计、仿真、供应链、工业互联网应用系统等）资源和能力的接入，包括对这些资源和能力的分类、规范化描述、资源调用方式等。</p><p>——工业互联网服务标准主要规范工业互联网平台提供的服务支撑能力，包括服务发布、服务管理等标准。</p><p>——应用协议标准主要规范工厂内各生产设备、工业控制系统和工业IT 系统间的数据集成和传送协议，以及生产设备、工业IT 系统到工厂外云平台间的数据集成和传送协议。</p><p>——系统互联与集成标准主要规范设备、产品、工业控制系统、工业IT 系统、工业互联网应用等之间的互联和互操作，以保证数据在这些要素之间交互，包括集成方式、互操作能力描述、模板规范等标准。</p><h3 id="5-3-工业互联网平台"><a href="#5-3-工业互联网平台" class="headerlink" title="5.3 工业互联网平台"></a>5.3 工业互联网平台</h3><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251308708.jpg" alt="v2-0a485513f5bb21cfb6ebf4e60e06c5d7_1440w"></p><h2 id="6-工业互联网APP"><a href="#6-工业互联网APP" class="headerlink" title="6 工业互联网APP"></a>6 工业互联网APP</h2><h3 id="6-1-工业互联网APP内涵"><a href="#6-1-工业互联网APP内涵" class="headerlink" title="6.1 工业互联网APP内涵"></a>6.1 工业互联网APP内涵</h3><p>工业互联网平台体系架构包括边缘、平台（工业 PaaS）、应用三大核心层级</p><p>边缘层通过大范围、深层次的数据采集，以及异构数据的协议转换与边缘处理，构建工业互联网平台的数据基础<br>工业PAAS平台层，基于通用 PaaS 叠加大数据处理、工业数据分析、工业微服务等创新功能，构建可扩展的开放式云操作系统<br>工业SAAS应用层，形成满足不同行业、不同场景的工业 SaaS 和工业 APP，形成工业互联网平台的最终价值<br>具体的工业APP包含工业产品设计、生产、管理、服务等一系列创新性业务应用</p><p>平台是载体，工业APP是具体价值呈现的方式，终端客户使用的功能都承载在工业APP上</p><p>这种架构的好处是</p><p>随着工业数据、机理、知识的沉淀，传统软件功能的进一步解耦，新型工业 APP 可以基于通用功能的组合集成快速交付，做到传统工业软件功能的碎片化、微服务化和轻量化，进而实现企业按需即插即用相对应的工业软件需求</p><h4 id="6-1-1-工业app定义"><a href="#6-1-1-工业app定义" class="headerlink" title="6.1.1 工业app定义"></a>6.1.1 工业app定义</h4><p>在两化融合的大背景下，随着工业互联网等新技术的出现，企业边界不断模糊，在工业技术软件化理念的推动下，企业需要通过软件化方式积累沉淀工业技术知识以获得创新能力，共享共用需求持续凸显。在此背景下，借鉴消费领域APP的说法，针对工业领域应用提出了工业APP概念。那么，什么是工业APP呢？</p><p>本白皮书集合工业应用方、平台方、工业软件企业、高校与科研机构等多方视角和观点，给出了以下工业APP定义。工业APP是基于松耦合、组件化、可重构、可重用思想，面向特定工业场景，解决具体的工业问题，基于平台的技术引擎、资源、模型和业务组件，将工业机理、技术、知识、算法与最佳工程实践按照系统化组织、模型化表达、可视化交互、场景化应用、生态化演进原则而形成的应用程序，是工业软件发展的一种新形态。</p><p>工业APP所依托的平台，可以是工业互联网平台、公有云或私有云平台，也可以是大型工业软件平台，还可以是通用的操作系统平台（包括用于工业领域的移动端操作系统、通用计算机操作系统、工业操作系统和工业软件操作系统等）。</p><p>工业APP是为了解决特定的具体问题、满足特定的具体需要而将实践证明可行和可信的工业技术知识封装固化后所形成的一种工业应用程序。工业APP只解决具体的工业问题，而不是抽象后的问题。例如，齿轮设计APP只针对某种类型的齿轮设计问题，而不是将齿轮设计抽象成面向一般几何体设计的点、线、面、体、布尔运算等设计问题。而后者是一般工业软件解决的问题。工业APP可以让工业技术经验与知识得到更好的保护与传承、更快地运转、更大规模地应用，从而放大工业技术的效应，推动工业知识的沉淀、复用和重构。</p><p>工业APP是一种特殊的工业应用程序，是可运行的工业技术知识的载体，工业APP中承载了解决特定问题的具体业务场景、流程、数据与数据流、经验、算法、知识等工业技术要素，工业APP承载这些技术要素，每一个工业APP都是一些具体工业技术与知识要素的集合与载体。</p><h4 id="6-1-2-工业APP的典型特征"><a href="#6-1-2-工业APP的典型特征" class="headerlink" title="6.1.2 工业APP的典型特征"></a>6.1.2 工业APP的典型特征</h4><p>工业APP借鉴了消费APP方便灵活的特性，又承载了工业技术软件化的理念，作为工业软件的新形态又具有软件的特性，同时依托平台具有生态化的特征。因此工业APP具有六方面典型特征：</p><ul><li>特定工业技术知识载体；</li><li>面向特定工业场景的特定适应性；</li><li>小轻灵，易操作；</li><li>可解耦/可重构；</li><li>依托平台；</li><li>集群化应用等特征。</li></ul><h3 id="6-2-工业APP外延"><a href="#6-2-工业APP外延" class="headerlink" title="6.2 工业APP外延"></a>6.2 工业APP外延</h3><h4 id="6-2-1-工业APP与消费APP的区别"><a href="#6-2-1-工业APP与消费APP的区别" class="headerlink" title="6.2.1 工业APP与消费APP的区别"></a>6.2.1 工业APP与消费APP的区别</h4><p>工业APP借鉴了消费APP的概念，在单纯APP的特征方面，工业APP在体量小轻灵，易操作、易推广重用等方面充分借鉴了消费APP的特性。但是工业APP与消费APP两者具有明显的区别。</p><p>消费APP是基于信息交换的；但是工业APP是必须有机理的。工业应用有因果关系，这些表达因果关系的工业技术知识常常通过机理模型，经验模型、数据模型等等承载，是企业重要的数据资产和核心价值。消费APP针对个人用户（to C），解决个体的通用需求，多应用在流通、服务等环节，面对非专业用户，提供流通和服务过程中的流程、信息、资金、评价等应用。举例来说，这些非专业用户可能很会买衣服、穿衣服，但不会设计衣服、生产衣服。工业APP针对企业用户（toB），解决工业问题，多应用在工业产品的研发设计、制造、维修服务与企业经营管理等环节，面对专业用户，提供企业产品设计、制造、维修等专业应用。因此，这些专业用户是设计产品、生产产品的。工业APP承载的也是设计、生产产品等专业领域的工业技术知识。工业APP与消费APP也不是完全没有关系，在某些工业领域，如食品工业、服装加工业等，由于产品的最终用户是一般消费者，通常会将面向用户（一般消费者）的消费APP与面向企业的工业APP打通，形成产业链上的应用闭环。简单来说，对于工业APP和消费APP的区别，可以看APP所针对的使用对象是终端消费者还是研发生产经营者，通常前者是消费APP，后者是工业APP。</p><h4 id="6-2-2-工业APP与工业软件的关系"><a href="#6-2-2-工业APP与工业软件的关系" class="headerlink" title="6.2.2 工业APP与工业软件的关系"></a>6.2.2 工业APP与工业软件的关系</h4><p>在工业软件中既包含了传统的工业软件，也包括云化工业软件，还包括工业APP这种新形态的工业软件。工业APP与工业软件是从属关系，两者的关系如图1-4所示。图1-4工业APP与工业软件的关系传统工业软件与工业APP既有区别，两者同时还具有紧密的关系。传统工业软件可以通过云化迁移成为云化工业软件，也可以通过APP化成为工业APP集合。通常情况下，大多数工业APP通常都会依托平台（包括工业互联网平台与云平台）运行，实践中也还有相当一部分工业APP在个人计算机由个人私有，或者依托大型工业软件运行，因此工业APP与云化工业软件有交叉。传统的工业软件不仅可以通过APP化形成工业APP集，工业APP也可以通过多种方式促进传统工业软件的应用，图1-4描述了工业APP从四方面对传统工业的促进作用。</p><h4 id="6-2-3-工业APP与传统工业软件及企业现有信息系统的关系"><a href="#6-2-3-工业APP与传统工业软件及企业现有信息系统的关系" class="headerlink" title="6.2.3 工业APP与传统工业软件及企业现有信息系统的关系"></a>6.2.3 工业APP与传统工业软件及企业现有信息系统的关系</h4><p>工业APP与传统工业软件虽然存在很大区别，但两者既不互斥，也不相互孤立的。工业APP不是要替代传统工业软件或者企业现有的信息系统，两者是可以相互促进。传统的工业软件不仅可以通过APP化形成工业APP集，工业APP也可以通过多种方式促进传统工业软件的应用.知识驱动、简化使用、异构集成、数据挖掘。</p><p>（1）知识驱动传统工业软件高效率执行任务。工业APP作为针对特定工业场景和问题的富集工业技术知识载体，可以以“知识驱动”的方式高效率地驱动传统工业软件完成特定的任务。工业APP与传统工业软件结合，可以进一步丰富、强化和提升传统工业软件的功能和性能。例如，索为的飞行器总体设计APP可以将过去使用传统工业软件完成飞行器总体布局方案的周期从几周大幅度缩短到几天完成。</p><p>（2）简化传统工业软件使用。工业APP简化传统工业软件的使用过程与步骤，降低传统工业软件使用的技术门槛。例如，索为的舵机设计APP，采用统一的工作环境，以拨叉的结构设计和有限元分析为例，可以将结构建模的17个步骤与有限元建模16个步骤简化为3步完成；过去传统的软件使用者必须懂得有限元知识。而通过工业APP，一般设计人员在2分钟内就可以完成结构建模和仿真全部工作。</p><p>（3）集成整合异构工业软件。使用工业APP打通和集成企业现有的各种异构工业软件之间的集成与数据传递。工业领域中有大量的工业软件应用于不同的工业应用场景和环节，使用工业APP可以帮助打通不同工业软件的数据与逻辑关系，实现异构工业软件、数据与模型的集成。例如，海尔互联工厂从用户定制下单到设计、生产、然后通过物流发货给用户，并提供后续服务的整个过程，使用了订单处理、CAD/CAE、工厂仿真、APS、MES、MRP、设备监控、WMS、SCM等大量不同的工业软件，不同工业软件之间需要传递订单信息、计划排程信息、成品数据、物料信息、采购信息、物流信息、成品数据、设备状态信息等大量数据与逻辑，通过工业APP实现互联工厂内的横向打通。</p><p>（4）数据挖掘深化工业软件应用效果。使用工业APP对工业软件或产线设备所产生的数据进行深度加工，从而优化业务过程。工业数据已经是企业一项越来越重要的资产，如何处理并利用好这些由工业软件或产线设备所产生的数据，是企业要重点面临的课题。使用工业APP可以完成从数据的获取采集、分析处理、优化决策等多方面应用。例如，用友使用工业APP对采购软件所产生的工业数据进行深度挖掘，帮助用户获得更优的采购业务应用效果。</p><h3 id="6-3工业APP架构"><a href="#6-3工业APP架构" class="headerlink" title="6.3工业APP架构"></a>6.3工业APP架构</h3><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251308786.png" alt="Snipaste_2021-09-05_16-46-18"></p><h3 id="6-4-工业APP开发"><a href="#6-4-工业APP开发" class="headerlink" title="6.4 工业APP开发"></a>6.4 工业APP开发</h3><blockquote><p>软件开发流程<br>偏向简单化，轻便化，图表化方向</p></blockquote><h2 id="7-工业大数据"><a href="#7-工业大数据" class="headerlink" title="7 工业大数据"></a>7 工业大数据</h2><blockquote><p>这个不太懂了，大数据分析吧，这里只写个概述吧，大数据</p></blockquote><h3 id="7-1-定义"><a href="#7-1-定义" class="headerlink" title="7.1 定义"></a>7.1 定义</h3><p>工业大数据是指在工业领域中，围绕典型智能制造模式，从客户需求到销售、订单、计划、研发、设计、工艺、制造、采购、供应、库存、发货和交付、售后服务、运维、报废或回收再制造等整个产品全生命周期各个环节所产生的各类数据及相关技术和应用的总称。其以产品数据为核心，极大延展了传统工业数据范围，同时还包括工业大数据相关技术和应用。其主要来源可分为以下三类：第一类是生产经营相关业务数据。第二类是设备物联数据。第三类是外部数据。</p><p>工业大数据技术是使工业大数据中所蕴含的价值得以挖掘和展现的一系列技术与方法，包括数据规划、采集、预处理、存储、分析挖掘、可视化和智能控制等。工业大数据应用，则是对特定的工业大数据集，集成应用工业大数据系列技术与方法，获得有价值信息的过程。工业大数据技术的研究与突破，其本质目标就是从复杂的数据集中发现新的模式与知识，挖掘得到有价值的新信息，从而促进制造型企业的产品创新、提升经营水平和生产运作效率以及拓展新型商业模式。</p><h3 id="7-2-特征"><a href="#7-2-特征" class="headerlink" title="7.2 特征"></a>7.2 特征</h3><p>工业大数据除具有一般大数据的特征（数据量大、多样、快速和价值密度低）外，还具有时序性、强关联性、准确性、闭环性等特征。</p><p>（1）数据容量大 (Volume)：数据的大小决定所考虑的数据的价值和潜在的信息；工业数据体量比较大，大量机器设备的高频数据和互联网数据持续涌入，大型工业企业的数据集将达到PB级甚至EB级别。</p><p>（2）多样 (Variety)：指数据类型的多样性和来源广泛；工业数据分布广泛，分布于机器设备、工业产品、管理系统、互联网等各个环节；并且结构复杂，既有结构化和半结构化的传感数据，也有非结构化数据。</p><p>（3）快速 (Velocity)：指获得和处理数据的速度。工业数据处理速度需求多样，生产现场级要求时限时间分析达到毫秒级，管理与决策应用需要支持交互式或批量数据分析。</p><p>（4）价值密度低 (Value)：工业大数据更强调用户价值驱动和数据本身的可用性，包括：提升创新能力和生产经营效率，及促进个性化定制、服务化转型等智能制造新模式变革。</p><p>（5）时序性 (Sequence)：工业大数据具有较强的时序性，如订单、设备状态数据等。</p><p>（6）强关联性 (Strong-Relevance)：一方面，产品生命周期同一阶段的数据具有强关联性，如产品零部件组成、工况、设备状态、维修情况、零部件补充采购等；另一方面，产品生命周期的研发设计、生产、服务等不同环节的数据之间需要进行关联。</p><p>（7）准确性 (Accuracy)：主要指数据的真实性、完整性和可靠性，更加关注数据质量，以及处理、分析技术和方法的可靠性。对数据分析的置信度要求较高，仅依靠统计相关性分析不足以支撑故障诊断、预测预警等工业应用，需要将物理模型与数据模型结合，挖掘因果关系。</p><p>（8）闭环性 (Closed-loop)：包括产品全生命周期横向过程中数据链条的封闭和关联，以及智能制造纵向数据采集和处理过程中，需要支撑状态感知、分析、反馈、控制等闭环场景下的动态持续调整和优化。</p><p>由于以上特征，工业大数据作为大数据的一个应用行业，在具有广阔应用前景的同时，对于传统的数据管理技术与数据分析技术也提出了很大的挑战。</p><h3 id="8-3-数据治理"><a href="#8-3-数据治理" class="headerlink" title="8.3 数据治理"></a>8.3 数据治理</h3><p>工业大数据治理是对组织的工业大数据管理和利用进行评估、指导和监督的体系框架。它通过制定战略方针、建立组织架构、明确职责分工等，实现工业大数据的风险可控、安全合规、绩效提升和价值创造，并提供不断创新的大数据服务。</p><p>工业大数据治理对于确保工业大数据的优化、共享和安全是至关重要的。有效的工业大数据治理计划可通过改进决策、缩减成本、降低风险和提高安全合规等方式，将价值回馈于业务，并最终体现为增加收入和利润。工业大数据治理的作用可概括为四点：</p><p>（1）有效的工业大数据治理能够促进工业大数据服务创新和价值制造；</p><p>（2）科学的工业大数据治理框架有助于提升组织的工业大数据管理和决策水平；</p><p>（3）有效的工业大数据治理能够产生高质量的数据，增强数据可信度，降低成本；</p><p>（4）有效的工业大数据治理有助于提高合规监管和安全控制，并降低风险。</p><h2 id="8-工业互联网安全"><a href="#8-工业互联网安全" class="headerlink" title="8 工业互联网安全"></a>8 工业互联网安全</h2><blockquote><p>安全手段</p><ol><li>数字信任及身份安全产品体系</li></ol><ul><li>泛身份安全<ul><li>统一身份认证与访问管理系统</li><li>零信任身份安全产品</li><li>堡垒机</li><li>SIM卡型U盾</li><li>互联网接入认证系统</li><li>上网日志留存及数据分析系统</li></ul></li><li>数据安全<ul><li>大数据安全管控系统</li><li>亚信数据脱敏系统</li><li>数据安全治理平台</li><li>数据资产地图</li></ul></li></ul><ol><li>端点安全产品体系</li></ol><ul><li>云及边缘安全<ul><li>服务器深度安全防护系统</li><li>云手机安全</li><li>云安全管理平台</li></ul></li><li>泛终端安全<ul><li>终端安全防护平台</li><li>终端安全管理系统</li><li>高级威胁终端检测及响应系统</li><li>工控安全便携系统</li></ul></li><li>高级威胁治理<ul><li>高级威胁网络防护系统</li><li>深度威胁邮件网关</li><li>深度威胁发现设备</li><li>深度威胁分析设备</li></ul></li><li>边界安全<ul><li>网络流量分析系统</li><li>防火墙系统</li><li>工业流量审计系统</li></ul></li></ul><ol><li>云网边安全产品体系</li></ol><ul><li>大数据分析及安全管理<ul><li>安全运营与态势感知平台</li><li>日志审计系统</li><li>安全中台</li><li>安全管理平台</li></ul></li><li>5G云网边管理<ul><li>域名解析及网络准入系统</li><li>云DNS防护</li><li>工业互联网标识解析防护</li><li>IP综合网管系统</li><li>终端设备管理系统</li><li>综合监控系统</li><li>融合感知分析系统</li></ul></li></ul><ol><li>网络安全服务体系</li></ol><ul><li>公司提供全面的网络安全服务，包括威胁情报、高级威胁研究、红蓝对抗、攻防渗透、互联网资产弱点分析、风险评估和安全培训服务等多项业务，通过这些服务，能够有效提高客户的安全意识，增强客户抵御网络安全威胁的能力。</li></ul><h4 id="4-5-3-网络安全行业热点"><a href="#4-5-3-网络安全行业热点" class="headerlink" title="4.5.3 网络安全行业热点"></a>4.5.3 网络安全行业热点</h4><ol><li>托管安全服务(MSS)—成为智慧城市网络安全建设必备</li></ol><p>安全托管服务（Managed Security Service, MSS）为您提供持续、高效的安全监控和运营管理服务。通过该服务，能够快速响应主机、网络、应用、数据等安全产品的各类安全风险事件，利用安全编排自动化与响应技术进行智能分类和高效运营处置，并针对云资产进行持续风险监视和泄露监控等，同时提供应急值守团队进行入侵事件分析及应急保障，提升用户运营效率。</p><ol><li>零信任思想—网络安全体系建设</li></ol><p>零信任是一个基于严格身份验证过程的安全模型网络。此确保只有通过身份验证和授权的用户与设备才能访问安全网络、应用程序和数据。同时，它也可以保护这些应用程序和使用者避免在网络交流受到伤害。</p><ol><li>数据安全—成为安全建设重中之重</li></ol><p>数据安全是未来网络空间安全领域重点关注方向。以数据为中心的安全防护，包括机密性、完整性、可用性、抗抵赖等的实现，通常需要采用多项技术实现。因此数据安全防护技术特点是细分领域繁多，界限并非十分明显。</p><ol><li>AI融入安全产品—成为提升检测防御能力的关键</li></ol><p>融入AI技术的新一代防火墙整体防御思路已经发生了巨大变化，由原先的“单兵防守”变为与多方“联合防御”。AI平台的持续训练确保新一代防火墙具备最新的AI检测模型，未来AI平台将形成远程与本地化部署相结合的模式，确保AI训练以客户真实的应用场景为基础，最终训练出更为有效的AI检测模型。而新一代防火墙同时也会结合威胁情报、策略管理、EDR等外部的安全组件，对网络攻击进行更为高效精准的识别与阻断。</p><ol><li>云安全—持续稳定升温</li></ol><p>云安全是指保护基于云的应用程序、数据和虚拟基础架构的完整性的做法。该术语适用于所有云部署模型（公共云、私有云、混合云、多云）以及所有类型的基于云的服务和按需解决方案（IaaS、PaaS、SaaS）。一般而言，对于基于云的服务，云提供商负责保护底层基础架构，而客户则负责保护云中的应用程序和数据。</p><ol><li>工业互联网安全—方兴未艾</li></ol><p>工业互联网安全需要统筹考虑信息安全、功能安全与物理安全，聚焦信息安全，主要解决工业互联网面临的网络攻击等新型风险，并考虑其信息安全防护措施的部署可能对功能安全和物理安全带来的影响。</p></blockquote><h3 id="8-1-概述"><a href="#8-1-概述" class="headerlink" title="8.1 概述"></a>8.1 概述</h3><p>当前，工业系统安全保障体系建设已较为完备，伴随新一代信息通信技术与工业经济的深度融合，工业互联网步入深耕落地阶段，工业互联网安全保障体系建设的重要性越发凸现。世界各主要发达国家均高度重视工业互联网的发展，并将安全放在了突出位置，发布了一系列指导文件和规范指南，为工业互联网相关企业部署安全防护提供了可借鉴的模式，从一定程度上保障了工业互联网的健康有序发展，但随着工业互联网安全攻击日益呈现出的新型化、多样化、复杂化等特点，现有的工业互联网安全保障体系还不够完善，暴露出一些问题，总结如下：</p><p>（一）数据隐私和数据安全防护缺乏有效手段工业互联网平台采集、存储和利用的数据资源存在数据体量大、种类多、关联性强、价值分布不均等特点，数据隐私与安全的主要关注点如下：一是数据包含了敏感或个人隐私信息，因此数据在价值挖掘使用和发布的场景中可能会给个人、第三方和国家带来危害和损失，因此对隐私和重要数据的处理、使用、操作和发布、交流等生产流通环节都有安全与合规的要求；二是数据需要多方的多维度融合才能创造价值，但往往每方都有自己数据的产权保护、个人数据和重要数据的合规责任，因此需要更安全的数据融合环境；三是生产数据的每个环节需要相应的安全控制。工业互联网需要健康、稳定的发展，首要的是要解决企业对数据和隐私的担忧。</p><p>（二）OT与IT融合较慢，人员的安全意识亟需提升工业现场缺乏信息安全专家，对工业系统的信息安全关注度和重视度都不高，信息安全专家在面对生产优先的工业系统往往束手无策、畏手畏脚。大部分工业互联网相关企业重发展轻安全，对网络安全风险认识不足。此外，很多智能工厂内部未部署安全控制器、安全开关、安全光幕、报警装置、防爆产品等，并缺乏针对性的工业生产安全意识培训和操作流程规范，使得人身安全难以得到保证。</p><p>（三）工业信息安全存在先天不足，安全防护能力难以快速提升工控系统和设备在设计之处缺乏安全考虑，自身计算资源和存储空间有限，大部分不能支持复杂的安全防护策略，很难确保系统和设备的安全可靠。同时，当前专业工业信息安全企业和解决方案较少，工业企业风险发现、应急处置等网络安全防护能力普遍较弱。同时，工业生产迭代周期长、安全防护部署滞后、整体水平低、存量设备难以快速进行安全防护升级换代，整体安全防护能力提升时间长。</p><h3 id="8-2-工业互联网安全体系"><a href="#8-2-工业互联网安全体系" class="headerlink" title="8.2 工业互联网安全体系"></a>8.2 工业互联网安全体系</h3><p>我国的工业互联网安全框架是由中国信息通信研究院下设的工业互联网产业联盟提出的，也是从防护对象、防护措施和防护管理三个视角构建，如下图10所示 。针对不同的防护对象部署相应的安全防护措施，根据实时监测结果发现网络中存在的或即将发生的安全问题并及时做出响应。同时加强防护管理，明确基于安全目标的可持续改进的管理方针，从而保障工业互联网的安全。</p><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251309086.png" alt="Snipaste_2021-09-05_18-25-47"></p><p>其中，防护对象视角涵盖设备、控制、网络、应用和数据五大安全重点；防护措施视角包括威胁防护、监测感知和处置恢复三大环节，威胁防护环节针对五大防护对象部署主被动安全防护措施，监测感知和处置恢复环节通过信息共享、监测预警、应急响应等一系列安全措施、机制的部署增强动态安全防护能力；防护管理视角根据工业互联网安全目标对其面临的安全风险进行安全评估，并选择适当的安全策略作为指导、实现防护措施的有效部署。</p><p>工业互联网安全框架的三个防护视角之间相对独立，但彼此之间又相互关联。从防护对象视角来看，安全框架中的每个防护对象，都需要采用一系列合理的防护措施并依据完备的防护管理流程对其进行安全防护；从防护措施视角来看，每一类防护措施都有其适用的防护对象，并在具体防护管理流程指导下发挥作用；从防护管理视角来看，防护管理流程的实现离不开对防护对象的界定，并需要各类防护措施的有机结合使其能够顺利运转。工业互联网安全框架的三个防护视角相辅相成、互为补充，形成一个完整、动态、持续的防护体系。</p><h3 id="8-3-工业互联网安全技术"><a href="#8-3-工业互联网安全技术" class="headerlink" title="8.3 工业互联网安全技术"></a>8.3 工业互联网安全技术</h3><h4 id="8-3-1-关键技术"><a href="#8-3-1-关键技术" class="headerlink" title="8.3.1 关键技术"></a>8.3.1 关键技术</h4><ul><li>区块链技术</li><li>可信计算技术</li><li>人工智能技术</li><li>安全势态感知技术</li><li>异常检测技术</li></ul><h4 id="8-3-2-技术体系"><a href="#8-3-2-技术体系" class="headerlink" title="8.3.2 技术体系"></a>8.3.2 技术体系</h4><ul><li><p>防护构建位置维度</p><ul><li>分层保护体系</li><li>分域保护体系</li><li>内生安全体系</li></ul></li></ul><ul><li>解决方案维度</li></ul><h3 id="8-4-工业互联网安全标准"><a href="#8-4-工业互联网安全标准" class="headerlink" title="8.4 工业互联网安全标准"></a>8.4 工业互联网安全标准</h3><p>工业控制系统安全标准是工业控制系统安全保障体系的重要组成部分，对于各行业企事业单位开展工业控制系统安全防护工作具有促进、规范和指导等多重意义。由于我国工业控制系统安全防护建设整体起步较晚，工业控制系统安全标准亦有明显的滞后。随着近年来以TC  260为主导的标准化组织加快了工业控制系统安全标准制定的进程,我国工业控制系统安全标准体系逐渐步入了“快车道  ”，大量工业控制系统安全标准相继研制。</p><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251309019.png" alt="Snipaste_2021-09-05_18-28-05"></p><p>工业控制系统安全标准体系包括安全等级、安全要求、安全实施和安全测评四类标准。四类标准作为开展工业控制系统信息安全工作的四个阶段，依次形成循环，切实提高工业控制系统的信息安全保障能力。同时，在每类标准的基础上，可按照标准所涉及的主要内容进行细分。</p><p>（1）安全等级类标准TC  260于2018年6月发布了GB/T  36324-2018《信息安全技术工业控制系统信息安全分级规范》（以下简称《分级规范》）标准，标准规定了基于风险评估的工业控制系统信息安全等级划分规则和定级方法，提出了等级划分模型和定级要素，包括工业控制系统资产重要程度、存在的潜在风险影响程度和需抵御的信息安全威胁程度，并明确了各个等级工业控制系统所具备的潜在风险影响、信息安全威胁、信息安全能力和信息安全管理方面的特征。</p><p>（2）安全要求类标准针对工业控制系统信息安全实际情况，分别从基本管理要求、基本技术要求和基本运维要求三个方面对工业控制系统的信息安全提出安全要求。同时，在上述三类基本要求基础上，也针对具体产品和技术提出安全防护要求，如工业控制系统终端安全要求、漏洞检测技术要求、网络监测安全技术要求和测试评价方法、网络审计产品安全技术要求等。2019年8月，GB/T 37933-2019《信息安全技术工业控制系统专用防火墙技术要求》正式发布，标准为工控防火墙制造商提供了详细的功能要求、开发要求和性能指标，同时为第三方产品检测单位、用户企业提供了对工控防火墙产品的功能、性能评价指标，对于国内工控防火墙产品市场能够起到良好的规范效应。</p><p>（3）安全实施类标准安全实施类标准主要为工业控制系统信息安全实施提出安全指导。目前，安全实施类的指南和标准包括《工业控制系统信息安全防护指南》、GB/T 32919-2016《信息安全技术工业控制系统安全控制应用指南》、GB/T 36466-2018《信息安全技术工业控制系统风险评估实施指南》和20173583-T -469《信息安全技术工业控制系统信息安全防护建设实施规范》，上述几项标准的介绍已在本报告的3.2.1章节标准现状分析中进行阐述。</p><p>（4）安全测评类标准制定工业控制系统相关产品测评以及安全能力评估等第三方测评与服务类标准，确保信息安全控制措施的科学性和有效性，根据风险评估和测评结果及时调整信息安全策略，助力工业企业提升信息安全防护能力。产品安全检测方面：目前在制定的标准包括《信息安全技术可编程逻辑控制器（PLC）安全技术要去和测试评价方法》（征求意见稿）、《信息安全技术工业互联网平台安全要求及评估规范》（征求意见稿）等；系统安全评估方面：目前已发布的标准包括GB/T 37980-2019《信息安全技术工业控制系统安全检查指南》、GB/T 30976.1-2014《工业控制系统信息安全第1部分：评估规范》、GB/T 30976.2-2014《工业控制系统信息安全第2部分：验收规范》等。</p><h2 id="9-工业互联网核心技术"><a href="#9-工业互联网核心技术" class="headerlink" title="9 工业互联网核心技术"></a>9 工业互联网核心技术</h2><p>&gt;</p><blockquote><p>这里不多介绍，（）<br>有机会补存，这些东西也只是泛泛了解</p></blockquote><h3 id="9-1-人工智能"><a href="#9-1-人工智能" class="headerlink" title="9.1 人工智能"></a>9.1 人工智能</h3><p><strong>人工智能</strong>（英语：artificial intelligence，缩写为<strong>AI</strong>）亦称<strong>智械</strong>、<strong>机器智能</strong>，指由人制造出来的机器所表现出来的智能。通常人工智能是指通过普通计算机程序来呈现人类智能的技术。该词也指出研究这样的智能系统是否能够實現，以及如何實現。同时，通过<a href="https://zh.wikipedia.org/wiki/醫學">医学</a>、<a href="https://zh.wikipedia.org/wiki/神經科學">神经科学</a>、<a href="https://zh.wikipedia.org/wiki/机器人学">机器人学</a>及<a href="https://zh.wikipedia.org/wiki/統計學">统计学</a>等的进步，常态预测则认为人类的很多职业也逐渐被其取代。</p><p>人工智能于一般教材中的定义领域是“智能主体（intelligent agent）的研究与设计”<a href="https://zh.wikipedia.org/wiki/人工智能#cite_note-Definition_of_AI-3">[3]</a>，智能主体指一个可以观察周遭环境并作出行动以达致目标的系统<a href="https://zh.wikipedia.org/wiki/人工智能#cite_note-Intelligent_agents-4">[4]</a>。<a href="https://zh.wikipedia.org/wiki/约翰·麦卡锡">约翰·麦卡锡</a>于1955年的定义是<a href="https://zh.wikipedia.org/wiki/人工智能#cite_note-Coining_of_the_term_AI-5">[5]</a>“制造智能机器的科学与工程”<a href="https://zh.wikipedia.org/wiki/人工智能#cite_note-McCarthy's_definition_of_AI-6">[6]</a>。<a href="https://zh.wikipedia.org/wiki/安德烈亚斯·卡普兰">安德烈亚斯·卡普兰</a>（Andreas Kaplan）和迈克尔·海恩莱因（Michael Haenlein）将人工智能定义为“系统正确解释外部数据，从这些数据中学习，并利用这些知识通过灵活适应实现特定目标和任务的能力”。<a href="https://zh.wikipedia.org/wiki/人工智能#cite_note-7">[7]</a> 人工智能可以定义为模仿人类与人类思维相关的认知功能的机器或计算机，如学习和解决问题。人工智能是计算机科学的一个分支，它感知其环境并采取行动，最大限度地提高其成功机会。此外，人工智能能够从过去的经验中学习，做出合理的决策，并快速回应。因此，人工智能研究人员的科学目标是通过构建具有象征意义的推理或推理的计算机程序来理解智能。人工智能的四个主要组成部分是：</p><ul><li>专家系统：作为专家处理正在审查的情况，并产生预期或预期的绩效。</li><li>启发式问题解决：包括评估小范围的解决方案，并可能涉及一些猜测，以找到接近最佳的解决方案。</li><li>自然语言处理：在自然语言中實現人机之间的交流。</li><li>计算机视觉：自动生成识别形状和功能的能力 <a href="https://zh.wikipedia.org/wiki/人工智能#cite_note-8">[8]</a>。</li></ul><p>人工智能的研究是高度技术性和专业的，各分支领域都是深入且各不相通的，因而涉及范围极广<a href="https://zh.wikipedia.org/wiki/人工智能#cite_note-Fragmentation_of_AI-9">[9]</a>。人工智能的研究可以分为几个技术问题。其分支领域主要集中在解决具体问题，其中之一是，如何使用各种不同的工具完成特定的应用程序。</p><p>AI的核心问题包括建构能够跟人类似甚至超卓的推理、知识、规划、学习、交流、感知、移物、使用工具和操控机械的能力等<a href="https://zh.wikipedia.org/wiki/人工智能#cite_note-Problems_of_AI-10">[10]</a>。人工智能目前仍然是该领域的长远目标<a href="https://zh.wikipedia.org/wiki/人工智能#cite_note-General_intelligence-11">[11]</a>。目前弱人工智能已经有初步成果，甚至在一些影像识别、语言分析、棋类游戏等等单方面的能力达到了超越人类的水平，而且人工智能的通用性代表着，能解决上述的问题的是一样的AI程序，无须重新开发算法就可以直接使用现有的AI完成任务，与人类的处理能力相同，但达到具备思考能力的统合强人工智能还需要时间研究，比较流行的方法包括统计方法，计算智能和传统意义的AI。目前有大量的工具应用了人工智能，其中包括搜索和数学优化、逻辑推演。而基于<a href="https://zh.wikipedia.org/wiki/仿生學">仿生学</a>、<a href="https://zh.wikipedia.org/wiki/認知心理學">认知心理学</a>，以及基于概率论和经济学的算法等等也在逐步探索当中。</p><h3 id="9-2-区块链"><a href="#9-2-区块链" class="headerlink" title="9.2 区块链"></a>9.2 区块链</h3><p><strong>区块链</strong>（英语：blockchain<a href="https://zh.wikipedia.org/wiki/区块链#cite_note-te20151031-1">[1]</a><a href="https://zh.wikipedia.org/wiki/区块链#cite_note-fortune20160515-2">[2]</a><a href="https://zh.wikipedia.org/wiki/区块链#cite_note-nyt20160521-3">[3]</a>或block chain<a href="https://zh.wikipedia.org/wiki/区块链#cite_note-primer-4">[4]</a><a href="https://zh.wikipedia.org/wiki/区块链#cite_note-obmh-5">[5]</a>）是借由<a href="https://zh.wikipedia.org/wiki/密碼學">密码学</a><a href="https://zh.wikipedia.org/wiki/区块链#cite_note-te20151031-1">[1]</a><a href="https://zh.wikipedia.org/wiki/区块链#cite_note-cryptocurrencytech-6">[6]</a>串接并保护内容的串连文字<a href="https://zh.wikipedia.org/wiki/记录">记录</a>（又称区块）。</p><p>每一个区块包含了前一个区块的<a href="https://zh.wikipedia.org/wiki/密碼雜湊函數">加密散列</a>、相应时间戳记以及交易资料（通常用<a href="https://zh.wikipedia.org/wiki/哈希树">默克尔树</a>（Merkle tree）算法计算的散列值表示）<a href="https://zh.wikipedia.org/wiki/区块链#cite_note-IPblockchain-7">[7]</a>，这样的设计使得区块内容具有难以篡改的特性。用区块链技术所串接的分布式账本能让两方有效记录交易，且可永久查验此交易。</p><h3 id="9-3-5G"><a href="#9-3-5G" class="headerlink" title="9.3 5G"></a>9.3 5G</h3><p><strong>第五代移动通信技术</strong>（英语：5th generation mobile networks或5th generation wireless systems，简称<strong>5G</strong>）是最新一代<a href="https://zh.wikipedia.org/wiki/移动电话网络">移动通信</a>技术，为<a href="https://zh.wikipedia.org/wiki/4G">4G</a>（<a href="https://zh.wikipedia.org/wiki/進階長期演進技術">LTE-A</a>、<a href="https://zh.wikipedia.org/wiki/IEEE_802.16">WiMAX-A</a>）系统后的延伸。5G的性能目标是高<a href="https://zh.wikipedia.org/wiki/数据">数据</a>速率、减少<a href="https://zh.wikipedia.org/wiki/延迟_(工程学">延迟</a>)、节省能源、降低成本、提高系统容量和大规模设备连接。Release-15中的5G规范的第一阶段是为了适应早期的商业部署。Release-16的第二阶段于2020年4月完成，作为IMT-2020技术的候选提交给<a href="https://zh.wikipedia.org/wiki/国际电信联盟">国际电信联盟</a>（ITU）。<a href="https://zh.wikipedia.org/wiki/5G#cite_note-1">[1]</a></p><p>ITU IMT-2020规范要求速度高达20 <a href="https://zh.wikipedia.org/wiki/码率单位">Gbit/s</a>，可以实现宽通道带宽和大容量<a href="https://zh.wikipedia.org/wiki/MIMO">MIMO</a>。<a href="https://zh.wikipedia.org/wiki/5G#cite_note-2">[2]</a>第三代合作伙伴计划（<a href="https://zh.wikipedia.org/wiki/3GPP">3GPP</a>）将提交<a href="https://zh.wikipedia.org/wiki/5G_NR">5G NR</a>（新无线电）作为其5G通信标准提案。5G NR可包括低频（FR1），低于6 GHz和更高频率（FR2），高于24 GHz和<a href="https://zh.wikipedia.org/wiki/極高頻">毫米波</a>范围。在早期发展时，在4G硬件（非独立）上使用5G NR软件的速度和延迟相较新一代4G系统只拥有约25％到50％的改善幅度。<a href="https://zh.wikipedia.org/wiki/5G#cite_note-3">[3]</a><a href="https://zh.wikipedia.org/wiki/5G#cite_note-4">[4]</a><a href="https://zh.wikipedia.org/wiki/5G#cite_note-:0-5">[5]</a>独立eMBB部署的仿真显示，在FR1范围内，吞吐量提高了2.5倍，在FR2范围内提高了近20倍。<a href="https://zh.wikipedia.org/wiki/5G#cite_note-6">[6]</a></p><h3 id="9-4-数字孪生"><a href="#9-4-数字孪生" class="headerlink" title="9.4 数字孪生"></a>9.4 数字孪生</h3><p>数字映射（Digital twin），或译作数字孪生、数字分身，指在信息化平台内模拟物理实体、流程或者系统，类似实体系统在信息化平台中的双胞胎。借助于数字映射，可以在信息化平台上了解物理实体的状态，甚至可以对物理实体里面预定义的接口组件进行控制。</p><p>数字映射是物联网里面的概念，它指通过集成物理反馈数据，并辅以人工智能、机器学习和软件分析，在信息化平台内创建一个数字化模拟。这个模拟会根据反馈，随着物理实体的变化而自动做出相应的变化。理想状态下，数字映射可以根据多重的反馈源数据进行自我学习，从而几乎实时地在数字世界里呈现物理实体的真实状况。数字映射的反馈源主要依赖于各种传感器，如压力、角度、速度传感器等。数字映射的自我学习（或称机器学习）除了可以依赖于传感器的反馈信息，也可以是通过历史数据，或者是集成网络的数据学习。后者常指多个同批量的物理实体同时进行不同的操作，并将数据反馈到同一个信息化平台，数字映射根据海量的信息反馈，进行迅速的深度学习和精确模拟。</p><blockquote><p>数字孪生应该是工业互联网必不可少的一部分<br>参考日本动漫电影”你好世界”，里面的就是数字孪生，用数字化来模拟现实，推理预测，用现实中数据构建数字孪生，数字孪生来推测指导现实</p></blockquote><h2 id="10-感悟"><a href="#10-感悟" class="headerlink" title="10 感悟"></a>10 感悟</h2>]]></content>
      
      
      <categories>
          
          <category> 工业互联网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息安全 </tag>
            
            <tag> 工业互联网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数论复习</title>
      <link href="/2022/04/01/2022-4-1-shu-lun/"/>
      <url>/2022/04/01/2022-4-1-shu-lun/</url>
      
        <content type="html"><![CDATA[<h1 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h1><h2 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h2><h3 id="整除"><a href="#整除" class="headerlink" title="整除"></a>整除</h3><ul><li><p>定义</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251317037.png" alt=""></li></ul></li><li><p>性质</p><ul><li><p>特性</p><ul><li>(1）当b遍历整数a的所有因数时，－b 也遍历整数a的所有因数</li><li>（2）当b遍历整数 a的所有因数时，a/b 也遍历整数a的所有因数</li><li>(3) 0是任何非零整数的倍数．</li><li>(4) 1是任何整数的因数</li><li>(5) 任何非零整数α 是其自身的倍数,也是其自身的因数</li></ul></li><li><p>传递性</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251317163.png" alt=""></li></ul></li><li><p>加减保持性</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251317616.png" alt=""></li></ul></li><li><p>线性组合性</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251317004.png" alt=""></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251317095.png" alt=""></li></ul></li><li><p>互逆</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251317770.png" alt=""></li></ul></li></ul></li></ul><h3 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h3><ul><li><p>定义</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251317819.png" alt=""></li></ul></li><li><p>筛选法</p><ul><li><p>Eratoshenes筛法引理</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251317276.png" alt=""></li></ul></li><li><p>Eratoshenes筛法</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251317206.png" alt=""></li></ul></li></ul></li><li><p>性质</p><ul><li><p>无穷性</p><ul><li>素数有无穷多个</li></ul></li></ul></li></ul><h3 id="欧几里得除法"><a href="#欧几里得除法" class="headerlink" title="欧几里得除法"></a>欧几里得除法</h3><ul><li><p>定义</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251317760.png" alt=""></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251317059.png" alt=""></li><li><p>补充</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251318023.png" alt=""></li></ul></li></ul></li><li><p>素数平凡判别法</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251318309.png" alt=""></li></ul></li><li><p>一般余数定义</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251318946.png" alt=""></li><li><p>延拓余数形式</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251318841.png" alt=""></li><li><p>例题</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251318826.png" alt=""></li></ul></li></ul></li></ul></li></ul><h3 id="整数的表示（多项式）"><a href="#整数的表示（多项式）" class="headerlink" title="整数的表示（多项式）"></a>整数的表示（多项式）</h3><ul><li><p>b进制表示（多项式形式）</p><ul><li><p>定义</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251318954.png" alt=""></li><li><p>详细</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251318070.png" alt=""></li></ul></li></ul></li><li><p>转换</p><ul><li>这里不多介绍，除取余法</li></ul></li><li><p>运算（多项式类似）</p><ul><li>加法</li><li>减法</li><li>乘法</li><li>除法（欧式空间下除法）</li></ul></li></ul></li><li><p>复杂度（极限下无穷量）</p><ul><li><p>大O符号</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251318690.png" alt=""></li></ul></li><li><p>小o符号</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251318150.png" alt=""></li></ul></li><li><p>运算</p><ul><li><p>加法</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251318074.png" alt=""></li></ul></li><li><p>减法</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251318911.png" alt=""></li></ul></li><li><p>乘法</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251318438.png" alt=""></li></ul></li><li><p>除法</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251318950.png" alt=""></li></ul></li></ul></li></ul></li></ul><h3 id="最大公因数"><a href="#最大公因数" class="headerlink" title="最大公因数"></a>最大公因数</h3><ul><li><p>定义</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251318083.png" alt=""></li><li><p>补充</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251318879.png" alt=""></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251318952.png" alt=""></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251318029.png" alt=""></li></ul></li></ul></li><li><p>性质</p><ul><li><p>相等</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251319806.png" alt=""></li></ul></li><li><p>0性</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251319494.png" alt=""></li></ul></li><li><p>欧几里得除法引理</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251319691.png" alt=""></li></ul></li></ul></li></ul><h3 id="广义欧几里得除法"><a href="#广义欧几里得除法" class="headerlink" title="广义欧几里得除法"></a>广义欧几里得除法</h3><ul><li><p>定义（辗转相除法）</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251319949.png" alt=""></li><li><p>例如</p><ul><li><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251319973.png" alt=""></p><ul><li>绝对值最小余数可以快速下降化解</li></ul></li></ul></li></ul></li><li><p>性质</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251319808.png" alt=""></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251319175.png" alt=""></li></ul></li><li><p>贝祖等式</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251319217.png" alt=""></li><li><p>例如</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251319318.png" alt=""></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251319752.png" alt=""></li></ul></li></ul></li><li><p>证明</p><ul><li><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251319052.png" alt=""></p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251320790.png" alt=""></li></ul></li><li><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251320821.png" alt=""></p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251320395.png" alt=""></li></ul></li><li><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251320268.png" alt=""></p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251320469.png" alt=""></li></ul></li></ul></li><li><p>应用</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251325019.png" alt=""></li></ul></li></ul><h3 id="最大公因数-1"><a href="#最大公因数-1" class="headerlink" title="最大公因数"></a>最大公因数</h3><ul><li><p>互素定义</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251325574.png" alt=""></li></ul></li><li><p>最大公因数定义</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251325400.png" alt=""></li></ul></li><li><p>推论</p><ul><li><p>素数构造</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251325076.png" alt=""></li></ul></li><li><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251325314.png" alt=""></p></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251325780.png" alt=""></li><li><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251325508.png" alt=""></p><ul><li>可以写成行列式形式</li></ul></li><li><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251325589.png" alt=""></p></li></ul></li><li><p>计算定理</p><ul><li><p>线性递推</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251325707.png" alt=""></li></ul></li><li><p>指数</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251325823.png" alt=""></li><li><img src="assets/eeea62642abf92062b8493146c3743d629789915f91a01e3aff1f47a51168a8f.png" alt=""></li><li><img src="assets/4c8d9645154af9b5ea958ffb6ab07d6296c09de4e2a4725515c3012ea35d4e87.png" alt=""></li></ul></li></ul></li></ul><h3 id="最小公倍数"><a href="#最小公倍数" class="headerlink" title="最小公倍数"></a>最小公倍数</h3><ul><li><p>前提引理推论（整数性质扩展）</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251325176.png" alt=""></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251325494.png" alt=""></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251325240.png" alt=""></li></ul></li><li><p>定义</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251326527.png" alt=""></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251326470.png" alt=""></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251326999.png" alt=""></li></ul></li><li><p>最小公倍数与最大公因数的关系</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251326762.png" alt=""></li></ul></li><li><p>拓展多个</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251326425.png" alt=""></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251326203.png" alt=""></li></ul></li></ul><h3 id="整数分解"><a href="#整数分解" class="headerlink" title="整数分解"></a>整数分解</h3><ul><li><p>整数分解定理</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251326814.png" alt=""></li></ul></li><li><p>例题</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251326398.png" alt=""></li></ul></li></ul><h3 id="素数算术基本定理-多项式形式重根"><a href="#素数算术基本定理-多项式形式重根" class="headerlink" title="素数算术基本定理(多项式形式重根)"></a>素数算术基本定理(多项式形式重根)</h3><ul><li><p>算术基本定理</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251326051.png" alt=""></li><li>这里素数乘积，表示素数开始作为空间的基，了解素数就可以掌握这个空间映射</li></ul></li><li><p>标准分解式（加入重根）</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251326445.png" alt=""></li></ul></li><li><p>因式分解</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251326529.png" alt=""></li><li>素数组合</li></ul></li><li><p>最大公因数额最小公倍数的内涵</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251326536.png" alt=""></li><li><p>推论</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251326077.png" alt=""></li></ul></li><li><p>推论n个</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251326336.png" alt=""></li></ul></li></ul></li><li><p>特殊结论</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251326587.png" alt=""></li></ul></li><li><p>素数定理</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251326738.png" alt=""></li></ul></li><li><p>切比谢夫不等式</p><ul><li><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251326193.png" alt=""></p><ul><li>素数位置估计</li></ul></li></ul></li></ul><h2 id="同余"><a href="#同余" class="headerlink" title="同余"></a>同余</h2><h3 id="同余-1"><a href="#同余-1" class="headerlink" title="同余"></a>同余</h3><ul><li><p>概念</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251327067.png" alt=""></li></ul></li><li><p>判断原理</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251327656.png" alt=""></li></ul></li><li><p>等价关系的性质</p><ul><li><p>自反</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251327126.png" alt=""></li></ul></li><li><p>对称</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251327940.png" alt=""></li></ul></li><li><p>传递</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251327271.png" alt=""></li></ul></li></ul></li><li><p>推论</p><ul><li><p>余数相同判定</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251327194.png" alt=""></li></ul></li></ul></li><li><p>特性</p><ul><li><p>相加相乘（满足线性空间）</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251327086.png" alt=""></li></ul></li><li><p>空间相等</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251327907.png" alt=""></li></ul></li><li><p>3，9特性</p><ul><li><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251327726.png" alt=""></p><ul><li>小时候用的估算</li></ul></li></ul></li><li><p>7,11,13特性</p><ul><li><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251327705.png" alt=""></p><ul><li>差分估计</li></ul></li></ul></li></ul></li><li><p>性质</p><ul><li><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251327573.png" alt=""></p><ul><li>换成整除证明</li></ul></li><li><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251327538.png" alt=""></p></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251327476.png" alt=""></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251327914.png" alt=""></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251327622.png" alt=""></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251327170.png" alt=""></li></ul></li></ul><h3 id="剩余类"><a href="#剩余类" class="headerlink" title="剩余类"></a>剩余类</h3><ul><li><p>定义前提</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251327091.png" alt=""></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251327909.png" alt=""></li></ul></li><li><p>完全剩余类</p><ul><li><p>定义</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251327796.png" alt=""></li></ul></li><li><p>性质</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251328920.png" alt=""></li><li><img src="assets/90e6b78617b76716d25e5f3e661ca573572fd029138053687a124a3aba410425.png" alt=""></li></ul></li><li><p>判定定理</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251328848.png" alt=""></li></ul></li><li><p>类型</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251328101.png" alt=""></li></ul></li><li><p>遍历</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251328206.png" alt=""></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251328704.png" alt=""></li><li>同理推广n维</li></ul></li></ul></li><li><p>简化剩余类</p><ul><li><p>定义</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251328881.png" alt=""></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251328508.png" alt=""></li></ul></li><li><p>互素</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251328736.png" alt=""></li></ul></li><li><p>简化剩余系</p><ul><li><p>定义</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251328191.png" alt=""></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251328636.png" alt=""></li></ul></li><li><p>类型</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251328181.png" alt=""></li></ul></li></ul></li><li><p>遍历</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251328732.png" alt=""></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251328510.png" alt=""></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251328944.png" alt=""></li></ul></li></ul></li></ul><h3 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h3><ul><li><p>定义</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251328013.png" alt=""></li></ul></li><li><p>欧拉定理</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251328992.png" alt=""></li></ul></li><li><p>性质</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251328248.png" alt=""></li><li><p>计算方法</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251329797.png" alt=""></li></ul></li><li><p>推论</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251329610.png" alt=""></li></ul></li><li><p>原根的构建</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251329289.png" alt=""></li></ul></li></ul></li></ul><h3 id="经典定理"><a href="#经典定理" class="headerlink" title="经典定理"></a>经典定理</h3><ul><li><p>欧拉定理</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251329607.png" alt=""></li><li><p>推论</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251329340.png" alt=""></li></ul></li></ul></li><li><p>费马小定理</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251329833.png" alt=""></li><li><p>推论</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251329191.png" alt=""></li></ul></li></ul></li><li><p>Wilson定理</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251329566.png" alt=""></li></ul></li></ul><h3 id="模重复"><a href="#模重复" class="headerlink" title="模重复"></a>模重复</h3><ul><li><p>思想</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251329272.png" alt=""></li></ul></li><li><p>方法</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251329230.png" alt=""></li><li>例题见书</li></ul></li></ul><h2 id="同余式"><a href="#同余式" class="headerlink" title="同余式"></a>同余式</h2><h3 id="同余式-1"><a href="#同余式-1" class="headerlink" title="同余式"></a>同余式</h3><ul><li><p>定义</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251329735.png" alt=""></li><li><p>解空间（剩余类）</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251333476.png" alt=""></li><li>类比高数中微分方程的解空间和代数空间下的解空间，同构罢了</li></ul></li></ul></li><li><p>基本思路</p><ul><li><p>(1）    求解归约 (J(x) (mod m）仨＝ f(x) (mod pa) &lt;== f(x) (mod p)).</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251334227.png" alt=""></li></ul></li><li><p>(2）    解的存在性（如定理3.1.1).</p></li><li>(3）    解的个数 （如定理3.1.3， 定理3.4.4， 定理3.4.5).</li><li>(4）    具体求解 （如定理3.2.1， 定理3.4.1).</li></ul></li><li><p>一次同余式求解过程</p><ul><li><p>思路</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251334130.png" alt=""></li></ul></li><li><p>相关定理</p><ul><li><p>存在性证明</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251334126.png" alt=""></li></ul></li><li><p>解个数</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251334226.png" alt=""></li></ul></li><li><p>代数可逆补充</p><ul><li><p>可逆元（这个没必要吧，前面涉及到了）</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251334172.png" alt=""></li></ul></li><li><p>简化剩余类可逆元遍历（这里就是想法上一个转化，转化为求可逆元，利用前面的同余以及辗转相除法）</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251334107.png" alt=""></li></ul></li></ul></li></ul></li><li><p>例题</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251334533.png" alt=""></li><li>思路：和微分方程一样，先判断有解，然后求解特解，再求解空间</li></ul></li></ul></li></ul><h3 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h3><ul><li><p>定理**</p><ul><li><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251334962.png" alt=""></p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251334739.png" alt=""></li></ul></li><li><p>俩种表示形式，个人更偏向第一种好记忆，第二种偏递推得出的结论，适合证明</p></li></ul></li><li><p>2个方程版</p><ul><li>（其实和上面差不多只是加了辗转相除法简化了一下，其实我感觉一模一样）</li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251334730.png" alt=""></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251334550.png" alt=""></li></ul></li><li><p>推广</p><ul><li><p>遍历（这个我其实不太懂）</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251334990.png" alt=""></li></ul></li><li><p>类似上面吧</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251334583.png" alt=""></li></ul></li></ul></li><li><p>例题（详细看书吧）</p></li></ul><h3 id="高次同余式"><a href="#高次同余式" class="headerlink" title="高次同余式"></a>高次同余式</h3><ul><li><p>解法</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251334959.png" alt=""></li><li><p>常见的转化，化为同余式组</p><ul><li>这里应该和代数空间上分解有关</li></ul></li><li><p>例题</p><ul><li><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251334056.png" alt=""></p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251335710.png" alt=""></li></ul></li></ul></li></ul></li><li><p>提升</p><ul><li><p>定义</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251335720.png" alt=""></li><li>总感觉和不可约多项式那边有点像</li></ul></li><li><p>解法</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251335472.png" alt=""></li></ul></li></ul></li></ul><h3 id="素数模的同余式（这个有用）"><a href="#素数模的同余式（这个有用）" class="headerlink" title="素数模的同余式（这个有用）"></a>素数模的同余式（这个有用）</h3><ul><li><p>多项式除法（代数学过）</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251335785.png" alt=""></li></ul></li><li><p>简化</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251335497.png" alt=""></li></ul></li><li><p>因式分解</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251335908.png" alt=""></li></ul></li><li><p>解法</p><ul><li><p>判定定理</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251336665.png" alt=""></li></ul></li><li><p>上界估计</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251336497.png" alt=""></li></ul></li><li><p>解数判断</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251336609.png" alt=""></li></ul></li><li><p>推论</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251336264.png" alt=""></li></ul></li></ul></li></ul><h2 id="二次同余式与平方剩余"><a href="#二次同余式与平方剩余" class="headerlink" title="二次同余式与平方剩余"></a>二次同余式与平方剩余</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li><p>二次同余式</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251520351.png" alt=" "></li></ul></li><li><p>平方剩余</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251520312.png" alt=""></li></ul></li></ul><h3 id="模p为奇素数的判别法"><a href="#模p为奇素数的判别法" class="headerlink" title="模p为奇素数的判别法"></a>模p为奇素数的判别法</h3><ul><li><p>欧拉判别法</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251520373.png" alt=""></li><li><p>推论</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251520319.png" alt=""></li></ul></li><li><p>二次平方剩余系</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251520719.png" alt=""></li></ul></li></ul></li><li><p>勒让得符号</p><ul><li><p>定理</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251520267.png" alt=""></li></ul></li><li><p>性质</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251520056.png" alt=""></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251520466.png" alt=""></li></ul></li><li><p>子主题 3</p></li></ul></li><li><p>相关定理</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251520491.png" alt=""></li></ul></li><li><p>高斯引理</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251520920.png" alt=""></li><li><p>推论</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251520369.png" alt=""></li></ul></li><li><p>求解定理</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251520754.png" alt=""></li></ul></li></ul></li><li><p>二次互反律</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251521446.png" alt=""></li><li><p>辅助</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251521251.png" alt=""></li></ul></li></ul></li><li><p>雅可比符号</p><ul><li><p>弱化条件</p><ul><li>在勒让得符号的计算中，要求模p为素数此外，在二次互反律的应用中，也要求α＝q为素数．这些都是很强的条件，因此，希望这些条件可以弱化，只要求模m为奇整数，α为任意整数．</li></ul></li><li><p>定义</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251521400.png" alt=""></li></ul></li><li><p>定理</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251521781.png" alt=""></li></ul></li><li><p>引理</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251521915.png" alt=""></li></ul></li><li><p>推论</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251521649.png" alt=""></li></ul></li><li><p>二次互反</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251521800.png" alt=""></li></ul></li></ul></li></ul><h3 id="模平方根"><a href="#模平方根" class="headerlink" title="模平方根"></a>模平方根</h3><ul><li>具体求解</li><li><p>模 p 平方根</p><ul><li>设p是形为4k +3的素数．讨论此情形的模p平方根</li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251521233.png" alt=""></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251521082.png" alt=""></li><li><p>证明</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251521934.png" alt=""></li></ul></li></ul></li><li><p>模p平方根</p><ul><li>p为奇素数</li><li><p>解定理</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251521385.png" alt=""></li></ul></li></ul></li><li><p>模m平方根</p><ul><li><p>条件</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251521784.png" alt=""></li></ul></li><li><p>解定理</p><ul><li><p>p^a</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251521650.png" alt=""></li><li><p>推论</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251521893.png" alt=""></li></ul></li></ul></li><li><p>a的分情况</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251521949.png" alt=""></li></ul></li></ul></li></ul></li><li><p>x^2+y^2 = p</p><ul><li><p>定理</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251521629.png" alt=""></li></ul></li></ul></li></ul><h2 id="原根与指标"><a href="#原根与指标" class="headerlink" title="原根与指标"></a>原根与指标</h2><blockquote><p> 这一章应该算代数数论了，初等数论只涉及一点点</p></blockquote><h3 id="指数（阶）"><a href="#指数（阶）" class="headerlink" title="指数（阶）"></a>指数（阶）</h3><ul><li><p>定义</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251522521.png" alt=""></li></ul></li><li><p>基本性质</p><ul><li><p>这里揭示了域的同构</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251522995.png" alt=""></li></ul></li><li><p>推论欧拉定理可得</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251522095.png" alt=""></li></ul></li><li><p>还是欧拉变形</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251522450.png" alt=""></li></ul></li><li><p>同构下性质保持不变</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251522705.png" alt=""></li></ul></li><li><p>这个不清楚，应该是同构映射基类似吧</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251522885.png" alt=""></li></ul></li><li><p>计算与优化</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251522171.png" alt=""></li></ul></li><li><p>同构</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251522756.png" alt=""></li></ul></li><li><p>构造</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251522189.png" alt=""></li><li><p>推论</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251522936.png" alt=""></li><li><img src="assets/b3751805f178db34c0923655a9220141004ffb13a079c814a3194a21fcd254e3.png" alt=""></li></ul></li></ul></li></ul></li><li><p>重要定理</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251522254.png" alt=""></li></ul></li><li><p>大指数构造（感觉就是同构后的性质和前面一样）</p><ul><li><p>互素相乘</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251522773.png" alt=""></li></ul></li><li><p>揭露了阶的含义，最大公倍数，这里就可以看成域的自乘了</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251522931.png" alt=""></li><li><p>推论</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251522755.png" alt=""></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251522424.png" alt=""></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251522041.png" alt=""></li></ul></li></ul></li><li><p>关系</p><ul><li><p>引理</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251522384.png" alt=""></li></ul></li><li><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251522607.png" alt=""></p></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251523247.png" alt=""></li></ul></li></ul></li></ul><h3 id="原根"><a href="#原根" class="headerlink" title="原根"></a>原根</h3><ul><li><p>定义</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251523239.png" alt=""></li></ul></li><li><p>模p原根（这里p都是奇素数，也就是抛去2）</p><ul><li><p>存在性</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251523171.png" alt=""></li><li><p>推论</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251523648.png" alt=""></li></ul></li></ul></li><li><p>判断</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251523932.png" alt=""></li></ul></li></ul></li><li><p>模p^a原根</p><ul><li><p>引理</p><ul><li><p>p性质分析，二次同余</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251523432.png" alt=""></li></ul></li><li><p>递推分析</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251523753.png" alt=""></li></ul></li><li><p>子主题 3</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251523072.png" alt=""></li></ul></li></ul></li><li><p>构造原根</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251523514.png" alt=""></li></ul></li><li><p>存在性</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251523714.png" alt=""></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251523805.png" alt=""></li></ul></li></ul></li><li><p>模2^a原根</p><ul><li><p>引理</p><ul><li><p>递推构造？？</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251523348.png" alt=""></li></ul></li><li><p>这些引理是人想出来的？</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251523549.png" alt=""></li></ul></li></ul></li><li><p>上界控制</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251523424.png" alt=""></li></ul></li><li><p>大于等于3，2好像是特殊情况有公式</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251523788.png" alt=""></li></ul></li></ul></li><li><p>模m原根</p><ul><li><p>原根的存在性，充分必要条件</p><ul><li>前面都是为这个做铺垫，其实只有这个最关键</li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251523569.png" alt=""></li><li><p>证明</p><ul><li><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251523287.png" alt=""></p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251523310.png" alt=""></li></ul></li><li><p><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251524689.png" alt=""></p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251524612.png" alt=""></li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="指标"><a href="#指标" class="headerlink" title="指标"></a>指标</h3><ul><li><p>意义</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251524110.png" alt=""></li></ul></li><li><p>揭露同构</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251524765.png" alt=""></li></ul></li><li><p>定义（类似指数和对数）</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251524524.png" alt=""></li></ul></li><li><p>定理</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251524342.png" alt=""></li></ul></li><li><p>性质</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251524360.png" alt=""></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251524632.png" alt=""></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251524419.png" alt=""></li></ul></li></ul><h3 id="n次同余式"><a href="#n次同余式" class="headerlink" title="n次同余式"></a>n次同余式</h3><ul><li><p>离散对数问题</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251524885.png" alt=""></li></ul></li><li><p>定义</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251524442.png" alt=""></li></ul></li><li><p>判读是否有解</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251524483.png" alt=""></li><li><p>推论</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251524437.png" alt=""></li></ul></li></ul></li><li><p>求指数</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251524243.png" alt=""></li></ul></li><li><p>这是同构</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251524359.png" alt=""></li><li><p>证明</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251524553.png" alt=""></li></ul></li></ul></li></ul><h2 id="素性检验"><a href="#素性检验" class="headerlink" title="素性检验"></a>素性检验</h2><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251524225.png" alt=""></h3><blockquote><p> 其实就是利用定理的逆否成立，判断不是，然后用算法多次迭代判断求出一个伪素数</p></blockquote><h3 id="伪素数"><a href="#伪素数" class="headerlink" title="伪素数"></a>伪素数</h3><ul><li><p>费马小定理</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251525415.png" alt=""></li></ul></li><li><p>伪素数定义</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251525972.png" alt=""></li></ul></li><li><p>性质</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251525916.png" alt=""></li></ul></li><li><p>Fermat 素性检验</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251525254.png" alt=""></li></ul></li><li><p>无穷多伪素数</p><ul><li><p>引理</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251525816.png" alt=""></li></ul></li><li><p>定理</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251525397.png" alt=""></li></ul></li></ul></li><li><p>平方因子判断</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251525071.png" alt=""></li></ul></li><li><p>Carmichael 数</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251525675.png" alt=""></li><li><p>判断</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251525746.png" alt=""></li></ul></li><li><p>性质</p><ul><li><img src="assets/e2097ff4a98ad3677d49bc08d7903868e2cecc7683db0832225b454402f2b24e.png" alt=""></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251525720.png" alt=""></li></ul></li></ul></li></ul><h3 id="Euler-伪素数"><a href="#Euler-伪素数" class="headerlink" title="Euler 伪素数"></a>Euler 伪素数</h3><ul><li><p>欧拉判别</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251525110.png" alt=""></li></ul></li><li><p>定义</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251525407.png" alt=""></li></ul></li><li><p>Solovay-Stassen 素性检验</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251525859.png" alt=""></li></ul></li><li><p>无穷多</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251525399.png" alt=""></li></ul></li></ul><h3 id="强伪素数"><a href="#强伪素数" class="headerlink" title="强伪素数"></a>强伪素数</h3><ul><li><p>验证定理</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251526101.png" alt=""></li></ul></li><li><p>定义</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251526204.png" alt=""></li></ul></li><li><p>Miller-Rabin 素性检验</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251526018.png" alt=""></li></ul></li><li><p>无穷多</p><ul><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251526004.png" alt=""></li><li><img src="https://lcypicgo.oss-cn-beijing.aliyuncs.com/img/202204251526558.png" alt=""></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
            <tag> 数论 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试刷题</title>
      <link href="/2022/03/25/2022-3-27-mian-shi-shua-ti/"/>
      <url>/2022/03/25/2022-3-27-mian-shi-shua-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="面试刷题"><a href="#面试刷题" class="headerlink" title="面试刷题"></a>面试刷题</h1><h2 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h2><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>给定你一个长度为 n 的整数数列。</p><p>请你使用快速排序对这个数列按照从小到大进行排序。</p><p>并将排好序的数列按顺序输出。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入共两行，第一行包含整数 nn。</p><p>第二行包含 nn 个整数（所有整数均在 1∼1091∼109 范围内），表示整个数列。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出共一行，包含 nn 个整数，表示排好序的数列。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤1000001≤n≤100000</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">53 1 2 4 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">1 2 3 4 5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;const int N = 100010;int nums[N];void quick_sort(int l,int r){    if(l &gt;= r){        return;    }    int x = nums[l+r&gt;&gt;1];    int i = l-1, j = r+1;    while(i&lt;j){        do i++; while(x &gt; nums[i]);        do j--; while(x &lt; nums[j]);        if(i&lt;j){            swap(nums[i],nums[j]);        }    }    quick_sort(l,j);    quick_sort(j+1,r);}int main(){    int n;    scanf("%d",&amp;n);    for(int i = 0;i &lt; n;i++){        scanf("%d",&amp;nums[i]);    }    quick_sort(0,n-1);    for(int i = 0;i &lt; n;i++){        printf("%d ",nums[i]);    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第k个数"><a href="#第k个数" class="headerlink" title="第k个数"></a>第k个数</h3><p>给定一个长度为 nn 的整数数列，以及一个整数 kk，请用快速选择算法求出数列从小到大排序后的第 kk 个数。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 nn 和 kk。</p><p>第二行包含 nn 个整数（所有整数均在 1∼1091∼109 范围内），表示整数数列。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示数列的第 kk 小数。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤1000001≤n≤100000,<br>1≤k≤n1≤k≤n</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">5 32 4 1 5 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;const int N =100010;int n,k;int nums[N];int quick_find(int l, int r, int k){    if(l &gt;= r){        return nums[l];    }    int x = nums[l];    int i = l-1,j = r+1;    while(i&lt; j){        do i++; while(x &gt; nums[i]);        do j--; while(x &lt; nums[j]);        if(i &lt; j){            swap(nums[i],nums[j]);        }    }    if (j - l + 1 &gt;= k){        return quick_find(l, j, k);    }    else{        return quick_find(j + 1, r, k - (j - l + 1));    }    } int main(){    cin &gt;&gt; n &gt;&gt; k;    for(int i = 0; i&lt; n;i++){        cin &gt;&gt; nums[i];    }    cout &lt;&lt; quick_find(0,n-1,k) &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>篮球预测</title>
      <link href="/2022/02/21/2022-2-21-lan-qiu-yu-ce/"/>
      <url>/2022/02/21/2022-2-21-lan-qiu-yu-ce/</url>
      
        <content type="html"><![CDATA[<h1 id="篮球预测及其分析"><a href="#篮球预测及其分析" class="headerlink" title="篮球预测及其分析"></a>篮球预测及其分析</h1><blockquote><p>作者 李春阳</p><p>时间 2021.9.20-2021.10</p><p>简介 这里参考网上高分笔记进行学习和复现</p></blockquote><p>尽量完善备注和理论，学习参考</p><h3 id="导入相关的数据包和库"><a href="#导入相关的数据包和库" class="headerlink" title="导入相关的数据包和库"></a>导入相关的数据包和库</h3><ul><li>pandas 数据加载</li><li>numpy 数组矩阵</li><li>matplotlib 绘图</li><li>skLearn 集成的机器学习包<ul><li>mixture 高斯混合模型</li><li>ensemble 基于集成的分类，回归和异常检测方法。</li><li>model_selection 请参阅交叉验证：评估模型表现，调整估计器的超参数和 学习曲线部分（评估部分）</li></ul></li><li>time 时间</li><li>itertools 迭代器</li><li>operator 标准运算符替代函数</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> matplotlib <span class="token keyword">as</span> mpl<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>patches <span class="token keyword">import</span> Circle<span class="token punctuation">,</span> Rectangle<span class="token punctuation">,</span> Arc<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> mixture<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> ensemble<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> model_selection<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score <span class="token keyword">as</span> accuracy<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> log_loss<span class="token keyword">import</span> time<span class="token keyword">import</span> itertools<span class="token keyword">import</span> operator<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="加载数据并创建一些有用的字段"><a href="#加载数据并创建一些有用的字段" class="headerlink" title="加载数据并创建一些有用的字段"></a>加载数据并创建一些有用的字段</h3><p>将新创建的字段显示为完整性检查</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 加载数据</span>allData <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./kobe-bryant-shot-selection/data.csv'</span><span class="token punctuation">)</span><span class="token comment"># allData</span>data <span class="token operator">=</span> allData<span class="token punctuation">[</span>allData<span class="token punctuation">[</span><span class="token string">'shot_made_flag'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>notnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span>data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>index</th>      <th>action_type</th>      <th>combined_shot_type</th>      <th>game_event_id</th>      <th>game_id</th>      <th>lat</th>      <th>loc_x</th>      <th>loc_y</th>      <th>lon</th>      <th>minutes_remaining</th>      <th>...</th>      <th>shot_type</th>      <th>shot_zone_area</th>      <th>shot_zone_basic</th>      <th>shot_zone_range</th>      <th>team_id</th>      <th>team_name</th>      <th>game_date</th>      <th>matchup</th>      <th>opponent</th>      <th>shot_id</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>Jump Shot</td>      <td>Jump Shot</td>      <td>12</td>      <td>20000012</td>      <td>34.0443</td>      <td>-157</td>      <td>0</td>      <td>-118.4268</td>      <td>10</td>      <td>...</td>      <td>2PT Field Goal</td>      <td>Left Side(L)</td>      <td>Mid-Range</td>      <td>8-16 ft.</td>      <td>1610612747</td>      <td>Los Angeles Lakers</td>      <td>2000-10-31</td>      <td>LAL @ POR</td>      <td>POR</td>      <td>2</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>Jump Shot</td>      <td>Jump Shot</td>      <td>35</td>      <td>20000012</td>      <td>33.9093</td>      <td>-101</td>      <td>135</td>      <td>-118.3708</td>      <td>7</td>      <td>...</td>      <td>2PT Field Goal</td>      <td>Left Side Center(LC)</td>      <td>Mid-Range</td>      <td>16-24 ft.</td>      <td>1610612747</td>      <td>Los Angeles Lakers</td>      <td>2000-10-31</td>      <td>LAL @ POR</td>      <td>POR</td>      <td>3</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>Jump Shot</td>      <td>Jump Shot</td>      <td>43</td>      <td>20000012</td>      <td>33.8693</td>      <td>138</td>      <td>175</td>      <td>-118.1318</td>      <td>6</td>      <td>...</td>      <td>2PT Field Goal</td>      <td>Right Side Center(RC)</td>      <td>Mid-Range</td>      <td>16-24 ft.</td>      <td>1610612747</td>      <td>Los Angeles Lakers</td>      <td>2000-10-31</td>      <td>LAL @ POR</td>      <td>POR</td>      <td>4</td>    </tr>    <tr>      <th>3</th>      <td>4</td>      <td>Driving Dunk Shot</td>      <td>Dunk</td>      <td>155</td>      <td>20000012</td>      <td>34.0443</td>      <td>0</td>      <td>0</td>      <td>-118.2698</td>      <td>6</td>      <td>...</td>      <td>2PT Field Goal</td>      <td>Center(C)</td>      <td>Restricted Area</td>      <td>Less Than 8 ft.</td>      <td>1610612747</td>      <td>Los Angeles Lakers</td>      <td>2000-10-31</td>      <td>LAL @ POR</td>      <td>POR</td>      <td>5</td>    </tr>    <tr>      <th>4</th>      <td>5</td>      <td>Jump Shot</td>      <td>Jump Shot</td>      <td>244</td>      <td>20000012</td>      <td>34.0553</td>      <td>-145</td>      <td>-11</td>      <td>-118.4148</td>      <td>9</td>      <td>...</td>      <td>2PT Field Goal</td>      <td>Left Side(L)</td>      <td>Mid-Range</td>      <td>8-16 ft.</td>      <td>1610612747</td>      <td>Los Angeles Lakers</td>      <td>2000-10-31</td>      <td>LAL @ POR</td>      <td>POR</td>      <td>6</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>25692</th>      <td>30691</td>      <td>Driving Layup Shot</td>      <td>Layup</td>      <td>382</td>      <td>49900088</td>      <td>34.0443</td>      <td>0</td>      <td>0</td>      <td>-118.2698</td>      <td>7</td>      <td>...</td>      <td>2PT Field Goal</td>      <td>Center(C)</td>      <td>Restricted Area</td>      <td>Less Than 8 ft.</td>      <td>1610612747</td>      <td>Los Angeles Lakers</td>      <td>2000-06-19</td>      <td>LAL vs. IND</td>      <td>IND</td>      <td>30692</td>    </tr>    <tr>      <th>25693</th>      <td>30692</td>      <td>Jump Shot</td>      <td>Jump Shot</td>      <td>397</td>      <td>49900088</td>      <td>33.9963</td>      <td>1</td>      <td>48</td>      <td>-118.2688</td>      <td>6</td>      <td>...</td>      <td>2PT Field Goal</td>      <td>Center(C)</td>      <td>In The Paint (Non-RA)</td>      <td>Less Than 8 ft.</td>      <td>1610612747</td>      <td>Los Angeles Lakers</td>      <td>2000-06-19</td>      <td>LAL vs. IND</td>      <td>IND</td>      <td>30693</td>    </tr>    <tr>      <th>25694</th>      <td>30694</td>      <td>Running Jump Shot</td>      <td>Jump Shot</td>      <td>426</td>      <td>49900088</td>      <td>33.8783</td>      <td>-134</td>      <td>166</td>      <td>-118.4038</td>      <td>3</td>      <td>...</td>      <td>2PT Field Goal</td>      <td>Left Side Center(LC)</td>      <td>Mid-Range</td>      <td>16-24 ft.</td>      <td>1610612747</td>      <td>Los Angeles Lakers</td>      <td>2000-06-19</td>      <td>LAL vs. IND</td>      <td>IND</td>      <td>30695</td>    </tr>    <tr>      <th>25695</th>      <td>30695</td>      <td>Jump Shot</td>      <td>Jump Shot</td>      <td>448</td>      <td>49900088</td>      <td>33.7773</td>      <td>31</td>      <td>267</td>      <td>-118.2388</td>      <td>2</td>      <td>...</td>      <td>3PT Field Goal</td>      <td>Center(C)</td>      <td>Above the Break 3</td>      <td>24+ ft.</td>      <td>1610612747</td>      <td>Los Angeles Lakers</td>      <td>2000-06-19</td>      <td>LAL vs. IND</td>      <td>IND</td>      <td>30696</td>    </tr>    <tr>      <th>25696</th>      <td>30696</td>      <td>Jump Shot</td>      <td>Jump Shot</td>      <td>471</td>      <td>49900088</td>      <td>33.9723</td>      <td>1</td>      <td>72</td>      <td>-118.2688</td>      <td>0</td>      <td>...</td>      <td>2PT Field Goal</td>      <td>Center(C)</td>      <td>In The Paint (Non-RA)</td>      <td>Less Than 8 ft.</td>      <td>1610612747</td>      <td>Los Angeles Lakers</td>      <td>2000-06-19</td>      <td>LAL vs. IND</td>      <td>IND</td>      <td>30697</td>    </tr>  </tbody></table><p>25697 rows × 26 columns</p></div><h4 id="给数据添加时间序列"><a href="#给数据添加时间序列" class="headerlink" title="给数据添加时间序列"></a>给数据添加时间序列</h4><p><code>to_datetime</code>  DataFrame 列转换为日期时间<br><code>dt.dayofweek</code> Series.dt可用于以datetimelike的形式访问序列的值并返回几个属性。例如周，年</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 给数据添加时间序列</span>data<span class="token punctuation">[</span><span class="token string">'game_date_DT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'game_date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'dayOfWeek'</span><span class="token punctuation">]</span>    <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'game_date_DT'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>dayofweekdata<span class="token punctuation">[</span><span class="token string">'dayOfYear'</span><span class="token punctuation">]</span>    <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'game_date_DT'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>dayofyear<span class="token comment"># 计算秒数（构成时间上连续的序列3）</span>data<span class="token punctuation">[</span><span class="token string">'secondsFromPeriodEnd'</span><span class="token punctuation">]</span>   <span class="token operator">=</span> <span class="token number">60</span><span class="token operator">*</span>data<span class="token punctuation">[</span><span class="token string">'minutes_remaining'</span><span class="token punctuation">]</span><span class="token operator">+</span>data<span class="token punctuation">[</span><span class="token string">'seconds_remaining'</span><span class="token punctuation">]</span>data<span class="token punctuation">[</span><span class="token string">'secondsFromPeriodStart'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">60</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token operator">-</span>data<span class="token punctuation">[</span><span class="token string">'minutes_remaining'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">-</span>data<span class="token punctuation">[</span><span class="token string">'seconds_remaining'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'secondsFromGameStart'</span><span class="token punctuation">]</span>   <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'period'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'period'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">60</span> <span class="token operator">+</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'period'</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'period'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">60</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token operator">*</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">+</span> data<span class="token punctuation">[</span><span class="token string">'secondsFromPeriodStart'</span><span class="token punctuation">]</span>data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>index</th>      <th>action_type</th>      <th>combined_shot_type</th>      <th>game_event_id</th>      <th>game_id</th>      <th>lat</th>      <th>loc_x</th>      <th>loc_y</th>      <th>lon</th>      <th>minutes_remaining</th>      <th>...</th>      <th>game_date</th>      <th>matchup</th>      <th>opponent</th>      <th>shot_id</th>      <th>game_date_DT</th>      <th>dayOfWeek</th>      <th>dayOfYear</th>      <th>secondsFromPeriodEnd</th>      <th>secondsFromPeriodStart</th>      <th>secondsFromGameStart</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>Jump Shot</td>      <td>Jump Shot</td>      <td>12</td>      <td>20000012</td>      <td>34.0443</td>      <td>-157</td>      <td>0</td>      <td>-118.4268</td>      <td>10</td>      <td>...</td>      <td>2000-10-31</td>      <td>LAL @ POR</td>      <td>POR</td>      <td>2</td>      <td>2000-10-31</td>      <td>1</td>      <td>305</td>      <td>622</td>      <td>98</td>      <td>98</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>Jump Shot</td>      <td>Jump Shot</td>      <td>35</td>      <td>20000012</td>      <td>33.9093</td>      <td>-101</td>      <td>135</td>      <td>-118.3708</td>      <td>7</td>      <td>...</td>      <td>2000-10-31</td>      <td>LAL @ POR</td>      <td>POR</td>      <td>3</td>      <td>2000-10-31</td>      <td>1</td>      <td>305</td>      <td>465</td>      <td>255</td>      <td>255</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>Jump Shot</td>      <td>Jump Shot</td>      <td>43</td>      <td>20000012</td>      <td>33.8693</td>      <td>138</td>      <td>175</td>      <td>-118.1318</td>      <td>6</td>      <td>...</td>      <td>2000-10-31</td>      <td>LAL @ POR</td>      <td>POR</td>      <td>4</td>      <td>2000-10-31</td>      <td>1</td>      <td>305</td>      <td>412</td>      <td>308</td>      <td>308</td>    </tr>    <tr>      <th>3</th>      <td>4</td>      <td>Driving Dunk Shot</td>      <td>Dunk</td>      <td>155</td>      <td>20000012</td>      <td>34.0443</td>      <td>0</td>      <td>0</td>      <td>-118.2698</td>      <td>6</td>      <td>...</td>      <td>2000-10-31</td>      <td>LAL @ POR</td>      <td>POR</td>      <td>5</td>      <td>2000-10-31</td>      <td>1</td>      <td>305</td>      <td>379</td>      <td>341</td>      <td>1061</td>    </tr>    <tr>      <th>4</th>      <td>5</td>      <td>Jump Shot</td>      <td>Jump Shot</td>      <td>244</td>      <td>20000012</td>      <td>34.0553</td>      <td>-145</td>      <td>-11</td>      <td>-118.4148</td>      <td>9</td>      <td>...</td>      <td>2000-10-31</td>      <td>LAL @ POR</td>      <td>POR</td>      <td>6</td>      <td>2000-10-31</td>      <td>1</td>      <td>305</td>      <td>572</td>      <td>148</td>      <td>1588</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>25692</th>      <td>30691</td>      <td>Driving Layup Shot</td>      <td>Layup</td>      <td>382</td>      <td>49900088</td>      <td>34.0443</td>      <td>0</td>      <td>0</td>      <td>-118.2698</td>      <td>7</td>      <td>...</td>      <td>2000-06-19</td>      <td>LAL vs. IND</td>      <td>IND</td>      <td>30692</td>      <td>2000-06-19</td>      <td>0</td>      <td>171</td>      <td>424</td>      <td>296</td>      <td>2456</td>    </tr>    <tr>      <th>25693</th>      <td>30692</td>      <td>Jump Shot</td>      <td>Jump Shot</td>      <td>397</td>      <td>49900088</td>      <td>33.9963</td>      <td>1</td>      <td>48</td>      <td>-118.2688</td>      <td>6</td>      <td>...</td>      <td>2000-06-19</td>      <td>LAL vs. IND</td>      <td>IND</td>      <td>30693</td>      <td>2000-06-19</td>      <td>0</td>      <td>171</td>      <td>365</td>      <td>355</td>      <td>2515</td>    </tr>    <tr>      <th>25694</th>      <td>30694</td>      <td>Running Jump Shot</td>      <td>Jump Shot</td>      <td>426</td>      <td>49900088</td>      <td>33.8783</td>      <td>-134</td>      <td>166</td>      <td>-118.4038</td>      <td>3</td>      <td>...</td>      <td>2000-06-19</td>      <td>LAL vs. IND</td>      <td>IND</td>      <td>30695</td>      <td>2000-06-19</td>      <td>0</td>      <td>171</td>      <td>208</td>      <td>512</td>      <td>2672</td>    </tr>    <tr>      <th>25695</th>      <td>30695</td>      <td>Jump Shot</td>      <td>Jump Shot</td>      <td>448</td>      <td>49900088</td>      <td>33.7773</td>      <td>31</td>      <td>267</td>      <td>-118.2388</td>      <td>2</td>      <td>...</td>      <td>2000-06-19</td>      <td>LAL vs. IND</td>      <td>IND</td>      <td>30696</td>      <td>2000-06-19</td>      <td>0</td>      <td>171</td>      <td>130</td>      <td>590</td>      <td>2750</td>    </tr>    <tr>      <th>25696</th>      <td>30696</td>      <td>Jump Shot</td>      <td>Jump Shot</td>      <td>471</td>      <td>49900088</td>      <td>33.9723</td>      <td>1</td>      <td>72</td>      <td>-118.2688</td>      <td>0</td>      <td>...</td>      <td>2000-06-19</td>      <td>LAL vs. IND</td>      <td>IND</td>      <td>30697</td>      <td>2000-06-19</td>      <td>0</td>      <td>171</td>      <td>39</td>      <td>681</td>      <td>2841</td>    </tr>  </tbody></table><p>25697 rows × 32 columns</p></div><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 查看前几行并确认一切正常</span>data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'period'</span><span class="token punctuation">,</span><span class="token string">'minutes_remaining'</span><span class="token punctuation">,</span><span class="token string">'seconds_remaining'</span><span class="token punctuation">,</span><span class="token string">'secondsFromGameStart'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>period</th>      <th>minutes_remaining</th>      <th>seconds_remaining</th>      <th>secondsFromGameStart</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>10</td>      <td>22</td>      <td>98</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>7</td>      <td>45</td>      <td>255</td>    </tr>    <tr>      <th>2</th>      <td>1</td>      <td>6</td>      <td>52</td>      <td>308</td>    </tr>    <tr>      <th>3</th>      <td>2</td>      <td>6</td>      <td>19</td>      <td>1061</td>    </tr>    <tr>      <th>4</th>      <td>3</td>      <td>9</td>      <td>32</td>      <td>1588</td>    </tr>    <tr>      <th>5</th>      <td>3</td>      <td>8</td>      <td>52</td>      <td>1628</td>    </tr>    <tr>      <th>6</th>      <td>3</td>      <td>6</td>      <td>12</td>      <td>1788</td>    </tr>    <tr>      <th>7</th>      <td>3</td>      <td>3</td>      <td>36</td>      <td>1944</td>    </tr>    <tr>      <th>8</th>      <td>3</td>      <td>1</td>      <td>56</td>      <td>2044</td>    </tr>    <tr>      <th>9</th>      <td>1</td>      <td>11</td>      <td>0</td>      <td>60</td>    </tr>    <tr>      <th>10</th>      <td>1</td>      <td>7</td>      <td>9</td>      <td>291</td>    </tr>  </tbody></table></div><h3 id="在游戏中将投篮尝试作为时间的函数"><a href="#在游戏中将投篮尝试作为时间的函数" class="headerlink" title="在游戏中将投篮尝试作为时间的函数"></a>在游戏中将投篮尝试作为时间的函数</h3><p>在这里，我们应用了 3 种不同的时间间隔，并从游戏开始将尝试显示为函数</p><p>采用matplotlib进行绘图</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 用几个不同的分档将投篮尝试作为时间的函数（从游戏开始）绘制</span><span class="token comment"># 设置matplotlib的参数，字体，图大小</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'figure.figsize'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.size'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token comment"># 设置尺寸</span>binsSizes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token comment">#开始绘图</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># enumerate 枚举</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> binSizeInSeconds <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>binsSizes<span class="token punctuation">)</span><span class="token punctuation">:</span>    timeBins <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">12</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>binSizeInSeconds<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0.01</span>    attemptsAsFunctionOfTime<span class="token punctuation">,</span> b <span class="token operator">=</span> np<span class="token punctuation">.</span>histogram<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'secondsFromGameStart'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bins<span class="token operator">=</span>timeBins<span class="token punctuation">)</span>         <span class="token comment"># 尝试作为时间的函数</span>    <span class="token comment"># numpy.histogram 计算数据集的直方图。</span>    <span class="token comment"># 设置最大高度</span>    maxHeight <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>attemptsAsFunctionOfTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">30</span>    barWidth <span class="token operator">=</span> <span class="token number">0.999</span><span class="token operator">*</span><span class="token punctuation">(</span>timeBins<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>timeBins<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># 分图，设置条形图</span>    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>binsSizes<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>timeBins<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>attemptsAsFunctionOfTime<span class="token punctuation">,</span> align<span class="token operator">=</span><span class="token string">'edge'</span><span class="token punctuation">,</span> width<span class="token operator">=</span>barWidth<span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>binSizeInSeconds<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' second time bins'</span><span class="token punctuation">)</span>    <span class="token comment"># 绘制每一节的红线</span>    plt<span class="token punctuation">.</span>vlines<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ymin<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>ymax<span class="token operator">=</span>maxHeight<span class="token punctuation">,</span> colors<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>    <span class="token comment"># x的范围限制</span>    plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">3200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>maxHeight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'attempts'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'time [seconds from start of game]'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Text(0.5, 0, 'time [seconds from start of game]')</code></pre><p><img src="https://s2.loli.net/2022/03/20/xn7fSd1aEAurjcq.png" alt="png"></p><blockquote><p>解析</p><p>这里红线表示每一节的区分</p><p>分别是24，12，6秒统计一次和的结果图</p></blockquote><p>看起来科比被托付给每个时期的最后一击（每一节后面出手得分明显多）</p><p>看起来他通常在第 2 节和第 4 节开始时坐在替补席上</p><h3 id="Plot-Shot-Accuracy-as-function-of-time-during-the-game"><a href="#Plot-Shot-Accuracy-as-function-of-time-during-the-game" class="headerlink" title="Plot Shot Accuracy as function of time during the game"></a>Plot Shot Accuracy as function of time during the game</h3><h3 id="在游戏中将投篮准确度作为时间的函数"><a href="#在游戏中将投篮准确度作为时间的函数" class="headerlink" title="在游戏中将投篮准确度作为时间的函数"></a>在游戏中将投篮准确度作为时间的函数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 在游戏中将投篮准确度作为时间的函数</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'figure.figsize'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.size'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">16</span>binSizeInSeconds <span class="token operator">=</span> <span class="token number">20</span>timeBins <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">12</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>binSizeInSeconds<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0.01</span><span class="token comment"># 类似同上直方图</span>attemptsAsFunctionOfTime<span class="token punctuation">,</span>     b <span class="token operator">=</span> np<span class="token punctuation">.</span>histogram<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'secondsFromGameStart'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bins<span class="token operator">=</span>timeBins<span class="token punctuation">)</span>     madeAttemptsAsFunctionOfTime<span class="token punctuation">,</span> b <span class="token operator">=</span> np<span class="token punctuation">.</span>histogram<span class="token punctuation">(</span>data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'shot_made_flag'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'secondsFromGameStart'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bins<span class="token operator">=</span>timeBins<span class="token punctuation">)</span>     attemptsAsFunctionOfTime<span class="token punctuation">[</span>attemptsAsFunctionOfTime <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>accuracyAsFunctionOfTime <span class="token operator">=</span> madeAttemptsAsFunctionOfTime<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token operator">/</span>attemptsAsFunctionOfTimeaccuracyAsFunctionOfTime<span class="token punctuation">[</span>attemptsAsFunctionOfTime <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment"># zero accuracy in bins that don't have enough samples</span><span class="token comment"># 没有足够样本的 bin 的准确度为零</span><span class="token comment"># 高度宽度</span>maxHeight <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>attemptsAsFunctionOfTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">30</span>barWidth <span class="token operator">=</span> <span class="token number">0.999</span><span class="token operator">*</span><span class="token punctuation">(</span>timeBins<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>timeBins<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 开始绘图</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 相关函数类似MATLAB 可以</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>timeBins<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>attemptsAsFunctionOfTime<span class="token punctuation">,</span> align<span class="token operator">=</span><span class="token string">'edge'</span><span class="token punctuation">,</span> width<span class="token operator">=</span>barWidth<span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">3200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>maxHeight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'attempts'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>binSizeInSeconds<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' second time bins'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>vlines<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ymin<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>ymax<span class="token operator">=</span>maxHeight<span class="token punctuation">,</span> colors<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>timeBins<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>accuracyAsFunctionOfTime<span class="token punctuation">,</span> align<span class="token operator">=</span><span class="token string">'edge'</span><span class="token punctuation">,</span> width<span class="token operator">=</span>barWidth<span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">3200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'accuracy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'time [seconds from start of game]'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>vlines<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ymin<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span>ymax<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">,</span> colors<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;matplotlib.collections.LineCollection at 0x15aeca979a0&gt;</code></pre><p>​<br><img src="https://s2.loli.net/2022/03/20/agH4Z6kD8c1jVxw.png" alt="png"><br>​    </p><p>由上面可以分析得出，最后虽然投篮次数多，但准确率明显下滑，达不到正常水平</p><p>这可能和最后时间紧张，远距离投篮（三分绝杀）有关</p><h3 id="投篮的空间位置分析"><a href="#投篮的空间位置分析" class="headerlink" title="投篮的空间位置分析"></a>投篮的空间位置分析</h3><p>现在让我们继续我们的初步探索并检查科比投篮的空间位置方面</p><p>我们将通过构建一个高斯混合模型来做到这一点，该模型试图紧凑地总结科比的投篮位置</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% 使用 GMM 在他们的位置聚集 kobe 的投篮尝试</span>numGaussians <span class="token operator">=</span> <span class="token number">13</span>gaussianMixtureModel <span class="token operator">=</span> mixture<span class="token punctuation">.</span>GaussianMixture<span class="token punctuation">(</span>n_components<span class="token operator">=</span>numGaussians<span class="token punctuation">,</span> covariance_type<span class="token operator">=</span><span class="token string">'full'</span><span class="token punctuation">,</span>                                                init_params<span class="token operator">=</span><span class="token string">'kmeans'</span><span class="token punctuation">,</span> n_init<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span>                                                verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>gaussianMixtureModel<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'loc_x'</span><span class="token punctuation">,</span><span class="token string">'loc_y'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># add the GMM cluster as a field in the dataset</span><span class="token comment"># 将 GMM 集群添加为数据集中的字段</span>data<span class="token punctuation">[</span><span class="token string">'shotLocationCluster'</span><span class="token punctuation">]</span> <span class="token operator">=</span> gaussianMixtureModel<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'loc_x'</span><span class="token punctuation">,</span><span class="token string">'loc_y'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="优缺点GaussianMixture"><a href="#优缺点GaussianMixture" class="headerlink" title="优缺点GaussianMixture"></a>优缺点GaussianMixture</h3><ul><li>优点<ul><li>速度：它是混合模型学习算法中的最快算法</li><li>无偏差性：由于此算法仅最大化可能性，因此不会使均值趋于零，也不会使聚类大小具有可能适用或不适用的特定结构。</li></ul></li><li>缺点<ul><li>奇异性：当每个混合模型的点数不足时，估计协方差矩阵将变得困难，并且除非对协方差进行人为正则化，否则该算法会发散并寻找无穷大似然函数值的解。</li><li>分量数量：该算法将始终使用它可以使用的所有分量，所以在没有外部提示的情况下，需要留存数据或者信息理论标准来决定用多少个分量。</li></ul></li></ul><h3 id="GaussianMixture-高斯混合模型"><a href="#GaussianMixture-高斯混合模型" class="headerlink" title="GaussianMixture 高斯混合模型"></a>GaussianMixture 高斯混合模型</h3><pre><code>该GaussianMixture对象实现了用于拟合高斯混合模型的 期望最大化（EM）算法。它还可以为多元模型绘制置信椭圆体，并计算贝叶斯信息准则以评估数据中的聚类数量。GaussianMixture.fit可以从训练数据中拟合出一个高斯混合模型。在给定测试数据的情况下，使用该GaussianMixture.predict方法可以为每个样本分配最适合它的高斯分布模型。。</code></pre><h3 id="定义一些补充函数"><a href="#定义一些补充函数" class="headerlink" title="定义一些补充函数"></a>定义一些补充函数</h3><p>均为借鉴其他人操作（这里是创建一个篮球的绘图基础，为后续高斯分布提供一个可视化场景）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% define draw functions (stealing shamelessly the draw_court() function from MichaelKrueger's excelent script)</span><span class="token comment"># 定义绘制函数（无耻地从 MichaelKrueger 的优秀脚本中窃取 draw_court() 函数）</span><span class="token keyword">def</span> <span class="token function">draw_court</span><span class="token punctuation">(</span>ax<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> outer_lines<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># If an axes object isn't provided to plot onto, just get current one</span>    <span class="token comment"># 如果未提供要绘制的轴对象，请获取当前对象</span>    <span class="token keyword">if</span> ax <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># Create the various parts of an NBA basketball court</span>    <span class="token comment"># 创建 NBA 篮球场的各个部分</span>    <span class="token comment"># Create the basketball hoop</span>    <span class="token comment"># Diameter of a hoop is 18" so it has a radius of 9", which is a value</span>    <span class="token comment"># 7.5 in our coordinate system</span>    <span class="token comment"># 创建篮球架</span>    <span class="token comment"># 箍的直径是 18" 所以它的半径是 9"，这是一个值7.5 在我们的坐标系中</span>    hoop <span class="token operator">=</span> Circle<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> radius<span class="token operator">=</span><span class="token number">7.5</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span>lw<span class="token punctuation">,</span> color<span class="token operator">=</span>color<span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token comment"># Create backboard</span>    <span class="token comment"># 创建背板</span>    backboard <span class="token operator">=</span> Rectangle<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">7.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span>lw<span class="token punctuation">,</span> color<span class="token operator">=</span>color<span class="token punctuation">)</span>    <span class="token comment"># The paint</span>    <span class="token comment"># Create the outer box 0f the paint, width=16ft, height=19ft</span>    <span class="token comment">#绘图</span>    <span class="token comment"># 创建外框0f 油漆，宽=16 英尺，高=19 英尺</span>    outer_box <span class="token operator">=</span> Rectangle<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">47.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span>lw<span class="token punctuation">,</span> color<span class="token operator">=</span>color<span class="token punctuation">,</span>                          fill<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token comment"># Create the inner box of the paint, widt=12ft, height=19ft</span>    <span class="token comment"># 创建油漆的内盒，widt=12ft, height=19ft</span>    inner_box <span class="token operator">=</span> Rectangle<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">47.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span>lw<span class="token punctuation">,</span> color<span class="token operator">=</span>color<span class="token punctuation">,</span>                          fill<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token comment"># Create free throw top arc</span>    <span class="token comment"># 创建罚球顶弧</span>    top_free_throw <span class="token operator">=</span> Arc<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">142.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> theta1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> theta2<span class="token operator">=</span><span class="token number">180</span><span class="token punctuation">,</span>                         linewidth<span class="token operator">=</span>lw<span class="token punctuation">,</span> color<span class="token operator">=</span>color<span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token comment"># Create free throw bottom arc</span>    <span class="token comment"># 创建罚球底弧</span>    bottom_free_throw <span class="token operator">=</span> Arc<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">142.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> theta1<span class="token operator">=</span><span class="token number">180</span><span class="token punctuation">,</span> theta2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>                            linewidth<span class="token operator">=</span>lw<span class="token punctuation">,</span> color<span class="token operator">=</span>color<span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">'dashed'</span><span class="token punctuation">)</span>    <span class="token comment"># Restricted Zone, it is an arc with 4ft radius from center of the hoop</span>    <span class="token comment"># 限制区，它是一个半径为 4 英尺的圆弧，距篮筐中心</span>    restricted <span class="token operator">=</span> Arc<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> theta1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> theta2<span class="token operator">=</span><span class="token number">180</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span>lw<span class="token punctuation">,</span>                     color<span class="token operator">=</span>color<span class="token punctuation">)</span>    <span class="token comment"># Three point line</span>    <span class="token comment"># Create the side 3pt lines, they are 14ft long before they begin to arc</span>    <span class="token comment"># 三点线</span>    <span class="token comment"># 创建侧面 3pt 线，它们在开始形成弧线之前有 14 英尺长</span>    corner_three_a <span class="token operator">=</span> Rectangle<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">220</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">47.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span>lw<span class="token punctuation">,</span>                               color<span class="token operator">=</span>color<span class="token punctuation">)</span>    corner_three_b <span class="token operator">=</span> Rectangle<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">220</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">47.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span>lw<span class="token punctuation">,</span> color<span class="token operator">=</span>color<span class="token punctuation">)</span>    <span class="token comment"># 3pt arc - center of arc will be the hoop, arc is 23'9" away from hoop</span>    <span class="token comment"># I just played around with the theta values until they lined up with the </span>    <span class="token comment"># threes</span>    <span class="token comment"># 3pt arc - 弧的中心是箍，弧距箍 23'9"</span>    <span class="token comment"># 我只是玩弄 theta 值，直到它们与三分</span>    three_arc <span class="token operator">=</span> Arc<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">475</span><span class="token punctuation">,</span> <span class="token number">475</span><span class="token punctuation">,</span> theta1<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">,</span> theta2<span class="token operator">=</span><span class="token number">158</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span>lw<span class="token punctuation">,</span>                    color<span class="token operator">=</span>color<span class="token punctuation">)</span>    <span class="token comment"># Center Court</span>    <span class="token comment"># 中庭</span>    center_outer_arc <span class="token operator">=</span> Arc<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">422.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> theta1<span class="token operator">=</span><span class="token number">180</span><span class="token punctuation">,</span> theta2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>                           linewidth<span class="token operator">=</span>lw<span class="token punctuation">,</span> color<span class="token operator">=</span>color<span class="token punctuation">)</span>    center_inner_arc <span class="token operator">=</span> Arc<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">422.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> theta1<span class="token operator">=</span><span class="token number">180</span><span class="token punctuation">,</span> theta2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>                           linewidth<span class="token operator">=</span>lw<span class="token punctuation">,</span> color<span class="token operator">=</span>color<span class="token punctuation">)</span>    <span class="token comment"># List of the court elements to be plotted onto the axes</span>    <span class="token comment"># 绘制在轴上的法院元素列表</span>    court_elements <span class="token operator">=</span> <span class="token punctuation">[</span>hoop<span class="token punctuation">,</span> backboard<span class="token punctuation">,</span> outer_box<span class="token punctuation">,</span> inner_box<span class="token punctuation">,</span> top_free_throw<span class="token punctuation">,</span>                      bottom_free_throw<span class="token punctuation">,</span> restricted<span class="token punctuation">,</span> corner_three_a<span class="token punctuation">,</span>                      corner_three_b<span class="token punctuation">,</span> three_arc<span class="token punctuation">,</span> center_outer_arc<span class="token punctuation">,</span>                      center_inner_arc<span class="token punctuation">]</span>    <span class="token keyword">if</span> outer_lines<span class="token punctuation">:</span>        <span class="token comment"># Draw the half court line, baseline and side out bound lines</span>        <span class="token comment"># 绘制半场线、底线和边外界线</span>        outer_lines <span class="token operator">=</span> Rectangle<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">47.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">470</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span>lw<span class="token punctuation">,</span>                                color<span class="token operator">=</span>color<span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        court_elements<span class="token punctuation">.</span>append<span class="token punctuation">(</span>outer_lines<span class="token punctuation">)</span>    <span class="token comment"># Add the court elements onto the axes</span>    <span class="token comment"># 将全部元素添加到轴上</span>    <span class="token keyword">for</span> element <span class="token keyword">in</span> court_elements<span class="token punctuation">:</span>        ax<span class="token punctuation">.</span>add_patch<span class="token punctuation">(</span>element<span class="token punctuation">)</span>    <span class="token keyword">return</span> ax<span class="token comment"># 2d高斯混合分布</span><span class="token keyword">def</span> <span class="token function">Draw2DGaussians</span><span class="token punctuation">(</span>gaussianMixtureModel<span class="token punctuation">,</span> ellipseColors<span class="token punctuation">,</span> ellipseTextMessages<span class="token punctuation">)</span><span class="token punctuation">:</span>        fig<span class="token punctuation">,</span> h <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>mean<span class="token punctuation">,</span> covarianceMatrix<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>gaussianMixtureModel<span class="token punctuation">.</span>means_<span class="token punctuation">,</span> gaussianMixtureModel<span class="token punctuation">.</span>covariances_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># get the eigen vectors and eigen values of the covariance matrix</span>        <span class="token comment"># 得到协方差矩阵的特征向量和特征值</span>        v<span class="token punctuation">,</span> w <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>eigh<span class="token punctuation">(</span>covarianceMatrix<span class="token punctuation">)</span>        v <span class="token operator">=</span> <span class="token number">2.5</span><span class="token operator">*</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>v<span class="token punctuation">)</span>         <span class="token comment"># go to units of standard deviation instead of variance</span>        <span class="token comment"># 转到标准差单位而不是方差</span>                <span class="token comment"># calculate the ellipse angle and two axis length and draw it</span>        <span class="token comment"># 计算椭圆角和两轴长并绘制</span>        u <span class="token operator">=</span> w<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>w<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            angle <span class="token operator">=</span> np<span class="token punctuation">.</span>arctan<span class="token punctuation">(</span>u<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> u<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        angle <span class="token operator">=</span> <span class="token number">180</span> <span class="token operator">*</span> angle <span class="token operator">/</span> np<span class="token punctuation">.</span>pi  <span class="token comment"># convert to degrees转换为度数</span>        currEllipse <span class="token operator">=</span> mpl<span class="token punctuation">.</span>patches<span class="token punctuation">.</span>Ellipse<span class="token punctuation">(</span>mean<span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">180</span> <span class="token operator">+</span> angle<span class="token punctuation">,</span> color<span class="token operator">=</span>ellipseColors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        currEllipse<span class="token punctuation">.</span>set_alpha<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>        h<span class="token punctuation">.</span>add_artist<span class="token punctuation">(</span>currEllipse<span class="token punctuation">)</span>        h<span class="token punctuation">.</span>text<span class="token punctuation">(</span>mean<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">,</span> mean<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> ellipseTextMessages<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="绘制投篮尝试的二维高斯分布"><a href="#绘制投篮尝试的二维高斯分布" class="headerlink" title="绘制投篮尝试的二维高斯分布"></a>绘制投篮尝试的二维高斯分布</h3><p>每个椭圆是代表距高斯中心 2.5 个标准偏差的计数每个蓝色数字代表所有镜头中从该高斯中拍摄的镜头的百分比</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 设置参数</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'figure.figsize'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.size'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">15</span>ellipseTextMessages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span>gaussianMixtureModel<span class="token punctuation">.</span>weights_<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'%'</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>numGaussians<span class="token punctuation">)</span><span class="token punctuation">]</span>ellipseColors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'green'</span><span class="token punctuation">,</span><span class="token string">'purple'</span><span class="token punctuation">,</span><span class="token string">'cyan'</span><span class="token punctuation">,</span><span class="token string">'magenta'</span><span class="token punctuation">,</span><span class="token string">'yellow'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token string">'orange'</span><span class="token punctuation">,</span><span class="token string">'silver'</span><span class="token punctuation">,</span><span class="token string">'maroon'</span><span class="token punctuation">,</span><span class="token string">'lime'</span><span class="token punctuation">,</span><span class="token string">'olive'</span><span class="token punctuation">,</span><span class="token string">'brown'</span><span class="token punctuation">,</span><span class="token string">'darkblue'</span><span class="token punctuation">]</span><span class="token comment"># 绘图2D高斯混合</span>Draw2DGaussians<span class="token punctuation">(</span>gaussianMixtureModel<span class="token punctuation">,</span> ellipseColors<span class="token punctuation">,</span> ellipseTextMessages<span class="token punctuation">)</span>draw_court<span class="token punctuation">(</span>outer_lines<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">440</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token number">270</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">270</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'shot attempts'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Text(0.5, 1.0, 'shot attempts')</code></pre><p><img src="https://s2.loli.net/2022/03/20/AaJKdqh4gBXUYxl.png" alt="png"></p><p>我们可以看到科比在球场左侧（或从他的角度来看是右侧）进行了更多的尝试。这可能是因为他是右撇子。<br>此外，我们可以看到大量的尝试（18.3%）来自篮筐正下方，4.96%的额外尝试来自非常接近篮筐的尝试</p><h3 id="根据-GMM-显示由集群分配着色的科比所有投篮尝试的散点图"><a href="#根据-GMM-显示由集群分配着色的科比所有投篮尝试的散点图" class="headerlink" title="根据 GMM 显示由集群分配着色的科比所有投篮尝试的散点图"></a>根据 GMM 显示由集群分配着色的科比所有投篮尝试的散点图</h3><p>只是为了确保高斯模型实际上捕捉到一些东西</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 参数</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'figure.figsize'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.size'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">15</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> draw_court<span class="token punctuation">(</span>outer_lines<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">440</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token number">270</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">270</span><span class="token punctuation">)</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'cluser assignment'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token string">'loc_x'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token string">'loc_y'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token string">'shotLocationCluster'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">,</span>cmap<span class="token operator">=</span><span class="token string">'hsv'</span><span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;matplotlib.collections.PathCollection at 0x15aedc0fee0&gt;</code></pre><p><img src="https://s2.loli.net/2022/03/20/rGAgIEMbeutfp19.png" alt="png"></p><p>它看起来并不完美，但肯定会捕捉到一些关于数据的有趣的东西，<br>例如，我们可以看到大而非常远的集群正在捕捉所有非常远的镜头</p><h3 id="绘制每个高斯簇的射击精度"><a href="#绘制每个高斯簇的射击精度" class="headerlink" title="绘制每个高斯簇的射击精度"></a>绘制每个高斯簇的射击精度</h3><p>这里的每个蓝色数字将代表从该集群拍摄的镜头的准确性，因此我们可以了解哪些是容易的，哪些是困难的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% 对于每个集群，计算它的单个准确度并绘制它</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'figure.figsize'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.size'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">15</span><span class="token comment">#可分类类别-投射位置集群</span>variableCategories <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'shotLocationCluster'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>index<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 这里按照分类进行了计算</span>clusterAccuracy <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> category <span class="token keyword">in</span> variableCategories<span class="token punctuation">:</span>    <span class="token comment"># 计算总和</span>    shotsAttempted <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'shotLocationCluster'</span><span class="token punctuation">]</span> <span class="token operator">==</span> category<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    shotsMade <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'shotLocationCluster'</span><span class="token punctuation">]</span> <span class="token operator">==</span> category<span class="token punctuation">,</span><span class="token string">'shot_made_flag'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    clusterAccuracy<span class="token punctuation">[</span>category<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>shotsMade<span class="token punctuation">)</span><span class="token operator">/</span>shotsAttemptedellipseTextMessages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span>clusterAccuracy<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'%'</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>numGaussians<span class="token punctuation">)</span><span class="token punctuation">]</span>Draw2DGaussians<span class="token punctuation">(</span>gaussianMixtureModel<span class="token punctuation">,</span> ellipseColors<span class="token punctuation">,</span> ellipseTextMessages<span class="token punctuation">)</span>draw_court<span class="token punctuation">(</span>outer_lines<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">;</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">440</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token number">270</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">270</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'shot accuracy'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Text(0.5, 1.0, 'shot accuracy')</code></pre><p>​<br><img src="https://s2.loli.net/2022/03/20/oSfOQkFANMwl2dE.png" alt="png"><br>​    </p><p>我们可以清楚地看到距离和精度之间的依赖关系<br>另一个有趣的事实是，科比不仅从右侧进行更多的尝试（从他的角度来看），而且他更擅长进行这些尝试</p><h2 id="为了以后的分析，我们将要根据击球属性来评估击球难度"><a href="#为了以后的分析，我们将要根据击球属性来评估击球难度" class="headerlink" title="为了以后的分析，我们将要根据击球属性来评估击球难度"></a>为了以后的分析，我们将要根据击球属性来评估击球难度</h2><p>（如击球类型和击球距离）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% create a new table for shot difficulty model</span><span class="token comment"># 为击球难度模型创建一个新表--分解分类变量</span><span class="token keyword">def</span> <span class="token function">FactorizeCategoricalVariable</span><span class="token punctuation">(</span>inputDB<span class="token punctuation">,</span>categoricalVarName<span class="token punctuation">)</span><span class="token punctuation">:</span>    opponentCategories <span class="token operator">=</span> inputDB<span class="token punctuation">[</span>categoricalVarName<span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>index<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>        outputDB <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> category <span class="token keyword">in</span> opponentCategories<span class="token punctuation">:</span>        featureName <span class="token operator">=</span> categoricalVarName <span class="token operator">+</span> <span class="token string">': '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span>        outputDB<span class="token punctuation">[</span>featureName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>inputDB<span class="token punctuation">[</span>categoricalVarName<span class="token punctuation">]</span> <span class="token operator">==</span> category<span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> outputDBfeaturesDB <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>featuresDB<span class="token punctuation">[</span><span class="token string">'homeGame'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'matchup'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'@'</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span>featuresDB <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>featuresDB<span class="token punctuation">,</span>FactorizeCategoricalVariable<span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token string">'opponent'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>featuresDB <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>featuresDB<span class="token punctuation">,</span>FactorizeCategoricalVariable<span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token string">'action_type'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>featuresDB <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>featuresDB<span class="token punctuation">,</span>FactorizeCategoricalVariable<span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token string">'shot_type'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>featuresDB <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>featuresDB<span class="token punctuation">,</span>FactorizeCategoricalVariable<span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token string">'combined_shot_type'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>featuresDB <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>featuresDB<span class="token punctuation">,</span>FactorizeCategoricalVariable<span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token string">'shot_zone_basic'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>featuresDB <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>featuresDB<span class="token punctuation">,</span>FactorizeCategoricalVariable<span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token string">'shot_zone_area'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>featuresDB <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>featuresDB<span class="token punctuation">,</span>FactorizeCategoricalVariable<span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token string">'shot_zone_range'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>featuresDB <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>featuresDB<span class="token punctuation">,</span>FactorizeCategoricalVariable<span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token string">'shotLocationCluster'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>featuresDB<span class="token punctuation">[</span><span class="token string">'playoffGame'</span><span class="token punctuation">]</span>          <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'playoffs'</span><span class="token punctuation">]</span>featuresDB<span class="token punctuation">[</span><span class="token string">'locX'</span><span class="token punctuation">]</span>                 <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'loc_x'</span><span class="token punctuation">]</span>featuresDB<span class="token punctuation">[</span><span class="token string">'locY'</span><span class="token punctuation">]</span>                 <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'loc_y'</span><span class="token punctuation">]</span>featuresDB<span class="token punctuation">[</span><span class="token string">'distanceFromBasket'</span><span class="token punctuation">]</span>   <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'shot_distance'</span><span class="token punctuation">]</span>featuresDB<span class="token punctuation">[</span><span class="token string">'secondsFromPeriodEnd'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'secondsFromPeriodEnd'</span><span class="token punctuation">]</span>featuresDB<span class="token punctuation">[</span><span class="token string">'dayOfWeek_cycX'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token operator">*</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'dayOfWeek'</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>featuresDB<span class="token punctuation">[</span><span class="token string">'dayOfWeek_cycY'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token operator">*</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'dayOfWeek'</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>featuresDB<span class="token punctuation">[</span><span class="token string">'timeOfYear_cycX'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token operator">*</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'dayOfYear'</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">365</span><span class="token punctuation">)</span><span class="token punctuation">)</span>featuresDB<span class="token punctuation">[</span><span class="token string">'timeOfYear_cycY'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token operator">*</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'dayOfYear'</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">365</span><span class="token punctuation">)</span><span class="token punctuation">)</span>labelsDB <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'shot_made_flag'</span><span class="token punctuation">]</span>featuresDB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>homeGame</th>      <th>opponent: SAS</th>      <th>opponent: PHX</th>      <th>opponent: HOU</th>      <th>opponent: SAC</th>      <th>opponent: DEN</th>      <th>opponent: POR</th>      <th>opponent: UTA</th>      <th>opponent: MIN</th>      <th>opponent: GSW</th>      <th>...</th>      <th>shotLocationCluster: 9</th>      <th>playoffGame</th>      <th>locX</th>      <th>locY</th>      <th>distanceFromBasket</th>      <th>secondsFromPeriodEnd</th>      <th>dayOfWeek_cycX</th>      <th>dayOfWeek_cycY</th>      <th>timeOfYear_cycX</th>      <th>timeOfYear_cycY</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>-157</td>      <td>0</td>      <td>15</td>      <td>622</td>      <td>0.781831</td>      <td>0.62349</td>      <td>-0.858764</td>      <td>0.512371</td>    </tr>    <tr>      <th>1</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>-101</td>      <td>135</td>      <td>16</td>      <td>465</td>      <td>0.781831</td>      <td>0.62349</td>      <td>-0.858764</td>      <td>0.512371</td>    </tr>    <tr>      <th>2</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>138</td>      <td>175</td>      <td>22</td>      <td>412</td>      <td>0.781831</td>      <td>0.62349</td>      <td>-0.858764</td>      <td>0.512371</td>    </tr>    <tr>      <th>3</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>379</td>      <td>0.781831</td>      <td>0.62349</td>      <td>-0.858764</td>      <td>0.512371</td>    </tr>    <tr>      <th>4</th>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>-145</td>      <td>-11</td>      <td>14</td>      <td>572</td>      <td>0.781831</td>      <td>0.62349</td>      <td>-0.858764</td>      <td>0.512371</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>25692</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>424</td>      <td>0.000000</td>      <td>1.00000</td>      <td>0.196673</td>      <td>-0.980469</td>    </tr>    <tr>      <th>25693</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>1</td>      <td>1</td>      <td>48</td>      <td>4</td>      <td>365</td>      <td>0.000000</td>      <td>1.00000</td>      <td>0.196673</td>      <td>-0.980469</td>    </tr>    <tr>      <th>25694</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>1</td>      <td>-134</td>      <td>166</td>      <td>21</td>      <td>208</td>      <td>0.000000</td>      <td>1.00000</td>      <td>0.196673</td>      <td>-0.980469</td>    </tr>    <tr>      <th>25695</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>1</td>      <td>31</td>      <td>267</td>      <td>26</td>      <td>130</td>      <td>0.000000</td>      <td>1.00000</td>      <td>0.196673</td>      <td>-0.980469</td>    </tr>    <tr>      <th>25696</th>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>1</td>      <td>1</td>      <td>72</td>      <td>7</td>      <td>39</td>      <td>0.000000</td>      <td>1.00000</td>      <td>0.196673</td>      <td>-0.980469</td>    </tr>  </tbody></table><p>25697 rows × 137 columns</p></div><h3 id="基于-featuresDB-表构建模型，并确保它不会过拟合"><a href="#基于-featuresDB-表构建模型，并确保它不会过拟合" class="headerlink" title="基于 featuresDB 表构建模型，并确保它不会过拟合"></a>基于 featuresDB 表构建模型，并确保它不会过拟合</h3><p>（即训练误差和测试误差相同）<br>为此使用 ExtraTreesClassifier</p><h3 id="极端随机树分类器。"><a href="#极端随机树分类器。" class="headerlink" title="极端随机树分类器。"></a>极端随机树分类器。</h3><p>此类实现一种元估计器，该估计器可将多个随机决策树（又名极端随机树）拟合到数据集的各个子样本上，并使用平均来提高预测准确性和控制过度拟合。</p><p>在极端随机树(参见 ExtraTreesClassifier 和 ExtraTreesRegressor 类)中，计算分割点方法中的随机性进一步增强。与随机森林中一样，使用了候选特征的随机子集，但不像随机森林中是寻找最具区分度的阈值，而是对每个候选特征随机绘制阈值，并选择这些随机生成的阈值中最佳的作为作为分割规则。这种做法通常能够减少一点模型的方差，代价则是略微地增大偏差：</p><p>随机森林的扩展</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% build a simple model and make sure it doesnt overfit</span>randomSeed <span class="token operator">=</span> <span class="token number">1</span>numFolds   <span class="token operator">=</span> <span class="token number">4</span><span class="token comment"># 这里进行随机森林的分成</span>stratifiedCV <span class="token operator">=</span> model_selection<span class="token punctuation">.</span>StratifiedKFold<span class="token punctuation">(</span>n_splits<span class="token operator">=</span>numFolds<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span>randomSeed<span class="token punctuation">)</span>mainLearner <span class="token operator">=</span> ensemble<span class="token punctuation">.</span>ExtraTreesClassifier<span class="token punctuation">(</span>n_estimators<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span> max_depth<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>                                             min_samples_leaf<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">,</span> max_features<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">,</span>                                             criterion<span class="token operator">=</span><span class="token string">'entropy'</span><span class="token punctuation">,</span> bootstrap<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                                             n_jobs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span>randomSeed<span class="token punctuation">)</span>startTime <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>trainAccuracy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> validAccuracy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>trainLogLosses <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> validLogLosses <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> trainInds<span class="token punctuation">,</span> validInds <span class="token keyword">in</span> stratifiedCV<span class="token punctuation">.</span>split<span class="token punctuation">(</span>featuresDB<span class="token punctuation">,</span> labelsDB<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># split to train and valid sets</span>    X_train_CV <span class="token operator">=</span> featuresDB<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>trainInds<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    y_train_CV <span class="token operator">=</span> labelsDB<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>trainInds<span class="token punctuation">]</span>    X_valid_CV <span class="token operator">=</span> featuresDB<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>validInds<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    y_valid_CV <span class="token operator">=</span> labelsDB<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>validInds<span class="token punctuation">]</span>        <span class="token comment"># train learner训练模型</span>    mainLearner<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train_CV<span class="token punctuation">,</span> y_train_CV<span class="token punctuation">)</span>        <span class="token comment"># make predictions预测</span>    y_train_hat_mainLearner <span class="token operator">=</span> mainLearner<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>X_train_CV<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>    y_valid_hat_mainLearner <span class="token operator">=</span> mainLearner<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>X_valid_CV<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment"># store results保存结果</span>    trainAccuracy<span class="token punctuation">.</span>append<span class="token punctuation">(</span>accuracy<span class="token punctuation">(</span>y_train_CV<span class="token punctuation">,</span> y_train_hat_mainLearner <span class="token operator">&gt;</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    validAccuracy<span class="token punctuation">.</span>append<span class="token punctuation">(</span>accuracy<span class="token punctuation">(</span>y_valid_CV<span class="token punctuation">,</span> y_valid_hat_mainLearner <span class="token operator">&gt;</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    trainLogLosses<span class="token punctuation">.</span>append<span class="token punctuation">(</span>log_loss<span class="token punctuation">(</span>y_train_CV<span class="token punctuation">,</span> y_train_hat_mainLearner<span class="token punctuation">)</span><span class="token punctuation">)</span>    validLogLosses<span class="token punctuation">.</span>append<span class="token punctuation">(</span>log_loss<span class="token punctuation">(</span>y_valid_CV<span class="token punctuation">,</span> y_valid_hat_mainLearner<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----------------------------------------------------"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"total (train,valid) Accuracy = (%.5f,%.5f). took %.2f minutes"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>trainAccuracy<span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>validAccuracy<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>startTime<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"total (train,valid) Log Loss = (%.5f,%.5f). took %.2f minutes"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>trainLogLosses<span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>validLogLosses<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>startTime<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----------------------------------------------------"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>-----------------------------------------------------total (train,valid) Accuracy = (0.67943,0.67860). took 0.25 minutestotal (train,valid) Log Loss = (0.60809,0.61073). took 0.25 minutes-----------------------------------------------------</code></pre><h3 id="使用模型为每个原始镜头条目添加一个“shotDifficulty”字段"><a href="#使用模型为每个原始镜头条目添加一个“shotDifficulty”字段" class="headerlink" title="使用模型为每个原始镜头条目添加一个“shotDifficulty”字段"></a>使用模型为每个原始镜头条目添加一个“shotDifficulty”字段</h3><p>（这实际上是预测的投篮概率。意思是，这个名字现在有点混乱）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mainLearner<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>featuresDB<span class="token punctuation">,</span> labelsDB<span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'shotDifficulty'</span><span class="token punctuation">]</span> <span class="token operator">=</span> mainLearner<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>featuresDB<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="感受一下这个模型的重要特征"><a href="#感受一下这个模型的重要特征" class="headerlink" title="感受一下这个模型的重要特征"></a>感受一下这个模型的重要特征</h3><p>根据 ET Classifier 查看特征重要性</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># just to get a feel for what determins shot difficulty, look at feature importances</span><span class="token comment"># 只是为了感受一下决定镜头难度的因素，看看特征的重要性</span><span class="token comment"># 特征权重</span>featureInds <span class="token operator">=</span> mainLearner<span class="token punctuation">.</span>feature_importances_<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>featureImportance <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>featuresDB<span class="token punctuation">.</span>columns<span class="token punctuation">[</span>featureInds<span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mainLearner<span class="token punctuation">.</span>feature_importances_<span class="token punctuation">[</span>featureInds<span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                  columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'featureName'</span><span class="token punctuation">,</span> <span class="token string">'importanceET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>featureImportance<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;ipython-input-16-f3ba149f9243&gt;:3: FutureWarning: Support for multi-dimensional indexing (e.g. `obj[:, None]`) is deprecated and will be removed in a future version.  Convert to a numpy array before indexing instead.  featureImportance = pd.DataFrame(np.concatenate((featuresDB.columns[featureInds,None], mainLearner.feature_importances_[featureInds,None]), axis=1),</code></pre><div><style scoped="">    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>featureName</th>      <th>importanceET</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>action_type: Jump Shot</td>      <td>0.576316</td>    </tr>    <tr>      <th>1</th>      <td>action_type: Layup Shot</td>      <td>0.173444</td>    </tr>    <tr>      <th>2</th>      <td>combined_shot_type: Dunk</td>      <td>0.113137</td>    </tr>    <tr>      <th>3</th>      <td>homeGame</td>      <td>0.028864</td>    </tr>    <tr>      <th>4</th>      <td>shotLocationCluster: 9</td>      <td>0.016723</td>    </tr>    <tr>      <th>5</th>      <td>action_type: Dunk Shot</td>      <td>0.016178</td>    </tr>    <tr>      <th>6</th>      <td>combined_shot_type: Layup</td>      <td>0.009613</td>    </tr>    <tr>      <th>7</th>      <td>distanceFromBasket</td>      <td>0.00785</td>    </tr>    <tr>      <th>8</th>      <td>shot_zone_range: 16-24 ft.</td>      <td>0.007236</td>    </tr>    <tr>      <th>9</th>      <td>action_type: Slam Dunk Shot</td>      <td>0.006951</td>    </tr>    <tr>      <th>10</th>      <td>combined_shot_type: Jump Shot</td>      <td>0.006166</td>    </tr>    <tr>      <th>11</th>      <td>action_type: Running Jump Shot</td>      <td>0.005795</td>    </tr>    <tr>      <th>12</th>      <td>secondsFromPeriodEnd</td>      <td>0.00464</td>    </tr>    <tr>      <th>13</th>      <td>shotLocationCluster: 3</td>      <td>0.004547</td>    </tr>    <tr>      <th>14</th>      <td>action_type: Driving Layup Shot</td>      <td>0.004058</td>    </tr>    <tr>      <th>15</th>      <td>locY</td>      <td>0.003683</td>    </tr>    <tr>      <th>16</th>      <td>shot_zone_range: Less Than 8 ft.</td>      <td>0.003164</td>    </tr>    <tr>      <th>17</th>      <td>combined_shot_type: Tip Shot</td>      <td>0.00228</td>    </tr>    <tr>      <th>18</th>      <td>shot_zone_area: Center(C)</td>      <td>0.001243</td>    </tr>    <tr>      <th>19</th>      <td>opponent: DEN</td>      <td>0.000948</td>    </tr>    <tr>      <th>20</th>      <td>action_type: Driving Dunk Shot</td>      <td>0.000826</td>    </tr>    <tr>      <th>21</th>      <td>shot_zone_basic: Restricted Area</td>      <td>0.00074</td>    </tr>    <tr>      <th>22</th>      <td>action_type: Pullup Jump shot</td>      <td>0.000584</td>    </tr>    <tr>      <th>23</th>      <td>shot_zone_basic: Mid-Range</td>      <td>0.000545</td>    </tr>    <tr>      <th>24</th>      <td>dayOfWeek_cycX</td>      <td>0.000477</td>    </tr>    <tr>      <th>25</th>      <td>shotLocationCluster: 6</td>      <td>0.000462</td>    </tr>    <tr>      <th>26</th>      <td>timeOfYear_cycX</td>      <td>0.000444</td>    </tr>    <tr>      <th>27</th>      <td>shot_zone_basic: Above the Break 3</td>      <td>0.000285</td>    </tr>    <tr>      <th>28</th>      <td>action_type: Tip Shot</td>      <td>0.000283</td>    </tr>    <tr>      <th>29</th>      <td>shot_zone_range: 8-16 ft.</td>      <td>0.00027</td>    </tr>  </tbody></table></div><h3 id="我们想评估科比·布莱恩特决策过程的某些方面"><a href="#我们想评估科比·布莱恩特决策过程的某些方面" class="headerlink" title="我们想评估科比·布莱恩特决策过程的某些方面"></a>我们想评估科比·布莱恩特决策过程的某些方面</h3><p>为此，我们将收集两组不同的镜头并分析它们之间的差异</p><p>成功投篮后的投篮</p><p>投篮失败后立即投篮</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% collect data given that kobe made or missed last shot</span><span class="token comment"># 收集数据，因为科比最后一次投篮命中或失手</span>timeBetweenShotsDict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>timeBetweenShotsDict<span class="token punctuation">[</span><span class="token string">'madeLast'</span><span class="token punctuation">]</span>   <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>timeBetweenShotsDict<span class="token punctuation">[</span><span class="token string">'missedLast'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>changeInDistFromBasketDict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>changeInDistFromBasketDict<span class="token punctuation">[</span><span class="token string">'madeLast'</span><span class="token punctuation">]</span>   <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>changeInDistFromBasketDict<span class="token punctuation">[</span><span class="token string">'missedLast'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>changeInShotDifficultyDict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>changeInShotDifficultyDict<span class="token punctuation">[</span><span class="token string">'madeLast'</span><span class="token punctuation">]</span>   <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>changeInShotDifficultyDict<span class="token punctuation">[</span><span class="token string">'missedLast'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>afterMadeShotsList   <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>afterMissedShotsList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> shot <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># make sure the current shot and last shot were all in the same period of the same game</span>    <span class="token comment"># 确保当前击球和最后一次击球都在同一场比赛的同一时期</span>    sameGame   <span class="token operator">=</span> data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>shot<span class="token punctuation">,</span><span class="token string">'game_date'</span><span class="token punctuation">]</span> <span class="token operator">==</span> data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>shot<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'game_date'</span><span class="token punctuation">]</span>    samePeriod <span class="token operator">=</span> data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>shot<span class="token punctuation">,</span><span class="token string">'period'</span><span class="token punctuation">]</span>    <span class="token operator">==</span> data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>shot<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'period'</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> samePeriod <span class="token keyword">and</span> sameGame<span class="token punctuation">:</span>        madeLastShot       <span class="token operator">=</span> data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>shot<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'shot_made_flag'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span>        missedLastShot     <span class="token operator">=</span> data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>shot<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'shot_made_flag'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span>                timeDifferenceFromLastShot <span class="token operator">=</span> data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>shot<span class="token punctuation">,</span><span class="token string">'secondsFromGameStart'</span><span class="token punctuation">]</span>     <span class="token operator">-</span> data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>shot<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'secondsFromGameStart'</span><span class="token punctuation">]</span>        distDifferenceFromLastShot <span class="token operator">=</span> data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>shot<span class="token punctuation">,</span><span class="token string">'shot_distance'</span><span class="token punctuation">]</span>            <span class="token operator">-</span> data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>shot<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'shot_distance'</span><span class="token punctuation">]</span>        shotDifficultyDifferenceFromLastShot <span class="token operator">=</span> data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>shot<span class="token punctuation">,</span><span class="token string">'shotDifficulty'</span><span class="token punctuation">]</span> <span class="token operator">-</span> data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>shot<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'shotDifficulty'</span><span class="token punctuation">]</span>        <span class="token comment"># check for currupt data points (assuming all samples should have been chronologically ordered)</span>        <span class="token comment"># 检查损坏的数据点（假设所有样本都应按时间顺序排列）</span>        <span class="token keyword">if</span> timeDifferenceFromLastShot <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>                <span class="token keyword">if</span> madeLastShot<span class="token punctuation">:</span>            timeBetweenShotsDict<span class="token punctuation">[</span><span class="token string">'madeLast'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>timeDifferenceFromLastShot<span class="token punctuation">)</span>            changeInDistFromBasketDict<span class="token punctuation">[</span><span class="token string">'madeLast'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>distDifferenceFromLastShot<span class="token punctuation">)</span>            changeInShotDifficultyDict<span class="token punctuation">[</span><span class="token string">'madeLast'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>shotDifficultyDifferenceFromLastShot<span class="token punctuation">)</span>            afterMadeShotsList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>shot<span class="token punctuation">)</span>                    <span class="token keyword">if</span> missedLastShot<span class="token punctuation">:</span>            timeBetweenShotsDict<span class="token punctuation">[</span><span class="token string">'missedLast'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>timeDifferenceFromLastShot<span class="token punctuation">)</span>            changeInDistFromBasketDict<span class="token punctuation">[</span><span class="token string">'missedLast'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>distDifferenceFromLastShot<span class="token punctuation">)</span>            changeInShotDifficultyDict<span class="token punctuation">[</span><span class="token string">'missedLast'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>shotDifficultyDifferenceFromLastShot<span class="token punctuation">)</span>            afterMissedShotsList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>shot<span class="token punctuation">)</span>afterMissedData <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>afterMissedShotsList<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>afterMadeData   <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>afterMadeShotsList<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>shotChancesListAfterMade <span class="token operator">=</span> afterMadeData<span class="token punctuation">[</span><span class="token string">'shotDifficulty'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>totalAttemptsAfterMade   <span class="token operator">=</span> afterMadeData<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>totalMadeAfterMade       <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>afterMadeData<span class="token punctuation">[</span><span class="token string">'shot_made_flag'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>shotChancesListAfterMissed <span class="token operator">=</span> afterMissedData<span class="token punctuation">[</span><span class="token string">'shotDifficulty'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>totalAttemptsAfterMissed   <span class="token operator">=</span> afterMissedData<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>totalMadeAfterMissed       <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>afterMissedData<span class="token punctuation">[</span><span class="token string">'shot_made_flag'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="绘制两组的“自上次射击尝试后的时间”的直方图"><a href="#绘制两组的“自上次射击尝试后的时间”的直方图" class="headerlink" title="绘制两组的“自上次射击尝试后的时间”的直方图"></a>绘制两组的“自上次射击尝试后的时间”的直方图</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% 投篮后，科比想要更多</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'figure.figsize'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment"># 直方图导出数据参数</span>jointHist<span class="token punctuation">,</span> timeBins <span class="token operator">=</span> np<span class="token punctuation">.</span>histogram<span class="token punctuation">(</span>timeBetweenShotsDict<span class="token punctuation">[</span><span class="token string">'madeLast'</span><span class="token punctuation">]</span><span class="token operator">+</span>timeBetweenShotsDict<span class="token punctuation">[</span><span class="token string">'missedLast'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>bins<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span>barWidth <span class="token operator">=</span> <span class="token number">0.999</span><span class="token operator">*</span><span class="token punctuation">(</span>timeBins<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>timeBins<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>timeDiffHist_GivenMadeLastShot<span class="token punctuation">,</span> b <span class="token operator">=</span> np<span class="token punctuation">.</span>histogram<span class="token punctuation">(</span>timeBetweenShotsDict<span class="token punctuation">[</span><span class="token string">'madeLast'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>bins<span class="token operator">=</span>timeBins<span class="token punctuation">)</span>timeDiffHist_GivenMissedLastShot<span class="token punctuation">,</span> b <span class="token operator">=</span> np<span class="token punctuation">.</span>histogram<span class="token punctuation">(</span>timeBetweenShotsDict<span class="token punctuation">[</span><span class="token string">'missedLast'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>bins<span class="token operator">=</span>timeBins<span class="token punctuation">)</span>maxHeight <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>timeDiffHist_GivenMadeLastShot<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">max</span><span class="token punctuation">(</span>timeDiffHist_GivenMissedLastShot<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">30</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>timeBins<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> timeDiffHist_GivenMadeLastShot<span class="token punctuation">,</span> width<span class="token operator">=</span>barWidth<span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>maxHeight<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'made last shot'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'counts'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>timeBins<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> timeDiffHist_GivenMissedLastShot<span class="token punctuation">,</span> width<span class="token operator">=</span>barWidth<span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>maxHeight<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'missed last shot'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'time since last shot'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'counts'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Text(0, 0.5, 'counts')</code></pre><p>​<br><img src="https://s2.loli.net/2022/03/20/1SnQF45ItO89wLB.png" alt="png"><br>​    </p><p>看起来，投篮后，科比更渴望投出下一个投篮</p><p>对于每个想知道为什么投篮后会有“沉默期”的人：</p><p>这很可能是因为在成功射门后球被转移到了另一支球队并且需要一些时间才能将球拿回来</p><h3 id="为了更好地显示直方图之间的这种差异，让我们看一下累积直方图"><a href="#为了更好地显示直方图之间的这种差异，让我们看一下累积直方图" class="headerlink" title="为了更好地显示直方图之间的这种差异，让我们看一下累积直方图"></a>为了更好地显示直方图之间的这种差异，让我们看一下累积直方图</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% to make the difference clearer, show the cumulative histogram</span><span class="token comment">#%%为了使区别更加清晰，显示累积直方图</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'figure.figsize'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token comment"># 同上，加入累计</span>timeDiffCumHist_GivenMadeLastShot <span class="token operator">=</span> np<span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span>timeDiffHist_GivenMadeLastShot<span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span>timeDiffCumHist_GivenMadeLastShot <span class="token operator">=</span> timeDiffCumHist_GivenMadeLastShot<span class="token operator">/</span><span class="token builtin">max</span><span class="token punctuation">(</span>timeDiffCumHist_GivenMadeLastShot<span class="token punctuation">)</span>timeDiffCumHist_GivenMissedLastShot <span class="token operator">=</span> np<span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span>timeDiffHist_GivenMissedLastShot<span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span>timeDiffCumHist_GivenMissedLastShot <span class="token operator">=</span> timeDiffCumHist_GivenMissedLastShot<span class="token operator">/</span><span class="token builtin">max</span><span class="token punctuation">(</span>timeDiffCumHist_GivenMissedLastShot<span class="token punctuation">)</span>maxHeight <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>timeDiffCumHist_GivenMadeLastShot<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>timeDiffCumHist_GivenMissedLastShot<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>madePrev <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>timeBins<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> timeDiffCumHist_GivenMadeLastShot<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'made Prev'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span>missedPrev <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>timeBins<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> timeDiffCumHist_GivenMissedLastShot<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'missed Prev'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'cumulative density function - CDF'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'time since last shot'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'lower right'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;matplotlib.legend.Legend at 0x15af22babb0&gt;</code></pre><p>​<br><img src="https://s2.loli.net/2022/03/20/2N1HuPw94r3CQXS.png" alt="png"><br>​    </p><h3 id="绘制两组的“当前射击距离-先前射击距离”的直方图"><a href="#绘制两组的“当前射击距离-先前射击距离”的直方图" class="headerlink" title="绘制两组的“当前射击距离 - 先前射击距离”的直方图"></a>绘制两组的“当前射击距离 - 先前射击距离”的直方图</h3><p>请注意，如果科比从近处投球，然后从远处投球，这将导致“当前投篮距离 - 上一次投篮距离”为正值。反之亦然 - 如果科比从远处投球，然后从近处投球，这将导致负值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% after making a shot, kobe is a more confident and throws from further away</span><span class="token comment">#%%投篮后，科比更加自信，投得更远了</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'figure.figsize'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>jointHist<span class="token punctuation">,</span> distDiffBins <span class="token operator">=</span> np<span class="token punctuation">.</span>histogram<span class="token punctuation">(</span>changeInDistFromBasketDict<span class="token punctuation">[</span><span class="token string">'madeLast'</span><span class="token punctuation">]</span><span class="token operator">+</span>changeInDistFromBasketDict<span class="token punctuation">[</span><span class="token string">'missedLast'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>bins<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>density<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>barWidth <span class="token operator">=</span> <span class="token number">0.999</span><span class="token operator">*</span><span class="token punctuation">(</span>distDiffBins<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>distDiffBins<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>distDiffHist_GivenMadeLastShot<span class="token punctuation">,</span>   b <span class="token operator">=</span> np<span class="token punctuation">.</span>histogram<span class="token punctuation">(</span>changeInDistFromBasketDict<span class="token punctuation">[</span><span class="token string">'madeLast'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>bins<span class="token operator">=</span>distDiffBins<span class="token punctuation">)</span>distDiffHist_GivenMissedLastShot<span class="token punctuation">,</span> b <span class="token operator">=</span> np<span class="token punctuation">.</span>histogram<span class="token punctuation">(</span>changeInDistFromBasketDict<span class="token punctuation">[</span><span class="token string">'missedLast'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>bins<span class="token operator">=</span>distDiffBins<span class="token punctuation">)</span>maxHeight <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>distDiffHist_GivenMadeLastShot<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">max</span><span class="token punctuation">(</span>distDiffHist_GivenMissedLastShot<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">30</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>distDiffBins<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> distDiffHist_GivenMadeLastShot<span class="token punctuation">,</span> width<span class="token operator">=</span>barWidth<span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>maxHeight<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'made last shot'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'counts'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>distDiffBins<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> distDiffHist_GivenMissedLastShot<span class="token punctuation">,</span> width<span class="token operator">=</span>barWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>maxHeight<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'missed last shot'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'curr shot distance - prev shot distance'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'counts'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Text(0, 0.5, 'counts')</code></pre><p>​<br><img src="https://s2.loli.net/2022/03/20/PEWJ8sbf5ncyt3r.png" alt="png"><br>​    </p><p>我们可以清楚地看到，这组投篮更倾向于右侧。</p><p>因此，看起来科比在投篮后更有信心，也正因为如此，他冒了更大的风险，从更远的地方投出。</p><p>这比之前的图更明显，但让我们再次绘制累积直方图，以使其更清晰。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% to make the difference clearer, show the cumulative histogram</span><span class="token comment">#%% 使差异更清晰，显示累积直方图</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'figure.figsize'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>distDiffCumHist_GivenMadeLastShot <span class="token operator">=</span> np<span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span>distDiffHist_GivenMadeLastShot<span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span>distDiffCumHist_GivenMadeLastShot <span class="token operator">=</span> distDiffCumHist_GivenMadeLastShot<span class="token operator">/</span><span class="token builtin">max</span><span class="token punctuation">(</span>distDiffCumHist_GivenMadeLastShot<span class="token punctuation">)</span>distDiffCumHist_GivenMissedLastShot <span class="token operator">=</span> np<span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span>distDiffHist_GivenMissedLastShot<span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span>distDiffCumHist_GivenMissedLastShot <span class="token operator">=</span> distDiffCumHist_GivenMissedLastShot<span class="token operator">/</span><span class="token builtin">max</span><span class="token punctuation">(</span>distDiffCumHist_GivenMissedLastShot<span class="token punctuation">)</span>maxHeight <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>distDiffCumHist_GivenMadeLastShot<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>distDiffCumHist_GivenMissedLastShot<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>madePrev <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>distDiffBins<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> distDiffCumHist_GivenMadeLastShot<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'made Prev'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span>missedPrev <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>distDiffBins<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> distDiffCumHist_GivenMissedLastShot<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'missed Prev'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'cumulative density function - CDF'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'curr shot distance - prev shot distance'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'lower right'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;matplotlib.legend.Legend at 0x15af29b7460&gt;</code></pre><p>​<br><img src="https://s2.loli.net/2022/03/20/7ohAfuSj6TRBG4g.png" alt="png"><br>​    </p><h3 id="最后，让我们绘制两组的“射击难度”变化"><a href="#最后，让我们绘制两组的“射击难度”变化" class="headerlink" title="最后，让我们绘制两组的“射击难度”变化"></a>最后，让我们绘制两组的“射击难度”变化</h3><p>这里的负值表示科比承担了更大的风险，正值表示科比的后续投篮更安全</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% after making a shot, kobe is a more confident and makes much more difficult shots generally</span><span class="token comment">#%% 投篮后，科比更有信心，投篮难度也更大</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'figure.figsize'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>jointHist<span class="token punctuation">,</span> difficultyDiffBins <span class="token operator">=</span> np<span class="token punctuation">.</span>histogram<span class="token punctuation">(</span>changeInShotDifficultyDict<span class="token punctuation">[</span><span class="token string">'madeLast'</span><span class="token punctuation">]</span><span class="token operator">+</span>changeInShotDifficultyDict<span class="token punctuation">[</span><span class="token string">'missedLast'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>bins<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>barWidth <span class="token operator">=</span> <span class="token number">0.999</span><span class="token operator">*</span><span class="token punctuation">(</span>difficultyDiffBins<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>difficultyDiffBins<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>shotDifficultyDiffHist_GivenMadeLastShot<span class="token punctuation">,</span>   b <span class="token operator">=</span> np<span class="token punctuation">.</span>histogram<span class="token punctuation">(</span>changeInShotDifficultyDict<span class="token punctuation">[</span><span class="token string">'madeLast'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>bins<span class="token operator">=</span>difficultyDiffBins<span class="token punctuation">)</span>shotDifficultyDiffHist_GivenMissedLastShot<span class="token punctuation">,</span> b <span class="token operator">=</span> np<span class="token punctuation">.</span>histogram<span class="token punctuation">(</span>changeInShotDifficultyDict<span class="token punctuation">[</span><span class="token string">'missedLast'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>bins<span class="token operator">=</span>difficultyDiffBins<span class="token punctuation">)</span>maxHeight <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>shotDifficultyDiffHist_GivenMadeLastShot<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">max</span><span class="token punctuation">(</span>shotDifficultyDiffHist_GivenMissedLastShot<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">30</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>difficultyDiffBins<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shotDifficultyDiffHist_GivenMadeLastShot<span class="token punctuation">,</span> width<span class="token operator">=</span>barWidth<span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>maxHeight<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'made last shot'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'counts'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>difficultyDiffBins<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shotDifficultyDiffHist_GivenMissedLastShot<span class="token punctuation">,</span> width<span class="token operator">=</span>barWidth<span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>maxHeight<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'missed last shot'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'chance to make curr shot - chance to make prev shot'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'counts'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Text(0, 0.5, 'counts')</code></pre><p>​<br><img src="https://s2.loli.net/2022/03/20/9P3uMgaICGowfJZ.png" alt="png"><br>​    </p><p>我们可以看到左侧的情节更重</p><p>因此，现在更明显的是，科比在投篮后感觉自己“在禁区内”</p><p>因此他允许自己尝试更困难的投篮</p><p>你们中的一些人可能想知道这是否只是回归均值</p><p>这种想法是合理的，因为所有成功的尝试本质上都偏向于更容易的投篮，如果我们使用“投篮难度变化”等相对措施，我们肯定会通过简单的“回归均值”来获得这种效果，因此我们需要确保不是这样。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% is this regression to the mean?</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'figure.figsize'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment"># 中位数</span>accuracyAllShots    <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'shot_made_flag'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>accuracyAfterMade   <span class="token operator">=</span> afterMadeData<span class="token punctuation">[</span><span class="token string">'shot_made_flag'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>accuracyAfterMissed <span class="token operator">=</span> afterMissedData<span class="token punctuation">[</span><span class="token string">'shot_made_flag'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>standardErrorAllShots    <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>accuracyAllShots<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>accuracyAllShots<span class="token punctuation">)</span><span class="token operator">/</span>data<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>standardErrorAfterMade   <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>accuracyAfterMade<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>accuracyAfterMade<span class="token punctuation">)</span><span class="token operator">/</span>afterMadeData<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>standardErrorAfterMissed <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>accuracyAfterMissed<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>accuracyAfterMissed<span class="token punctuation">)</span><span class="token operator">/</span>afterMissedData<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>accuracyVec <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>accuracyAfterMade<span class="token punctuation">,</span>accuracyAllShots<span class="token punctuation">,</span>accuracyAfterMissed<span class="token punctuation">]</span><span class="token punctuation">)</span>errorVec    <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>standardErrorAfterMade<span class="token punctuation">,</span>standardErrorAllShots<span class="token punctuation">,</span>standardErrorAfterMissed<span class="token punctuation">]</span><span class="token punctuation">)</span>barWidth <span class="token operator">=</span> <span class="token number">0.7</span>xLocs <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>accuracyVec<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.5</span>fig<span class="token punctuation">,</span> h <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> h<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>xLocs<span class="token punctuation">,</span> accuracyVec<span class="token punctuation">,</span> barWidth<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">,</span> yerr<span class="token operator">=</span>errorVec<span class="token punctuation">)</span>h<span class="token punctuation">.</span>set_xticks<span class="token punctuation">(</span>xLocs<span class="token punctuation">)</span><span class="token punctuation">;</span> h<span class="token punctuation">.</span>set_xticklabels<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'after made'</span><span class="token punctuation">,</span> <span class="token string">'all shots'</span><span class="token punctuation">,</span> <span class="token string">'after missed'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.41</span><span class="token punctuation">,</span><span class="token number">0.47</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.3</span><span class="token punctuation">,</span><span class="token number">3.3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'not regression to the mean'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Text(0.5, 1.0, 'not regression to the mean')</code></pre><p><img src="https://s2.loli.net/2022/03/20/uVvlZ2W7SerdEM9.png" alt="png"></p><p>科比的 “热手 “感觉是正确的吗？</p><p>也许科比真的是 “在状态”，因此，他承担更多困难的投篮是 “可以的”？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% but wait, maybe kobe is making more difficult shots because he's "in the zone"</span><span class="token comment">#%% 但是等等，也许科比投篮更难，因为他“在区内”</span>predictedShotPercentAfterMade <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>shotChancesListAfterMade<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>predictedStadardDev <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>predictedShotPercentAfterMade<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>predictedShotPercentAfterMade<span class="token punctuation">)</span><span class="token punctuation">)</span>stadardError <span class="token operator">=</span> predictedStadardDev<span class="token operator">/</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>shotChancesListAfterMade<span class="token punctuation">)</span><span class="token punctuation">)</span>predPlusErr  <span class="token operator">=</span> predictedShotPercentAfterMade <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span>stadardErrorpredMinusErr <span class="token operator">=</span> predictedShotPercentAfterMade <span class="token operator">-</span> <span class="token number">2</span><span class="token operator">*</span>stadardErroractualShotPercentAfterMade <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>totalMadeAfterMade<span class="token punctuation">)</span><span class="token operator">/</span>totalAttemptsAfterMade<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----------------------------------------------------"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'provided that kobe MADE the previous shot:'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'according to "shotDifficulty" model, 95% confidence interval ['</span><span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>predMinusErr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">', '</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>predPlusErr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'and Kobe actually made '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>actualShotPercentAfterMade<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">', which is within confidence interval'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----------------------------------------------------"</span><span class="token punctuation">)</span>predictedShotPercentAfterMissed <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>shotChancesListAfterMissed<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>predictedStadardDev <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>predictedShotPercentAfterMissed<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>predictedShotPercentAfterMissed<span class="token punctuation">)</span><span class="token punctuation">)</span>stadardError <span class="token operator">=</span> predictedStadardDev<span class="token operator">/</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>shotChancesListAfterMissed<span class="token punctuation">)</span><span class="token punctuation">)</span>predPlusErr  <span class="token operator">=</span> predictedShotPercentAfterMissed <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span>stadardErrorpredMinusErr <span class="token operator">=</span> predictedShotPercentAfterMissed <span class="token operator">-</span> <span class="token number">2</span><span class="token operator">*</span>stadardErroractualShotPercentAfterMissed <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>totalMadeAfterMissed<span class="token punctuation">)</span><span class="token operator">/</span>totalAttemptsAfterMissed<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----------------------------------------------------"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'provided that kobe MISSED the previous shot:'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'according to "shotDifficulty" model, 95% confidence interval ['</span><span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>predMinusErr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">', '</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>predPlusErr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'and Kobe actually made '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>actualShotPercentAfterMissed<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">', which is within confidence interval'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----------------------------------------------------"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>-----------------------------------------------------provided that kobe MADE the previous shot:according to "shotDifficulty" model, 95% confidence interval [0.42568083447871047, 0.4463766629455928]and Kobe actually made 0.4390376660134988, which is within confidence interval----------------------------------------------------------------------------------------------------------provided that kobe MISSED the previous shot:according to "shotDifficulty" model, 95% confidence interval [0.4449084663926188, 0.46422741645916415]and Kobe actually made 0.45338225609182425, which is within confidence interval-----------------------------------------------------</code></pre><p>我们可以看到准确度完全由我们创建的“shotDifficulty”模型解释，该模型不包含任何与热手相关的特征。</p><h3 id="答案似乎是科比没有“热手”效应"><a href="#答案似乎是科比没有“热手”效应" class="headerlink" title="答案似乎是科比没有“热手”效应"></a>答案似乎是科比没有“热手”效应</h3><p>现在让我们试着把它想象得更好一点</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% let's try and visualize this - show scatter plot of after made and after missed shots</span><span class="token comment">#%% 让我们试着想象一下 - 显示投篮后和失手后的散点图</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'figure.figsize'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>afterMissedData <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>afterMissedShotsList<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>afterMadeData <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>afterMadeShotsList<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'shots after made'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span>afterMadeData<span class="token punctuation">[</span><span class="token string">'loc_x'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token operator">=</span>afterMadeData<span class="token punctuation">[</span><span class="token string">'loc_y'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token operator">=</span>afterMadeData<span class="token punctuation">[</span><span class="token string">'shotLocationCluster'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span>cmap<span class="token operator">=</span><span class="token string">'hsv'</span><span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">0.06</span><span class="token punctuation">)</span>draw_court<span class="token punctuation">(</span>outer_lines<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">440</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token number">270</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">270</span><span class="token punctuation">)</span><span class="token punctuation">;</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'shots after missed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span>afterMissedData<span class="token punctuation">[</span><span class="token string">'loc_x'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token operator">=</span>afterMissedData<span class="token punctuation">[</span><span class="token string">'loc_y'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token operator">=</span>afterMissedData<span class="token punctuation">[</span><span class="token string">'shotLocationCluster'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span>cmap<span class="token operator">=</span><span class="token string">'hsv'</span><span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">0.06</span><span class="token punctuation">)</span>draw_court<span class="token punctuation">(</span>outer_lines<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">440</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token number">270</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">270</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/03/20/DhOiE8TbwLfKZnd.png" alt="png"></p><p>可以看到这里的密度差异，但不是很清楚，所以让我们以高斯格式显示数据，希望它会更清晰</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% show shot attempts of after made and after missed shots</span><span class="token comment">#%% 显示投篮后和失手后的投篮尝试</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'figure.figsize'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>variableCategories <span class="token operator">=</span> afterMadeData<span class="token punctuation">[</span><span class="token string">'shotLocationCluster'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>index<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>clusterFrequency <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> category <span class="token keyword">in</span> variableCategories<span class="token punctuation">:</span>    shotsAttempted <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>afterMadeData<span class="token punctuation">[</span><span class="token string">'shotLocationCluster'</span><span class="token punctuation">]</span> <span class="token operator">==</span> category<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    clusterFrequency<span class="token punctuation">[</span>category<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>shotsAttempted<span class="token punctuation">)</span><span class="token operator">/</span>afterMadeData<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>ellipseTextMessages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span>clusterFrequency<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'%'</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>numGaussians<span class="token punctuation">)</span><span class="token punctuation">]</span>Draw2DGaussians<span class="token punctuation">(</span>gaussianMixtureModel<span class="token punctuation">,</span> ellipseColors<span class="token punctuation">,</span> ellipseTextMessages<span class="token punctuation">)</span>draw_court<span class="token punctuation">(</span>outer_lines<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">440</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token number">270</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">270</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'after made shots'</span><span class="token punctuation">)</span>variableCategories <span class="token operator">=</span> afterMissedData<span class="token punctuation">[</span><span class="token string">'shotLocationCluster'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>index<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>clusterFrequency <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> category <span class="token keyword">in</span> variableCategories<span class="token punctuation">:</span>    shotsAttempted <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>afterMissedData<span class="token punctuation">[</span><span class="token string">'shotLocationCluster'</span><span class="token punctuation">]</span> <span class="token operator">==</span> category<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    clusterFrequency<span class="token punctuation">[</span>category<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>shotsAttempted<span class="token punctuation">)</span><span class="token operator">/</span>afterMissedData<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>ellipseTextMessages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span>clusterFrequency<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'%'</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>numGaussians<span class="token punctuation">)</span><span class="token punctuation">]</span>Draw2DGaussians<span class="token punctuation">(</span>gaussianMixtureModel<span class="token punctuation">,</span> ellipseColors<span class="token punctuation">,</span> ellipseTextMessages<span class="token punctuation">)</span>draw_court<span class="token punctuation">(</span>outer_lines<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">;</span> plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">440</span><span class="token punctuation">)</span><span class="token punctuation">;</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token number">270</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">270</span><span class="token punctuation">)</span><span class="token punctuation">;</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'after missed shots'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Text(0.5, 1.0, 'after missed shots')</code></pre><p><img src="https://s2.loli.net/2022/03/20/mqZdtGNyHp6kOzT.png" alt="202203202232457.png"></p><p><img src="https://s2.loli.net/2022/03/20/HhyAGPQjO6SrV3R.png" alt="202203202232393.png">    </p><p>现在很明显，在投篮不中后，与投篮后相比，科比更有可能直接从篮下投篮</p><p>也很明显，在投篮后，科比更有可能尝试三分球作为他的下一次投篮</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学建模总结</title>
      <link href="/2022/01/19/2022-1-19-shu-xue-jian-mo-ru-men/"/>
      <url>/2022/01/19/2022-1-19-shu-xue-jian-mo-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="数学建模介绍"><a href="#数学建模介绍" class="headerlink" title="数学建模介绍"></a>数学建模介绍</h2><h3 id="数学建模是什么"><a href="#数学建模是什么" class="headerlink" title="数学建模是什么"></a>数学建模是什么</h3><p>数学模型是利用系统化的符号和数学表达式对间题的一种抽象描述。数学建模可看作是把问题定义转换为数学模型的过程。 和问题定义相对应，数学模型包括几个主要组成部分：决策变量、环境变量、目标函数和约束条件。决策变量表示决策者可以控制的因素，即可控输入，是需要通过模型求解来确定的模型中的未知变量。环境变量表示决策者不可控的外界因素，即非可控输入，需要在收集数据阶段确定其具体数值，并在模型中以常量表示。目标函数是指描述问题目标的数学方程，而约束条件则是指描述问题中制约和限制因素的数学表达式（等式或不等式）。（这个主要是规划的一种定义） </p><p>简单来说，就是利用数学知识和专业知识解决生活中的问题。这里最常见的有优化模型，预测模型。比如工业流程的优化，最佳策略的选取，数据预测等等，解决这些本质还是利用数学相关的知识。</p><p>个人感觉：数字建模就像一个小的科研经历，可以培养你和科研相关的一些知识，有些数学建模本身其实也是现在科研的一部分。当然这里区分一些数学建模和数学建模比赛，这俩个其实有一点点差距，数学建模应该是严谨的专业的，而数学建模比赛嘛，从个人利益角度出发，比赛就是为了学到东西和获奖，所以，这里也有了一些出入，现实和理想嘛，毕竟不少每一个人的模型都是严谨的准确的，误差可控的，这里一些题目本身其实也是不严谨的，所以一些美化，包装，甚至结果的一些篡改，借鉴等也成了一种获奖的方法。但还是希望大家可以独立思考，争取模型和结果的准确性，完成真正的“数字建模”。</p><h3 id="数学建模比赛"><a href="#数学建模比赛" class="headerlink" title="数学建模比赛"></a>数学建模比赛</h3><ul><li><p>全国大学生数模竞赛CUMCM</p></li><li><p>全国研究生数模竞赛NPGMCM</p></li><li>美国大学生数模竞赛MCM/ICM；</li><li>五一数学建模</li><li>亚太数学建模等等</li></ul><p>这里最主要的是国赛和美赛，美赛和国赛，我感觉是不一样的，国赛分赛区，获奖也取决赛区的强弱，当然国赛获奖更难，国赛不仅对数学建模的思路和方法进行评估，还对模型结果的准确性有一个评估。美赛其实更推荐小白常见，因为美赛更看重思路，一些异想天开，不一样的想法模型很可能就获奖。其他的一些大部分是用来练手吧，多参加多实践才能在比赛中取得好成绩。</p><h3 id="组队分工"><a href="#组队分工" class="headerlink" title="组队分工"></a>组队分工</h3><p>找到建模小伙伴，认真负责，靠谱的人。建模比赛一般都是三天，三天要做出一篇建模论文时间是很紧迫的，三个人一起做会轻松很多，互相鼓励也更不容易放弃。个人觉得靠谱是挑选队友最重要的点，我看过很多队伍比赛会出现突然消失，平常答应很好，比赛突然不见了；还看到过队伍发生内部矛盾而发生撂挑子不干的事故。不用自卑不用盲目寻求大佬队友，成绩好不代表竞赛好，只要队友可以一起学习就可。最好是模拟一两次比赛看队友适不适合。</p><p>然后就得多参加多配合，这里我很感谢有磨合了2年的队友。</p><p>下面介绍一下分工：</p><ol><li>建模</li><li>编程</li><li>写作</li></ol><p>其实这三个不是对立的，最好的状态是队友什么都会，尤其擅长1-2个方向，如果编程和写作不懂建模，拿建模出来的东西很难后续实现，对于数据处理题，有时也需要编程手预处理等给出合理的建议，写作过程中也可能发现模型的不足，进行更改。总之，数学建模是团队合作的比赛。这里推荐大家一些基本的应该都会，比如查论文，能看懂模型，会排版（公式）等。</p><p>对于写作，其实这部分很关键，因为最后提交的是一篇论文，论文的好坏直接就是对应不同的成绩。</p><h2 id="建模手"><a href="#建模手" class="headerlink" title="建模手"></a>建模手</h2><h3 id="查找文献"><a href="#查找文献" class="headerlink" title="查找文献"></a>查找文献</h3><h4 id="知网"><a href="#知网" class="headerlink" title="知网"></a>知网</h4><p>知网得会吧，一些模型可以利用句子搜索来确定。</p><p><a href="https://www.cnki.net/">知网</a> : <a href="https://www.cnki.net/">https://www.cnki.net/</a></p><h4 id="谷歌学术"><a href="#谷歌学术" class="headerlink" title="谷歌学术"></a>谷歌学术</h4><p><a href="https://scholar.google.com.hk/?hl=zh-CN">谷歌学术</a> : <a href="https://scholar.google.com.hk/?hl=zh-CN">https://scholar.google.com.hk/?hl=zh-CN</a></p><p>美赛会涉及一些外网的东西，至于怎么查自己了解一下吧</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>像web science，EI自己了解一下吧</p><p><img src="https://s2.loli.net/2022/01/17/fbK2zqJu4V7sFNi.png" alt="image-20220117110930249"></p><p>这里还推举一些其他我可能用到的东西。</p><p><a href="https://www.aminer.cn/">Aminer</a> : <a href="https://www.aminer.cn/">https://www.aminer.cn/</a></p><p><img src="https://s2.loli.net/2022/01/17/U96wpAG3KOezvcD.png" alt="image-20220117111119650"></p><p><a href="http://www.4243.net/">大木虫导航</a> : <a href="http://www.4243.net/">http://www.4243.net/</a></p><p><img src="https://s2.loli.net/2022/01/17/VIOWh1i8LR6TZFt.png" alt="image-20220117111717645"></p><p><img src="https://s2.loli.net/2022/01/17/UkAtYRQTdiP17CW.png" alt="image-20220117111728409"></p><h3 id="常见模型"><a href="#常见模型" class="headerlink" title="常见模型"></a>常见模型</h3><p>这里我copy网上一些内容：</p><blockquote><p>常规优化模型：<br>线性规划，非线性规划，整数规划，多目标规划，动态规划</p><p>评价模型：<br>层次分析法，模糊综合评价，熵值法，TOPSIS法，数据包络分析，秩和比法，灰色关联分析</p><p>预测模型：<br>回归拟合，灰色预测，马尔可夫预测，时间序列分析</p><p>动态模型：<br>微分方程模型，差分方程模型，元胞自动机，排队论，蒙特卡罗随机模拟</p><p>图论模型：<br>最短路径，最小生成树，最小费用最大流，指派问题，旅行商问题</p><p>统计分析模型：<br>分布检验，均值T检验，方差分析，协方差分析，相关分析，卡方检验，秩和检验，回归分析，Logistic回归，聚类分析，判别分析，关联分析</p><p>现代智能算法：<br>模拟退火，神经网络，遗传算法，蚁群算法，粒子群算法，支持向量机，决策树，随机森林</p></blockquote><p>其实也不用都掌握，大概了解不同情况下用那些就行了，到时候在具体看，一些常见的简单的会就行了，难一点只需要了解即可。</p><p>下面简单瞎说一点（主要好多人想了解建模的思路，但我是编程手，建模死马当活马医了，哈哈哈）</p><h4 id="1-、优化模型"><a href="#1-、优化模型" class="headerlink" title="1 、优化模型"></a>1 、优化模型</h4><p>1.1 数学规划模型<br>线性规划、整数线性规划、非线性规划、多目标规划、动态规划。</p><p>1.2 微分方程组模型<br>阻滞增长模型、SARS传播模型。</p><p>1.3 图论与网络优化问题<br>最短路径问题、网络最大流问题、最小费用最大流问题、最小生成树问题(MST)、旅行商问题(TSP)、图的着色问题。</p><p>1.4 概率模型<br>决策模型、随机存储模型、随机人口模型、报童问题、Markov链模型。</p><p>1.5 组合优化经典问题</p><p><strong>现代优化算法：禁忌搜索；模拟退火；遗传算法；人工神经网络</strong></p><h4 id="2、分类模型"><a href="#2、分类模型" class="headerlink" title="2、分类模型"></a>2、分类模型</h4><p> 判别分析是在已知研究对象分成若干类型并已经取得各种类型的一批已知样本的观测数据，在此基础上根据某些准则建立判别式，然后对未知类型的样品进行判别分析。<br>聚类分析则是给定的一批样品，要划分的类型实现并不知道，正需要通过局内分析来给以确定类型的。</p><p>2.1 判别分析</p><p>2.2 聚类分析</p><p>2.2.1 系统聚类法（分层聚类法）<br>基本思想：开始将每个样本自成一类；然后求两两之间的距离，将距离最近的两类合成一类；如此重复，直到所有样本都合为一类为止。<br>适用范围：既适用于样本聚类，也适用于变量聚类。并且距离分类准则和距离计算方法都有多种，可以依据具体情形选择。</p><p>2.2.2 快速聚类法（K-均值聚类法）<br>基本思想：按照指定分类数目，选择个初始聚类中心；计算每个观测量（样本）到各个聚类中心的距离，按照就近原则将其分别分到放入各类中；重新计算聚类中心，继续以上步骤；满足停止条件时（如最大迭代次数等）则停止。<br>使用范围：要求用户给定分类数目，只适用于样本聚类（Q型），不适用于变量聚类（R型）。</p><p>2.2.3 两步聚类法（智能聚类方法）<br>基本思想：先进行预聚类，然后再进行正式聚类。<br>适用范围：属于智能聚类方法，用于解决海量数据或者具有复杂类别结构的聚类分析问题。可以同时处理离散和连续变量，自动选择聚类数，可以处理超大样本量的数据。</p><p>2.2.4 模糊聚类分析</p><p>2.2.5 与遗传算法、神经网络或灰色理论联合的聚类方法</p><p>2.3 神经网络分类方法</p><h4 id="3、评价模型"><a href="#3、评价模型" class="headerlink" title="3、评价模型"></a>3、评价模型</h4><p>3.1 层次分析法(AHP)<br>基本思想：是定性与定量相结合的多准则决策、评价方法。将决策的有关元素分解成目标层、准则层和方案层，并通过人们的判断对决策方案的优劣进行排序，在此基础上进行定性和定量分析。它把人的思维过程层次化、数量化，并用数学为分析、决策、评价、预报和控制提供定量的依据。<br>基本步骤：构建层次结构模型；构建成对比较矩阵；层次单排序及一致性检验（即判断主观构建的成对比较矩阵在整体上是否有较好的一致性）；层次总排序及一致性检验（检验层次之间的一致性）。<br>优点：它完全依靠主观评价做出方案的优劣排序，所需数据量少，决策花费的时间很短。从整体上看，AHP在复杂决策过程中引入定量分析，并充分利用决策者在两两比较中给出的偏好信息进行分析与决策支持，既有效地吸收了定性分析的结果，又发挥了定量分析的优势，从而使决策过程具有很强的条理性和科学性，特别适合在社会经济系统的决策分析中使用。<br>缺点：用AHP进行决策主观成分很大。当决策者的判断过多地受其主观偏好影响，而产生某种对客观规律的歪曲时，AHP的结果显然就靠不住了。<br>适用范围：尤其适合于人的定性判断起重要作用的、对决策结果难于直接准确计量的场合。要使AHP的决策结论尽可能符合客观规律，决策者必须对所面临的问题有比较深入和全面的认识。另外，当遇到因素众多，规模较大的评价问题时，该模型容易出现问题，它要求评价者对问题的本质、包含的要素及其相互之间的逻辑关系能掌握得十分透彻，否则评价结果就不可靠和准确。<br>改进方法：<br>(1) 成对比较矩阵可以采用德尔菲法获得。<br>(2) 如果评价指标个数过多（一般超过9个），利用层次分析法所得到的权重就有一定的偏差，继而组合评价模型的结果就不再可靠。可以根据评价对象的实际情况和特点，利用一定的方法，将各原始指标分层和归类，使得每层各类中的指标数少于9个。</p><p>3.2 灰色综合评价法（灰色关联度分析）<br>基本思想：灰色关联分析的实质就是，可利用各方案与最优方案之间关联度大小对评价对象进行比较、排序。关联度越大，说明比较序列与参考序列变化的态势越一致，反之，变化态势则相悖。由此可得出评价结果。<br>基本步骤：建立原始指标矩阵；确定最优指标序列；进行指标标准化或无量纲化处理；求差序列、最大差和最小差；计算关联系数；计算关联度。<br>优点：是一种评价具有大量未知信息的系统的有效模型，是定性分析和定量分析相结合的综合评价模型，该模型可以较好地解决评价指标难以准确量化和统计的问题，可以排除人为因素带来的影响，使评价结果更加客观准确。整个计算过程简单，通俗易懂，易于为人们所掌握;数据不必进行归一化处理，可用原始数据进行直接计算，可靠性强；评价指标体系可以根据具体情况增减；无需大量样本，只要有代表性的少量样本即可。<br>缺点：要求样本数据且具有时间序列特性；只是对评判对象的优劣做出鉴别，并不反映绝对水平，故基于灰色关联分析综合评价具有“相对评价”的全部缺点。<br>适用范围：对样本量没有严格要求，不要求服从任何分布，适合只有少量观测数据的问题；应用该种方法进行评价时，指标体系及权重分配是一个关键的问题，选择的恰当与否直接影响最终评价结果。<br>改进方法：<br>(1) 采用组合赋权法：根据客观赋权法和主观赋权法综合而得权系数。<br>(2) 结合TOPSIS法：不仅关注序列与正理想序列的关联度，而且关注序列与负理想序列的关联度，依据公式计算最后的关联度。</p><p>3.3 模糊综合评价法<br>基本思想：是以模糊数学为基础，应用模糊关系合成的原理，将一些边界不清、不易定量的因素定量化，从多个因素对被评价事物隶属等级（或称为评语集）状况进行综合性评价的一种方法。综合评判对评判对象的全体，根据所给的条件，给每个对象赋予一个非负实数评判指标，再据此排序择优。<br>基本步骤：确定因素集、评语集；构造模糊关系矩阵；确定指标权重；进行模糊合成和做出评价。<br>优点：数学模型简单，容易掌握，对多因素、多层次的复杂问题评判效果较好。模糊评判模型不仅可对评价对象按综合分值的大小进行评价和排序，而且还可根据模糊评价集上的值按最大隶属度原则去评定对象所属的等级，结果包含的信息量丰富。评判逐对进行，对被评对象有唯一的评价值，不受被评价对象所处对象集合的影响。接近于东方人的思维习惯和描述方法，因此它更适用于对社会经济系统问题进行评价。<br>缺点：并不能解决评价指标间相关造成的评价信息重复问题，隶属函数的确定还没有系统的方法，而且合成的算法也有待进一步探讨。其评价过程大量运用了人的主观判断，由于各因素权重的确定带有一定的主观性，因此，总的来说，模糊综合评判是一种基于主观信息的综合评价方法。<br>应用范围：广泛地应用于经济管理等领域。综合评价结果的可靠性和准确性依赖于合理选取因素、因素的权重分配和综合评价的合成算子等。<br>改进方法：采用组合赋权法：根据客观赋权法和主观赋权法综合而得权系数。</p><p>3.4 BP神经网络综合评价法<br>基本思想：是一种交互式的评价方法，它可以根据用户期望的输出不断修改指标的权值，直到用户满意为止。因此，一般来说，人工神经网络评价方法得到的结果会更符合实际情况。<br>优点：神经网络具有自适应能力，能对多指标综合评价问题给出一个客观评价，这对于弱化权重确定中的人为因素是十分有益的。在以前的评价方法中，传统的权重设计带有很大的模糊性，同时权重确定中人为因素影响也很大。随着时间、空间的推移，各指标对其对应问题的影响程度也可能发生变化，确定的初始权重不一定符合实际情况。再者，考虑到整个分析评价是一个复杂的非线性大系统，必须建立权重的学习机制，这些方面正是人工神经网络的优势所在。针对综合评价建模过程中变量选取方法的局限性，采用神经网络原理可对变量进行贡献分析，进而剔除影响不显著和不重要的因素，以建立简化模型，可以避免主观因素对变量选取的干扰。<br>缺点： ANN在应用中遇到的最大问题是不能提供解析表达式，权值不能解释为一种回归系数，也不能用来分析因果关系，目前还不能从理论上或从实际出发来解释ANN的权值的意义。需要大量的训练样本，精度不高，应用范围是有限的。最大的应用障碍是评价算法的复杂性，人们只能借助计算机进行处理，而这方面的商品化软件还不够成熟。<br>适用范围：神经网络评价模型具有自适应能力、可容错性，能够处理非线性、非局域性的大型复杂系统。在对学习样本训练中，无需考虑输入因子之间的权系数，ANN通过输入值与期望值之间的误差比较，沿原连接权自动地进行调节和适应，因此该方法体现了因子之间的相互作用。<br>改进方法：<br>采用组合评价法：对用其它评价方法得出的结果，选取一部分作为训练样本，一部分作为待测样本进行检验，如此对神经网络进行训练，知道满足要求为止，可得到更好的效果。</p><p>3.5 数据包络法(DEA)</p><p>3.6 组合评价法</p><h4 id="4、预测模型"><a href="#4、预测模型" class="headerlink" title="4、预测模型"></a>4、预测模型</h4><p>定性研究与定量研究的结合，是科学的预测的发展趋势。在实际预测工作中，应该将定性预测和定量预测结合起来使用，即在对系统做出正确分析的基础上，根据定量预测得出的量化指标，对系统未来走势做出判断。</p><p>4.1 回归分析法<br>基本思想：根据历史数据的变化规律，寻找自变量与因变量之间的回归方程式，确定模型参数，据此预测。回归问题分为一元和多元回归、线性和非线性回归。<br>特点：技术比较成熟，预测过程简单；将预测对象的影响因素分解，考察各因素的变化情况，从而估计预测对象未来的数量状态；回归模型误差较大，外推特性差。<br>适用范围：回归分析法一般适用于中期预测。回归分析法要求样本量大且要求样本有较好的分布规律，当预测的长度大于占有的原始数据长度时，采用该方法进行预测在理论上不能保证预测结果的精度。另外，可能出现量化结果与定性分析结果不符的现象，有时难以找到合适的回归方程类型。</p><p>4.2 时间序列分析法<br>基本思想：把预测对象的历史数据按一定的时间间隔进行排列，构成一个随时间变化的统计序列，建立相应的数据随时间变化的变化模型，并将该模型外推到未来进行预测。<br>适用范围：此方法有效的前提是过去的发展模式会延续到未来，因而这种方法对短期预测效果比较好，而不适合作中长期预测。一般来说，若影响预测对象变化各因素不发生突变，利用时间序列分析方法能得到较好的预测结果；若这些因素发生突变，时间序列法的预测结果将受到一定的影响。</p><p>4.3 灰色预测法<br>基本思想：将一切随机变量看作是在一定范围内变化的灰色变量，不是从统计规律角度出发进行大样本分析研究，而是利用数据处理方法(数据生成与还原)，将杂乱无章的原始数据整理成规律性较强的生成数据来加以研究，即灰色系统理论建立的不是原始数据模型，而是生成数据模型。<br>适用范围：预测模型是一个指数函数，如果待测量是以某一指数规律发展的，则可望得到较高精度的预测结果。影响模型预测精度及其适应性的关键因素，是模型中背景值的构造及预测公式中初值的选取。</p><p>4.4 BP神经网络法<br>人工神经网络的理论有表示任意非线性关系和学习等的能力，给解决很多具有复杂的不确定性和时变性的实际问题提供了新思想和新方法。<br>利用人工神经网络的学习功能，用大量样本对神经元网络进行训练，调整其连接权值和闭值，然后可以利用已确定的模型进行预测。神经网络能从数据样本中自动地学习以前的经验而无需繁复的查询和表述过程，并自动地逼近那些最佳刻画了样本数据规律的函数，而不论这些函数具有怎样的形式，且所考虑的系统表现的函数形式越复杂，神经网络这种特性的作用就越明显。<br>误差反向传播算法(BP算法)的基本思想是通过网络误差的反向传播，调整和修改网络的连接权值和闭值，使误差达到最小，其学习过程包括前向计算和误差反向传播。它利用一个简单的三层人工神经网络模型，就能实现从输入到输出之间任何复杂的非线性映射关系。目前，神经网络模型已成功地应用于许多领域，诸如经济预测、财政分析、贷款抵押评估和破产预测等许多经济领域。<br>优点：可以在不同程度和层次上模仿人脑神经系统的结构及信息处理和检索等功能，对大量非结构性、非精确性规律具有极强的自适应功能，具有信息记忆、自主学习、知识推理和优化计算等特点，其自学习和自适应功能是常规算法和专家系统技术所不具备的，同时在一定程度上克服了由于随机性和非定量因素而难以用数学公式严密表达的困难。<br>缺点：网络结构确定困难，同时要求有足够多的历史数据，样本选择困难，算法复杂，容易陷入局部极小点。</p><p>4.5 支持向量机法<br>支持向量机是基于统计学习的机器学习方法，通过寻求结构风险化最小，实现经验风险和置信范围的最小，从而达到在统计样本较少的情况下，亦能获得良好统计规律的目的。 其中支持向量机是统计学习理论的核心和重点。支持向量机是结构风险最小化原理的近似，它能够提高学习机的泛化能力，既能够由有限的训练样本得到小的误差，又能够保证对独立的测试集仍保持小的误差，而且支持向量机算法是一个凸优化问题，因此局部最优解一定是全局最优解，支持向量机就克服了神经网络收敛速度慢和局部极小点等缺陷。 核函数的选取在SVM方法中是一个较为困难的问题，至今没有一定的理论方面的指导。</p><p>4.6 组合预测法<br>在实际预测工作中，从信息利用的角度来说，就是任何一种单一预测方法都只利用了部分有用信息，同时也抛弃了其它有用的信息。为了充分发挥各预测模型的优势，对于同一预测问题，往往可以采用多种预测方法进行预测。不同的预测方法往往能提供不同的有用信息，组合预测将不同预测模型按一定方式进行综合。根据组合定理，各种预测方法通过组合可以尽可能利用全部的信息，尽可能地提高预测精度，达到改善预测性能的目的。<br>优化组合预测有两类概念，一是指将几种预测方法所得的预测结果，选取适当的权重进行加权平均的一种预测方法，其关键是确定各个单项预测方法的加权系数；二是指在几种预测方法中进行比较，选择拟合度最佳或标准离差最小的预测模型作为最优模型进行最优模型进行预测。组合预测是在单个预测模型不能完全正确地描述预测量的变化规律时发挥其作用的。</p><h3 id="论文资料"><a href="#论文资料" class="headerlink" title="论文资料"></a>论文资料</h3><p>我这里只有有小部分可以参考，不过我相信每一个参加的，都会有一堆这些资料，如果感兴趣可以私聊我发你。</p><p>这里推荐一个Github</p><p><a href="https://github.com/personqianduixue/Math_Model"> Math_Model</a> : <a href="https://github.com/personqianduixue/Math_Model/">https://github.com/personqianduixue/Math_Model/</a></p><p><a href="https://github.com/zhanwen/MathModel"> MathModel</a> : <a href="https://github.com/zhanwen/MathModel">https://github.com/zhanwen/MathModel</a></p><p><a href="https://github.com/HuangCongQing/Algorithms_MathModels"> Algorithms_MathModels</a>: <a href="https://github.com/HuangCongQing/Algorithms_MathModels">https://github.com/HuangCongQing/Algorithms_MathModels</a></p><p>其他可以自己github查找：</p><p><img src="https://s2.loli.net/2022/01/17/tZJNnQCrfA5jo9i.png" alt="image-20220117113128392"></p><h2 id="编程手"><a href="#编程手" class="headerlink" title="编程手"></a>编程手</h2><p>因为我主要是编程手，干的杂，其实大部分还是依赖有一个好队友，哈哈哈。</p><h3 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h3><h4 id="MATLAB"><a href="#MATLAB" class="headerlink" title="MATLAB"></a>MATLAB</h4><p>matlab应该是最熟悉的软件，内置很多包和操作，很多数学建模的代码也是matlab的。</p><p><img src="https://s2.loli.net/2022/01/19/E5PGKLwcQB9f7nX.png" alt="image-20220119092506185"></p><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><p><img src="https://s2.loli.net/2022/01/19/UmVvM3FfyX9Dt2g.png" alt="image-20220119092547686"></p><p><img src="https://s2.loli.net/2022/01/19/4iQBPCJjpItmSkR.png" alt="image-20220119092711049"></p><h3 id="工具软件"><a href="#工具软件" class="headerlink" title="工具软件"></a>工具软件</h3><h4 id="SPSS"><a href="#SPSS" class="headerlink" title="SPSS"></a>SPSS</h4><p><img src="https://s2.loli.net/2022/01/18/QVWIGJzCnZEyUbw.png" alt="image-20220118104812319"></p><h4 id="mpai"><a href="#mpai" class="headerlink" title="mpai"></a>mpai</h4><p><img src="https://s2.loli.net/2022/01/18/34k7YzCLRBVrf6n.png" alt="image-20220118121544529"></p><h3 id="Lingo"><a href="#Lingo" class="headerlink" title="Lingo"></a>Lingo</h3><p>Lingo是运筹优化问题比较好的软件之一，它可以用于求解非线性规划，也可用于一些线性和非线性方程组的求解等，功能十分强大，是求解优化模型的最佳选择，其特色在于内置建模语言，提供十几个内部函数，可以允许决策变量是整数（既整数规划，包括0-1整数规划），方便灵活，而且执行速度很快。能与Excel，数据库等软件交换数据。</p><h4 id="mathematica"><a href="#mathematica" class="headerlink" title="mathematica"></a>mathematica</h4><p>科学计算多一点，多用在和物理相关的题目进行一些计算。</p><p>  <a href="https://www.wolfram.com/mathematica/">mathematica</a> : <a href="https://www.wolfram.com/mathematica/">https://www.wolfram.com/mathematica/</a></p><h3 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h3><h4 id="draw-io"><a href="#draw-io" class="headerlink" title="draw.io"></a>draw.io</h4><p><img src="https://s2.loli.net/2022/01/19/k7oKajAuZySN6eW.png" alt="image-20220119080703472"></p><h4 id="echart"><a href="#echart" class="headerlink" title="echart"></a>echart</h4><p><a href="https://echarts.apache.org/zh/index.html">echart</a> : <a href="https://echarts.apache.org/zh/index.html">https://echarts.apache.org/zh/index.html</a></p><p><img src="https://s2.loli.net/2022/01/19/J537PpTtFjDEUgZ.png" alt="image-20220119080821381"></p><p><img src="https://s2.loli.net/2022/01/19/kihc5sptO1UlNHv.png" alt="热带雨林"></p><h4 id="ppt"><a href="#ppt" class="headerlink" title="ppt"></a>ppt</h4><p>一些流程图配合</p><p><a href="https://www.iconfont.cn/">图库</a> : <a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></p><p><img src="https://s2.loli.net/2022/01/19/e6fw9VgDY4Td85J.png" alt="C4DB3D22-1AE8-456a-AD5F-8FF91D2369FE"></p><h4 id="excel"><a href="#excel" class="headerlink" title="excel"></a>excel</h4><p><img src="https://s2.loli.net/2022/01/19/KXbn5TqaoCu4tQ2.png" alt="图片1"></p><h4 id="matlab"><a href="#matlab" class="headerlink" title="matlab"></a>matlab</h4><p>这里推荐一个插件：</p><p>关注b站MATLAB大佬<a href="https://space.bilibili.com/223755925?from=search&amp;seid=7825192864172994189&amp;spm_id_from=333.337.0.0">图通道</a> : <a href="https://space.bilibili.com/223755925?from=search&amp;seid=7825192864172994189&amp;spm_id_from=333.337.0.0">https://space.bilibili.com/223755925?from=search&amp;seid=7825192864172994189&amp;spm_id_from=333.337.0.0</a></p><p><img src="https://s2.loli.net/2022/01/19/oEk9ijFvfaexP1X.png" alt="image-20220119081228057"></p><p><img src="https://s2.loli.net/2022/01/19/QsIvOoj1ywPDhfu.png" alt="图20210206T220235"></p><h4 id="python绘图"><a href="#python绘图" class="headerlink" title="python绘图"></a>python绘图</h4><p>首先类似matlab的Matplotlib</p><p><a href="https://matplotlib.org/">Matplotlib</a> : <a href="https://matplotlib.org/">https://matplotlib.org/</a></p><p><img src="https://s2.loli.net/2022/01/19/9MH1Ss2PbZOw46X.png" alt="image-20220119092913103"></p><p>Pyecharts</p><p><a href="https://pyecharts.org/#/zh-cn/intro">Pyecharts</a> : <a href="https://pyecharts.org/#/zh-cn/intro">https://pyecharts.org/#/zh-cn/intro</a></p><p>和前面echart一样的，代码及其相似，可视化交互吧</p><p><img src="https://s2.loli.net/2022/01/19/S7NDEj2AspBd3oy.png" alt="image-20220119093125771"></p><h4 id="seaborn（sns）"><a href="#seaborn（sns）" class="headerlink" title="seaborn（sns）"></a>seaborn（sns）</h4><p>也就是seaborn</p><p><a href="https://seaborn.pydata.org/">seaborn</a> : <a href="https://seaborn.pydata.org/">https://seaborn.pydata.org/</a></p><p>这个更快。用于特征选取的对比，一些封装好的图，输入数据就能出图，最喜欢seaborn.heatmap的相关性</p><p><img src="https://s2.loli.net/2022/01/19/VMHzscZCnExlU9L.png" alt="image-20220119093437327"></p><p>还有seaborn.pairplot，变量之间的关系</p><p><img src="https://s2.loli.net/2022/01/19/jmwGUc8tICKEXWh.png" alt="image-20220119093541385"></p><h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><p><a href="https://scikit-learn.org.cn/">scikit-learn</a> : <a href="https://scikit-learn.org.cn/">https://scikit-learn.org.cn/</a></p><p>主流的机器学习，适合一些预测题</p><p><a href="https://scikit-opt.github.io/scikit-opt/#/zh/">scikit-opt</a> : <a href="https://scikit-opt.github.io/scikit-opt/#/zh/">https://scikit-opt.github.io/scikit-opt/#/zh/</a></p><p>一些智能优化，封装好的，之间导包就能用。</p><p><a href="https://github.com/statsmodels/statsmodels/tree/main/examples">statsmodels</a> ： <a href="https://www.statsmodels.org/stable/examples/index.html">https://www.statsmodels.org/stable/examples/index.html</a></p><p>一个统计相关的库，很全面，偶尔使用吧</p><p><a href="https://pycaret.org/">pycarets</a>  : <a href="https://pycaret.org/">https://pycaret.org/</a></p><p>和时间序列有关的slam吧</p><p><a href="https://github.com/fxsjy/jieba">jieba</a> :  <a href="https://github.com/fxsjy/jieba">https://github.com/fxsjy/jieba</a></p><p>中文的分词的，用于nlp处理吧</p><p><a href="https://github.com/keredson/wordninja">wordninja</a> : <a href="https://github.com/keredson/wordninja">https://github.com/keredson/wordninja</a></p><p>英文的分词的，用于nlp处理吧</p><p><a href="https://amueller.github.io/word_cloud/#">wordcloud</a> : <a href="https://amueller.github.io/word_cloud/">https://amueller.github.io/word_cloud/</a></p><p>词云生成器，也不难</p><p>nlp最难的是分析，噪声太多了，自己不太擅长。</p><h2 id="写作手"><a href="#写作手" class="headerlink" title="写作手"></a>写作手</h2><h3 id="写作模板"><a href="#写作模板" class="headerlink" title="写作模板"></a>写作模板</h3><blockquote><p>摘要</p><p>1.问题重述（背景介绍、文献综述、问题重述等）</p><p>2.问题分析（主要对问题进行一定的分析，可以做一个分析流图）</p><p>3.问题假设（其实也就是对问题的边界进行划定，我们需要让问题更具体一些）</p><p>4.符号说明（对于文章中主要出现的符号进行一定的解释，方便评委老师理解）</p><p>5.模型建立与求解（这一步最为核心，即数学建模和模型的求解部分）</p><p>6.灵敏度分析（即分析模型的输出，对参数或环境变化的敏感程度的分析）</p><p>7.模型的推广及优缺点（主要对模型的进一步研究分析和优缺点解释）</p><p>参考文献</p><p>附录</p></blockquote><p>上面是大致的模板,当然具体情况可以自己修改,小白还是推荐参考,这里模型建立与求解,可以分开模型一的建模与求解,模型二的建模与求解等也可以合在一起,模型的建模,模型的求解.</p><h3 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h3><h4 id="word"><a href="#word" class="headerlink" title="word"></a>word</h4><p>这里word应该是最简单，这里我也不多介绍,这个应该学一下,后面课程报告等都会用到.</p><p>这里推荐b站的一些视频,这里就不推荐,毕竟word这部分一个合格的大学生都应该掌握.(感兴趣还可以顺便考个二级)</p><h4 id="latex"><a href="#latex" class="headerlink" title="latex"></a>latex</h4><p>这里提一下latex,其实建议掌握,最起码会个latex的公式(这个真的是必学)</p><p>然后论文排版,latex和word在比赛中差距不是很大,但latex学习成本高于word,一定要慎重,latex排版的写作手,最好用latex排几次,练练手,要不然在比赛很容易产生没时间,or意外的bug,导致结果不太理想.</p><p>latex公式这里是强烈推荐的,尤其是</p><p><a href="https://www.latexlive.com/home">LaTeX公式编辑器</a> : <a href="https://www.latexlive.com/home">https://www.latexlive.com/home</a></p><p><img src="https://s2.loli.net/2022/01/15/n9tAwZzyfsBaPde.png" alt="image-20220115174319364"></p><p>支持图像识别，latex公式代码提示。</p><p>latex编辑器推荐<a href="https://cn.overleaf.com/">overleaf</a>:<a href="https://cn.overleaf.com/">https://cn.overleaf.com/</a></p><p><img src="https://s2.loli.net/2022/01/15/tnQHGNZjPXm8Mqr.png" alt="image-20220115182813329"></p><h3 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h3><p>这里其实更推荐机器翻译，人工审核，美赛量有点大，纯人工翻译挺难的，而且还可能不太准确，这里最好推荐人工核查，搭配机器翻译，这里推荐谷歌翻译和deepl</p><p>deepl</p><p><img src="https://s2.loli.net/2022/01/17/M4m36wPv7Jba5Y8.png" alt="image-20220117102134600"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CUMT算法考试总结</title>
      <link href="/2021/12/08/2021-12-8-suan-fa-zong-jie/"/>
      <url>/2021/12/08/2021-12-8-suan-fa-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="算法考试总结"><a href="#算法考试总结" class="headerlink" title="算法考试总结"></a>算法考试总结</h1><blockquote><p>作者：lowlyli</p><p>时间：2021-12-8</p><p>内容：含泪写下这个算法的总结，太离谱了，我真的写不完，不会写。</p></blockquote><h2 id="问题回忆"><a href="#问题回忆" class="headerlink" title="问题回忆"></a>问题回忆</h2><h3 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h3><blockquote><p>这题其实很简单，但比以往的上课题一点点复杂</p></blockquote><p>大意：</p><script type="math/tex; mode=display">T(n) = \left\{ \begin{array}{c}{1} & n = 1 \\  2T(\frac{n}{2}) + n^2 + 1 & n>1\end{array}\right.</script><p>主定理盒递推都可以</p><h3 id="流水作业调度（变形）"><a href="#流水作业调度（变形）" class="headerlink" title="流水作业调度（变形）"></a>流水作业调度（变形）</h3><p>基本步骤一样，就是这个卷子给的数字和计算规模大，写不完。</p><ol><li><p><strong>问题描述</strong> n个作业要在两台机器M1和M2上进行加工。每个作业加工的顺序都是先在M1上加工，然后在M2加工。M1和M2加工作业$i$所需的时间分别为$a_i$ 和$b_i$。确定n个作业的最优加工顺序，使得加工完成所需的时间最少。</p><p><strong>算法</strong></p><ol><li>分为$N_1,N_2$集合存放 <script type="math/tex">N_1 = \{a_i\leq b_i\} ,N_2 = \{a_i > b_i\}</script></li><li>$N_1$中作业按照$a_i$升序排序，$N_2$中作业按照$b_i$降序排序</li><li>$N_1$连接$N_2$，计算时间</li></ol></li></ol><h3 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h3><p>简单送分题（送命题）</p><p>这题和平时步骤一样，唯一区别就说这个题是10个字母的，上课也只有6，7个的，10个的规模有点大，写了满满一面的步骤和树，画吐了。</p><h3 id="暖气管道最优安排"><a href="#暖气管道最优安排" class="headerlink" title="暖气管道最优安排"></a>暖气管道最优安排</h3><p>这题很迷惑，给了22个点,每个点包括$(x_i,y_i)$,问有没有最佳的一个点$(0,y_{best})$,这题没见过，考试跳过了，其实就说二分法求中位数</p><p>类似：</p><p>某石油公司计划建造一条由东向西的主输油管道。该管道要穿过一个有n口油井的油田。从每口油井都要有一条输油管道沿最短路经（或南或北）与主管道相连。</p><p>如果给定n口油井的位置，即它们的x坐标（东西向）和y坐标（南北向），应如何确定主管道的最优位置，即使各油井到主管道之间的输油管道长度总和最小的位置？</p><p>给定n口油井的位置，编程计算各油井到主管道之间的输油管道最小长度总和。</p><p><img src="https://s2.loli.net/2021/12/09/G2nFJwBPsKmhgiE.png" alt="这里写图片描述"></p><p>（这15分基本上空了，没时间写，后面想到了，二分中位数，但22个数，每日吐槽题量大）</p><h3 id="活动安排"><a href="#活动安排" class="headerlink" title="活动安排"></a>活动安排</h3><p>这里是等待，有n个顾客，每个人需要$t_i$的服务时间，有m个窗口，求最短的等待时间的安排</p><p>就是贪心，从小到大排序，依次插入窗口。</p><p>（再次吐槽，给了10个数，2窗口，没时间写）</p><h3 id="最长递增子序列"><a href="#最长递增子序列" class="headerlink" title="最长递增子序列"></a>最长递增子序列</h3><p>离谱，如果考实践的时候我还会（其实现在也会写代码）但这里理论分析，属实蚌埠住了，最离谱的是2种方法，放过我吧，我只写了后面的问题求解，理论属实不会。</p><p>这是考场上想到的：居然蒙对了一个，不过第二种属实不会了。</p><script type="math/tex; mode=display">dp[i]=max(dp[j])+1,其中0≤j<i且num[j]<num[i]</script><p>这里自己参考：</p><p>力扣<a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/solution/zui-chang-shang-sheng-zi-xu-lie-by-leetcode-soluti/">最长递增子序列</a></p><p><a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/solution/zui-chang-shang-sheng-zi-xu-lie-by-leetcode-soluti/">https://leetcode-cn.com/problems/longest-increasing-subsequence/solution/zui-chang-shang-sheng-zi-xu-lie-by-leetcode-soluti/</a></p><h3 id="回溯法和分支限界"><a href="#回溯法和分支限界" class="headerlink" title="回溯法和分支限界"></a>回溯法和分支限界</h3><p>这里是0-1背包变形</p><p>但这里要求2次，还是5层的树。</p><p>最后就一点点时间了，稀里糊涂画的，现在想起来，答案估计都有问题。唉~题量也太大了。根本写不完。</p><h2 id="反思总结（也给一点准备建议）"><a href="#反思总结（也给一点准备建议）" class="headerlink" title="反思总结（也给一点准备建议）"></a>反思总结（也给一点准备建议）</h2><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这次考试，题量大的离谱，我这种写的慢的，当年数据库都没写完的人，这根本写不完，除非，我不用思考，但这题还是有点难度，需要思考的，不清楚为啥19如此难。本来2周前就考了，因为突如其来的疫情，推迟了，导致理论和实践间隔久，反正就是只复习了书上，然后老师画的重点，然后就崩了。呜呜呜。</p><h3 id="备考建议"><a href="#备考建议" class="headerlink" title="备考建议:"></a>备考建议:</h3><p>课上内容不太行，建议在平时学习看一遍书就可以开始刷力扣了，培养题感，这里推荐：</p><p> <a href="https://www.programmercarl.com/">代码随想录</a> : <a href="https://www.programmercarl.com/">https://www.programmercarl.com/</a></p><p>可以参考上面的最基础的地方刷，本人在2周多一点刷了100来道，虽然考试帮助不太大，但感觉还是学到了算法的一些精髓。</p><p><img src="https://s2.loli.net/2021/12/09/NiIkxXUwQpVsDWc.png" alt="image-20211209090200310"></p><p>理论的一些可以参考：<a href="https://junyaohu.github.io/2021/10/26/%E3%80%8A%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E3%80%8B%E7%AC%94%E8%AE%B0/">胡神的博客</a></p><p>还是可以的，我的一般吧。</p><p>没有什么了，算法好好学吧。</p><h3 id="老师总结"><a href="#老师总结" class="headerlink" title="老师总结"></a>老师总结</h3><p><img src="https://s2.loli.net/2022/03/30/42fD7r6hkw9OUYq.png" alt="image-20220330165811087"></p><p>最后也算4人之一，考的不是很差，但算法学习感觉还是很重要，尤其我这种没有参与过acm的人，有时间再多学一下吧，讨厌机试。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 考试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SM4算法</title>
      <link href="/2021/12/05/2021-12-5-sm4-suan-fa/"/>
      <url>/2021/12/05/2021-12-5-sm4-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="SM4算法"><a href="#SM4算法" class="headerlink" title="SM4算法"></a>SM4算法</h1><blockquote><p>作者：lowlyli</p><p>时间：2021-12-5</p><p>内容：SM4是国密里面针对无线标准进行的分组密码，和DES加密很像。它采用的方法是能够很好抵抗差值攻击的仿射函数逆映射复合法。有时间分析一下如何破解吧。</p></blockquote><h2 id="SM4算法介绍"><a href="#SM4算法介绍" class="headerlink" title="SM4算法介绍"></a>SM4算法介绍</h2><p> 2012年3月，国家密码管理局正式公布了包含SM4分组密码算法在内的《祖冲之序列密码算法》等6项密码行业标准。与DES和AES算法类似，SM4算法是一种分组密码算法。其分组长度为128bit，密钥长度也为128bit。加密算法与密钥扩展算法均采用32轮非线性迭代结构，以字（32位）为单位进行加密运算，每一次迭代运算均为一轮变换函数F。SM4算法加/解密算法的结构相同，只是使用轮密钥相反，其中解密轮密钥是加密轮密钥的逆序。</p><p>SMS4分组加密算法是中国无线标准中使用的分组加密算法，在2012年已经被国家商用密码管理局确定为国家密码行业标准，标准编号GM/T 0002-2012并且改名为SM4算法，与SM2椭圆曲线公钥密码算法，SM3密码杂凑算法共同作为国家密码的行业标准，在我国密码行业中有着极其重要的位置。</p><p> SM4有很高的灵活性，所采用的S盒可以灵活地被替换，以应对突发性的安全威胁。算法的32轮迭代采用串行处理，这与AES中每轮使用代换和混淆并行地处理整个分组有很大不同。</p><p>S盒是一种利用非线性变换构造的分组密码的一个组件，主要是为了实现分组密码过程中的混淆的特性和设计的。SMS4算法中的S盒在设计之初完全按照欧美分组密码的设计标准进行，它采用的方法是能够很好抵抗差值攻击的仿射函数逆映射复合法。</p><p>参考官方网站：<a href="http://www.gmbz.org.cn/main/bzlb.html">密码行业标准化</a>:   <a href="http://www.gmbz.org.cn/main/bzlb.html">http://www.gmbz.org.cn/main/bzlb.html</a></p><p><img src="https://s2.loli.net/2021/12/05/TkmWHtsxwIzpajl.png" alt="202112051241833.png"></p><h2 id="SM4算法原理"><a href="#SM4算法原理" class="headerlink" title="SM4算法原理"></a>SM4算法原理</h2><p>本算法是一个分组算法。该算法的分组长度为128比特，密钥长度为128比特。加密算法与密钥扩展算法都采用32轮非线性迭代结构。解密算法与加密算法的结构相同，只是轮密钥的使用顺序相反，解密轮密钥是加密轮密钥的逆序。</p><h3 id="术语说明"><a href="#术语说明" class="headerlink" title="术语说明"></a>术语说明</h3><h4 id="字与字节"><a href="#字与字节" class="headerlink" title="字与字节"></a>字与字节</h4><p>用$Z_2^e$表示e-比特的向量集，$Z_2^{32}$中的元素称为字，$Z_2^8$中的元素称为字节。</p><h4 id="S盒"><a href="#S盒" class="headerlink" title="S盒"></a>S盒</h4><p>S盒为固定的8比特输入8比特输出的置换，记为$Sbox(X)$</p><h4 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h4><p>在本算法中采用了以下基本运算：</p><ul><li>$⊕$ 32比特异或</li><li>$&lt;&lt;&lt;i$ 32比特循环左移$i$位</li></ul><h4 id="密钥及密钥参量"><a href="#密钥及密钥参量" class="headerlink" title="密钥及密钥参量"></a>密钥及密钥参量</h4><p>加密密钥长度为 128 比特, 表示为<script type="math/tex">\mathrm{MK}=\left(\mathrm{MK}_{0}, \mathrm{MK}_{1}, \mathrm{MK}_{2}, \mathrm{MK}_{3}\right)</script>, 其中  <script type="math/tex">\mathrm{MK}_{i}(\mathrm{i}=0,1,2,3)</script>为 字。</p><p>轮密钥表示为 <script type="math/tex">\left(\mathrm{rk}_{0}, \mathrm{rk}_{1}, \ldots, \mathrm{rk}_{31}\right)</script>, 其中  <script type="math/tex">\mathrm{rk}_{\mathrm{i}}(\mathrm{i}=0, \ldots, 31)</script>为字。轮密钥由加密密钥生成。</p><p>系统参数为<script type="math/tex">\mathrm{FK}=\left(\mathrm{FK}_{0}, \mathrm{FK}_{1}, \mathrm{FK}_{2}, \mathrm{FK}_{3}\right)</script></p><p>固定参数<script type="math/tex">\mathrm{CK}=\left(\mathrm{CK}_{0}, \mathrm{CK}_{1}, \ldots, \mathrm{CK}_{31}\right)</script>, 用于密钥扩展算法, </p><p>其中 <script type="math/tex">\mathrm{FK}_{\mathrm{i}}(i=0, \ldots, 3) 、 \mathrm{CK}_{\mathrm{i}}(i=0, \ldots, 31)</script>为字。</p><h3 id="轮函数F"><a href="#轮函数F" class="headerlink" title="轮函数F"></a>轮函数F</h3><p>本算法采用非线性迭代结构, 以字为单位进行加密运算, 称一次迭代运算为一轮变换。</p><p>设输入为<script type="math/tex">( X_ {0} , X_ {1} , X_ {2} , X_ {3} ) \in (Z_ {2}^ {32})^ {4}</script>,轮密钥为<script type="math/tex">rk \in Z_ {2}^ {32}</script>,则轮函数F为:</p><script type="math/tex; mode=display">F( X_ {0} , X_ {1} , X_ {2} , X_ {3} ,rk)= X_ {0} \oplus T( X_ {1} \oplus X_ {2} \oplus X_ {3} \oplus rk)</script><h4 id="合成置换T"><a href="#合成置换T" class="headerlink" title="合成置换T"></a>合成置换T</h4><p>$T:Z_2^{32} \rightarrow Z_2^{32}$，是一个可逆变换，由非线性变换$τ$和线性变换$L$复合而成,即$T(x)=L(τ(x))$</p><h5 id="非线性变换τ"><a href="#非线性变换τ" class="headerlink" title="非线性变换τ"></a>非线性变换τ</h5><p> $\tau$  由 4 个并行的S盒构成。<br>设输入为 <script type="math/tex">A=\left(a_{0}, a_{1}, a_{2}, a_{3}\right) \in\left(Z_{2}^{8}\right)^{4}</script>, 输出为 <script type="math/tex">B=\left(b_{0}, b_{1}, b_{2}, b_{3}\right) \in\left(Z_{2}^{8}\right)^{4}</script>, 则</p><script type="math/tex; mode=display">\left(b_{0}, b_{1}, b_{2}, b_{3}\right)=\tau(A)=\left(\operatorname{Sbox}\left(a_{0}\right), \operatorname{Sbox}\left(a_{1}\right), \operatorname{Sbox}\left(a_{2}\right), \operatorname{Sbox}\left(a_{3}\right)\right)</script><h5 id="线性变换L"><a href="#线性变换L" class="headerlink" title="线性变换L"></a>线性变换L</h5><p>非线性变换 <script type="math/tex">\tau</script> 的输出是线性变换 <script type="math/tex">\mathrm{L}</script>的输入。设输入为 <script type="math/tex">B \in Z_{2}^{32}</script> , 输出为 <script type="math/tex">C \in Z_{2}^{32}</script>, 则 </p><script type="math/tex; mode=display">C=L(B)=B \oplus(B<<<2) \oplus(B<<<10) \oplus(B<<<18) \oplus(B<<<24)</script><h4 id="S盒-1"><a href="#S盒-1" class="headerlink" title="S盒"></a>S盒</h4><p><img src="https://s2.loli.net/2021/12/05/WOoB8NY34dm6xKM.png" alt="image-20211205153046989"></p><p>输入‘ef’，则经S盒后的值为表中第e行和第f列的值，Sbox(‘ef’)= ‘84’。</p><h3 id="加-解密算法"><a href="#加-解密算法" class="headerlink" title="加/解密算法"></a>加/解密算法</h3><p>定义反序变换 <script type="math/tex">\mathrm{R}</script>为: </p><script type="math/tex; mode=display">R\left(A_{0}, A_{1}, A_{2}, A_{3}\right)=\left(A_{3}, A_{2}, A_{1}, A_{0}\right), A_{i} \in Z_{2}^{32}, i=0,1,2,3</script><p>设明文输入为 <script type="math/tex">\left(X_{0}, X_{1}, X_{2}, X_{3}\right) \in\left(Z_{2}^{32}\right)^{4}</script>, 密文输出为<script type="math/tex">\left(Y_{0}, Y_{1}, Y_{2}, Y_{3}\right) \in\left(Z_{2}^{32}\right)^{4}</script>, 轮密钥为<script type="math/tex">r k_{i} \in Z_{2}^{32}, i=0,1,2, \ldots, 31</script> 。则本算法的加密变换为: </p><script type="math/tex; mode=display">X_{i+4}=F\left(X_{i}, X_{i+1}, X_{i+2}, X_{i+3}, r k_{i}\right)\\=X_{i} \oplus T\left(X_{i+1} \oplus X_{i+2} \oplus X_{i+3} \oplus r k_{i}\right), i=0,1, \ldots, 31 . \\\left(Y_{0}, Y_{1}, Y_{2}, Y_{3}\right)=R\left(X_{32}, X_{33}, X_{34}, X_{35}\right)=\left(X_{35}, X_{34}, X_{33}, X_{32}\right)</script><p>本算法的解密变换与加密变换结构相同, 不同的仅是轮密钥的使用顺序。 </p><p>密时轮密钥的使用顺序为:<script type="math/tex">\left(r k_{0}, r k_{1}, \ldots, r k_{31}\right)</script></p><p>解密时轮密钥的使用顺序为:<script type="math/tex">\left(r k_{31}, r k_{30}, \ldots, r k_{0}\right)</script></p><h3 id="密钥扩展算法"><a href="#密钥扩展算法" class="headerlink" title="密钥扩展算法"></a>密钥扩展算法</h3><p>本算法中加密算法的轮密钥由加密密钥通过密钥扩展算法生成。</p><p>加密密钥 </p><script type="math/tex; mode=display">M K=\left(M K_{0}, M K_{1}, M K_{2}, M K_{3}\right), M K_{i} \in Z_{2}^{32}, i=0,1,2,3 ;</script><p>令 <script type="math/tex">K_{i} \in Z_{2}^{32}, i=0,1, \ldots, 35</script> , 轮密钥为 <script type="math/tex">r k_{i} \in Z_{2}^{32}, i=0,1, \ldots, 31</script>, 则轮密钥生成方法为:</p><p>首先, </p><script type="math/tex; mode=display">\small\left(K_{0}, K_{1}, K_{2}, K_{3}\right)=\left(\mathrm{MK}_{0} \oplus \mathrm{FK}_{0}, \mathrm{MK}_{1} \oplus \mathrm{FK}_{1}, \mathrm{MK}_{2} \oplus \mathrm{FK}_{2}, \mathrm{MK}_{3} \oplus \mathrm{FK}_{3}\right)</script><p>然后, 对 $ i=0,1,2, \ldots, 31$  :</p><script type="math/tex; mode=display">r k_{i}=K_{i+4}=K_{i} \oplus T^{\prime}\left(K_{i+1} \oplus K_{i+2} \oplus K_{i+3} \oplus C K_{i}\right)</script><p>说明:</p><p>(1)  $T^{\prime} $ 变换与加密算法轮函数中的  T  基本相同, 只将其中的线性变换  L  修改为以下$  L^{\prime} $ :</p><script type="math/tex; mode=display"> L^{\prime}(\mathrm{B})=\mathrm{B} \oplus(\mathrm{B}<<<13) \oplus(\mathrm{B}<<<23) ;</script><p>(2) 系统参数 FK的取值, 采用 16 进制表示为:</p><script type="math/tex; mode=display">\mathrm{FK}_{0}=(\mathrm{A} 3 \mathrm{~B} 1 \mathrm{BAC}), \mathrm{FK}_{1}=(56 \mathrm{AA} 3350), \\\mathrm{FK}_{2}=(677 \mathrm{D} 9197), \mathrm{FK}_{3}=(\mathrm{B} 27022 \mathrm{DC})</script><p> (3) 固定参数<script type="math/tex">\mathrm{CK}</script>的取值方法为:</p><p>设  <script type="math/tex">c k_{i, j}</script>为  <script type="math/tex">C K_{i}</script> 的第 <script type="math/tex">j</script>字节<script type="math/tex">(i=0,1, \ldots, 31 ; j=0,1,2,3)</script> , 即 <script type="math/tex">C K_{i}=\left(c k_{i, 0}, c k_{i, 1}, c k_{i, 2}, c k_{i, 3}\right) \in\left(Z_{2}^{8}\right)^{4}</script> ,则<script type="math/tex">c k_{i, j}=(4 i+j) \times 7(\bmod 256)</script>。 32 个固定参数 <script type="math/tex">C K_{i}</script> , 其 16 进制表示为:</p><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">00070e15</td><td style="text-align:center">1c232a31</td><td style="text-align:center">383f464d</td><td style="text-align:center">545b6269</td></tr><tr><td style="text-align:center">70777e85</td><td style="text-align:center">8c939aa1</td><td style="text-align:center">a8afb6bd</td><td style="text-align:center">c4cbd2d9</td></tr><tr><td style="text-align:center">e0e7eef5</td><td style="text-align:center">fc030a11</td><td style="text-align:center">181f262d</td><td style="text-align:center">343b4249</td></tr><tr><td style="text-align:center">50575e65</td><td style="text-align:center">6c737a81</td><td style="text-align:center">888f969d</td><td style="text-align:center">a4abb2b9</td></tr><tr><td style="text-align:center">c0c7ced5</td><td style="text-align:center">dce3eaf1</td><td style="text-align:center">f8ff060d</td><td style="text-align:center">141b2229</td></tr><tr><td style="text-align:center">30373e45</td><td style="text-align:center">4c535a61</td><td style="text-align:center">686f767d</td><td style="text-align:center">848b9299</td></tr><tr><td style="text-align:center">a0a7aeb5</td><td style="text-align:center">bcc3cad1</td><td style="text-align:center">d8dfe6ed</td><td style="text-align:center">f4fb0209</td></tr><tr><td style="text-align:center">10171e25</td><td style="text-align:center">2c333a41</td><td style="text-align:center">484f565d</td><td style="text-align:center">646b7279</td></tr></tbody></table></div><h3 id="加密解密可逆分析"><a href="#加密解密可逆分析" class="headerlink" title="加密解密可逆分析"></a>加密解密可逆分析</h3><p>这里设加密密钥 </p><script type="math/tex; mode=display">M K=\left(M K_{0}, M K_{1}, M K_{2}, M K_{3}\right), M K_{i} \in Z_{2}^{32}, i=0,1,2,3 ;</script><p>令 <script type="math/tex">K_{i} \in Z_{2}^{32}, i=0,1, \ldots, 35</script> , 则可以生成轮密钥为 <script type="math/tex">r k_{i} \in Z_{2}^{32}, i=0,1, \ldots, 31</script>, </p><p>在加密中密钥<script type="math/tex">i : 0 \rightarrow 31</script>, 在解密中<script type="math/tex">i : 31 \rightarrow 0</script>， 即：每一轮的密钥一致。</p><p>设明文输入为 <script type="math/tex">\left(X_{0}, X_{1}, X_{2}, X_{3}\right) \in\left(Z_{2}^{32}\right)^{4}</script></p><p>设 密文输出为<script type="math/tex">\left(Y_{0}, Y_{1}, Y_{2}, Y_{3}\right) \in\left(Z_{2}^{32}\right)^{4}</script>, </p><p>根据加密原则：</p><script type="math/tex; mode=display">\left(Y_{0}, Y_{1}, Y_{2}, Y_{3}\right)=R\left(X_{32}, X_{33}, X_{34}, X_{35}\right)=\left(X_{35}, X_{34}, X_{33}, X_{32}\right)</script><p>而加密流程</p><script type="math/tex; mode=display">X_{i+4}=X_{i} \oplus T\left(X_{i+1} \oplus X_{i+2} \oplus X_{i+3} \oplus r k_{i}\right), i=0,1, \ldots, 31 . \\</script><p>设<script type="math/tex">C = T\left(X_{i+1} \oplus X_{i+2} \oplus X_{i+3} \oplus r k_{i}\right),</script> 则<script type="math/tex">X_i :=X_{i+4}\oplus  X_{i}</script></p><p>故可解出<script type="math/tex">X_i</script>,以此类推得到：<script type="math/tex">\left(X_{0}, X_{1}, X_{2}, X_{3}\right)</script></p><h2 id="SM4算法流程"><a href="#SM4算法流程" class="headerlink" title="SM4算法流程"></a>SM4算法流程</h2><h3 id="完整流程如下："><a href="#完整流程如下：" class="headerlink" title="完整流程如下："></a>完整流程如下：</h3><p> <img src="https://s2.loli.net/2021/12/05/bHkwWJIfONs9mRp.png" alt="202112051250479.png"></p><h3 id="密钥扩展算法-1"><a href="#密钥扩展算法-1" class="headerlink" title="密钥扩展算法"></a>密钥扩展算法</h3><p>第一步：密钥与系统参数的异或:</p><script type="math/tex; mode=display">\small\left(K_{0}, K_{1}, K_{2}, K_{3}\right)=\left(\mathrm{MK}_{0} \oplus \mathrm{FK}_{0}, \mathrm{MK}_{1} \oplus \mathrm{FK}_{1}, \mathrm{MK}_{2} \oplus \mathrm{FK}_{2}, \mathrm{MK}_{3} \oplus \mathrm{FK}_{3}\right)</script><p>第二步：获取子密钥：</p><script type="math/tex; mode=display">r k_{i}=K_{i+4}=K_{i} \oplus T^{\prime}\left(K_{i+1} \oplus K_{i+2} \oplus K_{i+3} \oplus C K_{i}\right)</script><p>流程如下：</p><p><img src="https://s2.loli.net/2021/12/05/ja1yQwbsgfSKNhC.png" alt="20210514162641653"></p><p>函数T：</p><p><img src="https://s2.loli.net/2021/12/05/KIo1mSLWzwVhMl2.png" alt="在这里插入图片描述"></p><h3 id="明文加密"><a href="#明文加密" class="headerlink" title="明文加密"></a>明文加密</h3><p>明文处理大致分解为3步：</p><p>1）、将128bit的明文分成4个32bit的字<script type="math/tex">(X_1,X_2,X_3,X_4)</script>。</p><p>2）、将上述得到的字进行32轮的轮操作。</p><p>3）、最后将进行过32轮操作的4个字进行反序变换后组成128bit的密文。</p><script type="math/tex; mode=display">X_{i+4}=F\left(X_{i}, X_{i+1}, X_{i+2}, X_{i+3}, r k_{i}\right)\\=X_{i} \oplus T\left(X_{i+1} \oplus X_{i+2} \oplus X_{i+3} \oplus r k_{i}\right), i=0,1, \ldots, 31 . \\\left(Y_{0}, Y_{1}, Y_{2}, Y_{3}\right)=R\left(X_{32}, X_{33}, X_{34}, X_{35}\right)=\left(X_{35}, X_{34}, X_{33}, X_{32}\right)</script><p><img src="https://s2.loli.net/2021/12/07/ouFQJWXMqKb6Cdm.png" alt="在这里插入图片描述"></p><p><img src="https://s2.loli.net/2021/12/05/lZA15sPzoMQjyGt.png" alt="在这里插入图片描述"></p><h2 id="SM4代码介绍"><a href="#SM4代码介绍" class="headerlink" title="SM4代码介绍"></a>SM4代码介绍</h2><h3 id="定义S盒和FK-CK"><a href="#定义S盒和FK-CK" class="headerlink" title="定义S盒和FK,CK"></a>定义S盒和FK,CK</h3><p>如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># S盒</span>S_BOX <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xD6</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0xE9</span><span class="token punctuation">,</span> <span class="token number">0xFE</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xE1</span><span class="token punctuation">,</span> <span class="token number">0x3D</span><span class="token punctuation">,</span> <span class="token number">0xB7</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">,</span> <span class="token number">0xB6</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0xC2</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0xFB</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x2B</span><span class="token punctuation">,</span>       <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0x9A</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0x2A</span><span class="token punctuation">,</span> <span class="token number">0xBE</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0xC3</span><span class="token punctuation">,</span> <span class="token number">0xAA</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x9C</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span>       <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0xF4</span><span class="token punctuation">,</span> <span class="token number">0x91</span><span class="token punctuation">,</span> <span class="token number">0xEF</span><span class="token punctuation">,</span> <span class="token number">0x98</span><span class="token punctuation">,</span> <span class="token number">0x7A</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0xED</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0xAC</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0xE4</span><span class="token punctuation">,</span> <span class="token number">0xB3</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span>       <span class="token number">0xA9</span><span class="token punctuation">,</span> <span class="token number">0xC9</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0xE8</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0xDF</span><span class="token punctuation">,</span> <span class="token number">0x94</span><span class="token punctuation">,</span> <span class="token number">0xFA</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0x8F</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0xA6</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0xA7</span><span class="token punctuation">,</span> <span class="token number">0xFC</span><span class="token punctuation">,</span>       <span class="token number">0xF3</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0xBA</span><span class="token punctuation">,</span> <span class="token number">0x83</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0xE6</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0x4F</span><span class="token punctuation">,</span> <span class="token number">0xA8</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x6B</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0xB2</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span>       <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0xDA</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0xF8</span><span class="token punctuation">,</span> <span class="token number">0xEB</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">,</span> <span class="token number">0x4B</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x9D</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span> <span class="token number">0x5E</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span>       <span class="token number">0xD1</span><span class="token punctuation">,</span> <span class="token number">0xA2</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x87</span><span class="token punctuation">,</span> <span class="token number">0xD4</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x9F</span><span class="token punctuation">,</span> <span class="token number">0xD3</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span>       <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0xE7</span><span class="token punctuation">,</span> <span class="token number">0xA0</span><span class="token punctuation">,</span> <span class="token number">0xC4</span><span class="token punctuation">,</span> <span class="token number">0xC8</span><span class="token punctuation">,</span> <span class="token number">0x9E</span><span class="token punctuation">,</span> <span class="token number">0xEA</span><span class="token punctuation">,</span> <span class="token number">0xBF</span><span class="token punctuation">,</span> <span class="token number">0x8A</span><span class="token punctuation">,</span> <span class="token number">0xD2</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0xC7</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0xB5</span><span class="token punctuation">,</span>       <span class="token number">0xA3</span><span class="token punctuation">,</span> <span class="token number">0xF7</span><span class="token punctuation">,</span> <span class="token number">0xF2</span><span class="token punctuation">,</span> <span class="token number">0xCE</span><span class="token punctuation">,</span> <span class="token number">0xF9</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span> <span class="token number">0xA1</span><span class="token punctuation">,</span> <span class="token number">0xE0</span><span class="token punctuation">,</span> <span class="token number">0xAE</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token number">0xA4</span><span class="token punctuation">,</span> <span class="token number">0x9B</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span>       <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0xF5</span><span class="token punctuation">,</span> <span class="token number">0x8C</span><span class="token punctuation">,</span> <span class="token number">0xB1</span><span class="token punctuation">,</span> <span class="token number">0xE3</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0xF6</span><span class="token punctuation">,</span> <span class="token number">0xE2</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0xCA</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span>       <span class="token number">0x23</span><span class="token punctuation">,</span> <span class="token number">0xAB</span><span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x4E</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0xD5</span><span class="token punctuation">,</span> <span class="token number">0xDB</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0xDE</span><span class="token punctuation">,</span> <span class="token number">0xFD</span><span class="token punctuation">,</span> <span class="token number">0x8E</span><span class="token punctuation">,</span> <span class="token number">0x2F</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span>       <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x6C</span><span class="token punctuation">,</span> <span class="token number">0x5B</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x8D</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">,</span> <span class="token number">0xAF</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0xDD</span><span class="token punctuation">,</span> <span class="token number">0xBC</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0xD9</span><span class="token punctuation">,</span> <span class="token number">0x5C</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span>       <span class="token number">0x1F</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0xD8</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0xA5</span><span class="token punctuation">,</span> <span class="token number">0xCD</span><span class="token punctuation">,</span> <span class="token number">0x7B</span><span class="token punctuation">,</span> <span class="token number">0xBD</span><span class="token punctuation">,</span> <span class="token number">0x2D</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0xD0</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0xB8</span><span class="token punctuation">,</span>       <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0xB4</span><span class="token punctuation">,</span> <span class="token number">0xB0</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x96</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0xB9</span><span class="token punctuation">,</span> <span class="token number">0xF1</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0xC5</span><span class="token punctuation">,</span> <span class="token number">0x6E</span><span class="token punctuation">,</span>       <span class="token number">0xC6</span><span class="token punctuation">,</span> <span class="token number">0x84</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0xF0</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0xEC</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0xDC</span><span class="token punctuation">,</span> <span class="token number">0x4D</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0xEE</span><span class="token punctuation">,</span> <span class="token number">0x5F</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0xD7</span><span class="token punctuation">,</span> <span class="token number">0xCB</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span>       <span class="token number">0x48</span><span class="token punctuation">]</span><span class="token comment"># 系统参数FK</span>FK <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xa3b1bac6</span><span class="token punctuation">,</span> <span class="token number">0x56aa3350</span><span class="token punctuation">,</span> <span class="token number">0x677d9197</span><span class="token punctuation">,</span> <span class="token number">0xb27022dc</span><span class="token punctuation">]</span><span class="token comment"># 固定参数CK</span>CK <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x00070e15</span><span class="token punctuation">,</span> <span class="token number">0x1c232a31</span><span class="token punctuation">,</span> <span class="token number">0x383f464d</span><span class="token punctuation">,</span> <span class="token number">0x545b6269</span><span class="token punctuation">,</span> <span class="token number">0x70777e85</span><span class="token punctuation">,</span> <span class="token number">0x8c939aa1</span><span class="token punctuation">,</span> <span class="token number">0xa8afb6bd</span><span class="token punctuation">,</span> <span class="token number">0xc4cbd2d9</span><span class="token punctuation">,</span>      <span class="token number">0xe0e7eef5</span><span class="token punctuation">,</span> <span class="token number">0xfc030a11</span><span class="token punctuation">,</span> <span class="token number">0x181f262d</span><span class="token punctuation">,</span> <span class="token number">0x343b4249</span><span class="token punctuation">,</span> <span class="token number">0x50575e65</span><span class="token punctuation">,</span> <span class="token number">0x6c737a81</span><span class="token punctuation">,</span> <span class="token number">0x888f969d</span><span class="token punctuation">,</span> <span class="token number">0xa4abb2b9</span><span class="token punctuation">,</span>      <span class="token number">0xc0c7ced5</span><span class="token punctuation">,</span> <span class="token number">0xdce3eaf1</span><span class="token punctuation">,</span> <span class="token number">0xf8ff060d</span><span class="token punctuation">,</span> <span class="token number">0x141b2229</span><span class="token punctuation">,</span> <span class="token number">0x30373e45</span><span class="token punctuation">,</span> <span class="token number">0x4c535a61</span><span class="token punctuation">,</span> <span class="token number">0x686f767d</span><span class="token punctuation">,</span> <span class="token number">0x848b9299</span><span class="token punctuation">,</span>      <span class="token number">0xa0a7aeb5</span><span class="token punctuation">,</span> <span class="token number">0xbcc3cad1</span><span class="token punctuation">,</span> <span class="token number">0xd8dfe6ed</span><span class="token punctuation">,</span> <span class="token number">0xf4fb0209</span><span class="token punctuation">,</span> <span class="token number">0x10171e25</span><span class="token punctuation">,</span> <span class="token number">0x2c333a41</span><span class="token punctuation">,</span> <span class="token number">0x484f565d</span><span class="token punctuation">,</span> <span class="token number">0x646b7279</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义T函数"><a href="#定义T函数" class="headerlink" title="定义T函数"></a>定义T函数</h3><p>$T(x)=L(τ(x))$</p><p>这里分别定义$τ(x)$和$L(x)$</p><p>$τ(x)$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@staticmethod</span><span class="token keyword">def</span> <span class="token function">_s_box</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 将 32bit 拆分成 4x8bit，依次进行S盒变换</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'big'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>S_BOX<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">'big'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$L(x)$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@staticmethod</span><span class="token keyword">def</span> <span class="token function">_rot_left</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""循环左移"""</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> m<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">-</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="密钥扩展"><a href="#密钥扩展" class="headerlink" title="密钥扩展"></a>密钥扩展</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_generate_key</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""密钥生成"""</span>    key_r<span class="token punctuation">,</span> key_temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment"># 将 128bit 拆分成 4x32bit</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i<span class="token punctuation">:</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'big'</span><span class="token punctuation">)</span>        key_temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp <span class="token operator">^</span> FK<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token comment"># 循环生成轮密钥</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        box_in <span class="token operator">=</span> key_temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> key_temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">^</span> key_temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">^</span> CK<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        box_out <span class="token operator">=</span> self<span class="token punctuation">.</span>_s_box<span class="token punctuation">(</span>box_in<span class="token punctuation">)</span>        key_r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key_temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">^</span> box_out <span class="token operator">^</span> self<span class="token punctuation">.</span>_rot_left<span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>_rot_left<span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span>        key_temp <span class="token operator">=</span> key_temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span>key_r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> key_r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="主体循环（加密解密一样）"><a href="#主体循环（加密解密一样）" class="headerlink" title="主体循环（加密解密一样）"></a>主体循环（加密解密一样）</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_do</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">,</span> key_r<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       text_ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span>       <span class="token comment"># 将 128bit 转化成 4x32bit</span>       <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>           text_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>text<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i<span class="token punctuation">:</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'big'</span><span class="token punctuation">)</span>       <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>           box_in <span class="token operator">=</span> text_<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> text_<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">^</span> text_<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">^</span> key_r<span class="token punctuation">[</span>i<span class="token punctuation">]</span>           box_out <span class="token operator">=</span> self<span class="token punctuation">.</span>_s_box<span class="token punctuation">(</span>box_in<span class="token punctuation">)</span>           temp <span class="token operator">=</span> text_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">^</span> box_out <span class="token operator">^</span> self<span class="token punctuation">.</span>_rot_left<span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>_rot_left<span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>           temp <span class="token operator">=</span> temp <span class="token operator">^</span> self<span class="token punctuation">.</span>_rot_left<span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>_rot_left<span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>           text_ <span class="token operator">=</span> text_<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span>temp<span class="token punctuation">]</span>       text_ <span class="token operator">=</span> text_<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># 结果逆序</span>       <span class="token comment"># 将 4x32bit 合并成 128bit</span>       result <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>           result<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>text_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'big'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token keyword">return</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="加密解密接口"><a href="#加密解密接口" class="headerlink" title="加密解密接口"></a>加密解密接口</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> plaintext<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>_do<span class="token punctuation">(</span>plaintext<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_key_r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ciphertext<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>_do<span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_key_r<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行验证"><a href="#运行验证" class="headerlink" title="运行验证"></a>运行验证</h3><p>这里只关注算法本身的加密，未实现分组密码的分组的加密模式和填充，故只支持标准的128bit输入和输出。</p><p>明文：<code>00112233445566778899aabbccddeeff</code></p><p>密钥：<code>0123456789ABCDEFFEDCBA9876543210</code></p><p>密文：<code>09325c4853832dcb9337a5984f671b9a</code></p><p>运行代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"16进制Key：0123456789ABCDEFFEDCBA9876543210"</span><span class="token punctuation">)</span>    <span class="token comment"># 128bit密钥</span>    key <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">"0123456789ABCDEFFEDCBA9876543210"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"16进制明文：00112233445566778899aabbccddeeff"</span><span class="token punctuation">)</span>    <span class="token comment"># 128bit明文</span>    plaintext <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">"00112233445566778899aabbccddeeff"</span><span class="token punctuation">)</span>    sm4 <span class="token operator">=</span> SM4Cipher<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"16进制密文："</span><span class="token operator">+</span> sm4<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>plaintext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 09325c4853832dcb9337a5984f671b9a</span>    encryption <span class="token operator">=</span> sm4<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>plaintext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    encryp_txt <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>encryption<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"16进制解密密文："</span><span class="token operator">+</span>sm4<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>encryp_txt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><p><img src="https://s2.loli.net/2021/12/05/MhitfE7LwINscRU.png" alt="image-20211205163627150"></p><p>网站验证：</p><p>网站：<a href="https://the-x.cn/cryptography/Sm4.aspx">SM4加密网站</a>:  <a href="https://the-x.cn/cryptography/Sm4.aspx">https://the-x.cn/cryptography/Sm4.aspx</a></p><p><img src="https://s2.loli.net/2021/12/05/ol8TypPBFCHhbXx.png" alt="image-20211205163922636"></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""@Time    : 2021/12/5@Author  : LowlyLi@Version : 1.0@File    : SM4.py@Introduce: SM4 国密4"""</span><span class="token comment"># S盒</span>S_BOX <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xD6</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0xE9</span><span class="token punctuation">,</span> <span class="token number">0xFE</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xE1</span><span class="token punctuation">,</span> <span class="token number">0x3D</span><span class="token punctuation">,</span> <span class="token number">0xB7</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">,</span> <span class="token number">0xB6</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0xC2</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0xFB</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x2B</span><span class="token punctuation">,</span>       <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0x9A</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0x2A</span><span class="token punctuation">,</span> <span class="token number">0xBE</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0xC3</span><span class="token punctuation">,</span> <span class="token number">0xAA</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x9C</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span>       <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0xF4</span><span class="token punctuation">,</span> <span class="token number">0x91</span><span class="token punctuation">,</span> <span class="token number">0xEF</span><span class="token punctuation">,</span> <span class="token number">0x98</span><span class="token punctuation">,</span> <span class="token number">0x7A</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0xED</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0xAC</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0xE4</span><span class="token punctuation">,</span> <span class="token number">0xB3</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span>       <span class="token number">0xA9</span><span class="token punctuation">,</span> <span class="token number">0xC9</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0xE8</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0xDF</span><span class="token punctuation">,</span> <span class="token number">0x94</span><span class="token punctuation">,</span> <span class="token number">0xFA</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0x8F</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0xA6</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0xA7</span><span class="token punctuation">,</span> <span class="token number">0xFC</span><span class="token punctuation">,</span>       <span class="token number">0xF3</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0xBA</span><span class="token punctuation">,</span> <span class="token number">0x83</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0xE6</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0x4F</span><span class="token punctuation">,</span> <span class="token number">0xA8</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x6B</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0xB2</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span>       <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0xDA</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0xF8</span><span class="token punctuation">,</span> <span class="token number">0xEB</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">,</span> <span class="token number">0x4B</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x9D</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span> <span class="token number">0x5E</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span>       <span class="token number">0xD1</span><span class="token punctuation">,</span> <span class="token number">0xA2</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x87</span><span class="token punctuation">,</span> <span class="token number">0xD4</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x9F</span><span class="token punctuation">,</span> <span class="token number">0xD3</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span>       <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0xE7</span><span class="token punctuation">,</span> <span class="token number">0xA0</span><span class="token punctuation">,</span> <span class="token number">0xC4</span><span class="token punctuation">,</span> <span class="token number">0xC8</span><span class="token punctuation">,</span> <span class="token number">0x9E</span><span class="token punctuation">,</span> <span class="token number">0xEA</span><span class="token punctuation">,</span> <span class="token number">0xBF</span><span class="token punctuation">,</span> <span class="token number">0x8A</span><span class="token punctuation">,</span> <span class="token number">0xD2</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0xC7</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0xB5</span><span class="token punctuation">,</span>       <span class="token number">0xA3</span><span class="token punctuation">,</span> <span class="token number">0xF7</span><span class="token punctuation">,</span> <span class="token number">0xF2</span><span class="token punctuation">,</span> <span class="token number">0xCE</span><span class="token punctuation">,</span> <span class="token number">0xF9</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span> <span class="token number">0xA1</span><span class="token punctuation">,</span> <span class="token number">0xE0</span><span class="token punctuation">,</span> <span class="token number">0xAE</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token number">0xA4</span><span class="token punctuation">,</span> <span class="token number">0x9B</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span>       <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0xF5</span><span class="token punctuation">,</span> <span class="token number">0x8C</span><span class="token punctuation">,</span> <span class="token number">0xB1</span><span class="token punctuation">,</span> <span class="token number">0xE3</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0xF6</span><span class="token punctuation">,</span> <span class="token number">0xE2</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0xCA</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span>       <span class="token number">0x23</span><span class="token punctuation">,</span> <span class="token number">0xAB</span><span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x4E</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0xD5</span><span class="token punctuation">,</span> <span class="token number">0xDB</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0xDE</span><span class="token punctuation">,</span> <span class="token number">0xFD</span><span class="token punctuation">,</span> <span class="token number">0x8E</span><span class="token punctuation">,</span> <span class="token number">0x2F</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span>       <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x6C</span><span class="token punctuation">,</span> <span class="token number">0x5B</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x8D</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">,</span> <span class="token number">0xAF</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0xDD</span><span class="token punctuation">,</span> <span class="token number">0xBC</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0xD9</span><span class="token punctuation">,</span> <span class="token number">0x5C</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span>       <span class="token number">0x1F</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0xD8</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0xA5</span><span class="token punctuation">,</span> <span class="token number">0xCD</span><span class="token punctuation">,</span> <span class="token number">0x7B</span><span class="token punctuation">,</span> <span class="token number">0xBD</span><span class="token punctuation">,</span> <span class="token number">0x2D</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0xD0</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0xB8</span><span class="token punctuation">,</span>       <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0xB4</span><span class="token punctuation">,</span> <span class="token number">0xB0</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x96</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0xB9</span><span class="token punctuation">,</span> <span class="token number">0xF1</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0xC5</span><span class="token punctuation">,</span> <span class="token number">0x6E</span><span class="token punctuation">,</span>       <span class="token number">0xC6</span><span class="token punctuation">,</span> <span class="token number">0x84</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0xF0</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0xEC</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0xDC</span><span class="token punctuation">,</span> <span class="token number">0x4D</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0xEE</span><span class="token punctuation">,</span> <span class="token number">0x5F</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0xD7</span><span class="token punctuation">,</span> <span class="token number">0xCB</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span>       <span class="token number">0x48</span><span class="token punctuation">]</span><span class="token comment"># 系统参数FK</span>FK <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xa3b1bac6</span><span class="token punctuation">,</span> <span class="token number">0x56aa3350</span><span class="token punctuation">,</span> <span class="token number">0x677d9197</span><span class="token punctuation">,</span> <span class="token number">0xb27022dc</span><span class="token punctuation">]</span><span class="token comment"># 固定参数CK</span>CK <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x00070e15</span><span class="token punctuation">,</span> <span class="token number">0x1c232a31</span><span class="token punctuation">,</span> <span class="token number">0x383f464d</span><span class="token punctuation">,</span> <span class="token number">0x545b6269</span><span class="token punctuation">,</span> <span class="token number">0x70777e85</span><span class="token punctuation">,</span> <span class="token number">0x8c939aa1</span><span class="token punctuation">,</span> <span class="token number">0xa8afb6bd</span><span class="token punctuation">,</span> <span class="token number">0xc4cbd2d9</span><span class="token punctuation">,</span>      <span class="token number">0xe0e7eef5</span><span class="token punctuation">,</span> <span class="token number">0xfc030a11</span><span class="token punctuation">,</span> <span class="token number">0x181f262d</span><span class="token punctuation">,</span> <span class="token number">0x343b4249</span><span class="token punctuation">,</span> <span class="token number">0x50575e65</span><span class="token punctuation">,</span> <span class="token number">0x6c737a81</span><span class="token punctuation">,</span> <span class="token number">0x888f969d</span><span class="token punctuation">,</span> <span class="token number">0xa4abb2b9</span><span class="token punctuation">,</span>      <span class="token number">0xc0c7ced5</span><span class="token punctuation">,</span> <span class="token number">0xdce3eaf1</span><span class="token punctuation">,</span> <span class="token number">0xf8ff060d</span><span class="token punctuation">,</span> <span class="token number">0x141b2229</span><span class="token punctuation">,</span> <span class="token number">0x30373e45</span><span class="token punctuation">,</span> <span class="token number">0x4c535a61</span><span class="token punctuation">,</span> <span class="token number">0x686f767d</span><span class="token punctuation">,</span> <span class="token number">0x848b9299</span><span class="token punctuation">,</span>      <span class="token number">0xa0a7aeb5</span><span class="token punctuation">,</span> <span class="token number">0xbcc3cad1</span><span class="token punctuation">,</span> <span class="token number">0xd8dfe6ed</span><span class="token punctuation">,</span> <span class="token number">0xf4fb0209</span><span class="token punctuation">,</span> <span class="token number">0x10171e25</span><span class="token punctuation">,</span> <span class="token number">0x2c333a41</span><span class="token punctuation">,</span> <span class="token number">0x484f565d</span><span class="token punctuation">,</span> <span class="token number">0x646b7279</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">SM4Cipher</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">16</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"SM4 key must be length of 16. "</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_key_r <span class="token operator">=</span> self<span class="token punctuation">.</span>_generate_key<span class="token punctuation">(</span>key<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>block_size <span class="token operator">=</span> <span class="token number">16</span>    <span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> plaintext<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_do<span class="token punctuation">(</span>plaintext<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_key_r<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ciphertext<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_do<span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_key_r<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_do</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">,</span> key_r<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        text_ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment"># 将 128bit 转化成 4x32bit</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            text_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>text<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i<span class="token punctuation">:</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'big'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            box_in <span class="token operator">=</span> text_<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> text_<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">^</span> text_<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">^</span> key_r<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            box_out <span class="token operator">=</span> self<span class="token punctuation">.</span>_s_box<span class="token punctuation">(</span>box_in<span class="token punctuation">)</span>            temp <span class="token operator">=</span> text_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">^</span> box_out <span class="token operator">^</span> self<span class="token punctuation">.</span>_rot_left<span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>_rot_left<span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>            temp <span class="token operator">=</span> temp <span class="token operator">^</span> self<span class="token punctuation">.</span>_rot_left<span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>_rot_left<span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>            text_ <span class="token operator">=</span> text_<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span>temp<span class="token punctuation">]</span>        text_ <span class="token operator">=</span> text_<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># 结果逆序</span>        <span class="token comment"># 将 4x32bit 合并成 128bit</span>        result <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>text_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'big'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_generate_key</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""密钥生成"""</span>        key_r<span class="token punctuation">,</span> key_temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment"># 将 128bit 拆分成 4x32bit</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i<span class="token punctuation">:</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'big'</span><span class="token punctuation">)</span>            key_temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp <span class="token operator">^</span> FK<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token comment"># 循环生成轮密钥</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            box_in <span class="token operator">=</span> key_temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> key_temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">^</span> key_temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">^</span> CK<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            box_out <span class="token operator">=</span> self<span class="token punctuation">.</span>_s_box<span class="token punctuation">(</span>box_in<span class="token punctuation">)</span>            key_r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key_temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">^</span> box_out <span class="token operator">^</span> self<span class="token punctuation">.</span>_rot_left<span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>_rot_left<span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span>            key_temp <span class="token operator">=</span> key_temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span>key_r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> key_r    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">_s_box</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 将 32bit 拆分成 4x8bit，依次进行S盒变换</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'big'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>S_BOX<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">'big'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">_rot_left</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""循环左移"""</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> m<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">-</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>     <span class="token comment"># 128bit密钥</span>    key <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">"0123456789ABCDEFFEDCBA9876543210"</span><span class="token punctuation">)</span>     <span class="token comment"># 128bit明文</span>    plaintext <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">"00112233445566778899aabbccddeeff"</span><span class="token punctuation">)</span>      sm4 <span class="token operator">=</span> SM4Cipher<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sm4<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>plaintext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># 09325c4853832dcb9337a5984f671b9a</span>    encryption <span class="token operator">=</span> sm4<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>plaintext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    encryp_txt <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>encryption<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sm4<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>encryp_txt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 00112233445566778899aabbccddeeff</span><span class="token triple-quoted-string string">"""# 样例一key = "0123456789ABCDEFFEDCBA9876543210"  # 16进制字符串plaintext = "0123456789ABCDEFFEDCBA9876543210"  # 16进制字符串ciphertext = "681edf34d206965e86b3e94f536e4246"  # 16进制字符串# 样例二key = "0123456789ABCDEFFEDCBA9876543210"  # 16进制字符串plaintext = "00112233445566778899aabbccddeeff"  # 16进制字符串ciphertext = "09325c4853832dcb9337a5984f671b9a"  # 16进制字符串# 样例三key = "456789ABCDEFFEDCBA98765432100123"  # 16进制字符串plaintext = "2233445566778899aabbccddeeff0011"  # 16进制字符串ciphertext = "58ab414d84fb3008b0bee987f97021e6"  # 16进制字符串# 样例四key = "89ABCDEFFEDCBA987654321001234567"  # 16进制字符串plaintext = "445566778899aabbccddeeff00112233"  # 16进制字符串ciphertext = "5937a929a2d9137216c72a28cd9cf619"  # 16进制字符串"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Paillier算法</title>
      <link href="/2021/12/03/2021-12-3-paillier-suan-fa/"/>
      <url>/2021/12/03/2021-12-3-paillier-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Paillier算法"><a href="#Paillier算法" class="headerlink" title="Paillier算法"></a>Paillier算法</h1><blockquote><p>作者：lowlyli</p><p>时间：2021-12-3</p><p>选题原因：这部分是联邦学习里面的最基础的同态加密，机器学习其实也只是简单的线性运算$y=a*x+b$ ，而同态加密实现加密后运算保存一致，造就了在敏感数据行业机器学习，云计算的发展，采用联邦学习的分布式计算可以有效运用在金融，医疗等敏感信息上，随着个人隐私的加强，无法得到明文数据时，同态加密或许会成为互联网企业进行用户画像分析的下一个突破点。</p></blockquote><h2 id="同态加密介绍"><a href="#同态加密介绍" class="headerlink" title="同态加密介绍"></a>同态加密介绍</h2><h3 id="同态加密"><a href="#同态加密" class="headerlink" title="同态加密"></a>同态加密</h3><p><strong>同态加密</strong>（英语：<strong>Homomorphic encryption</strong>）是一种加密形式，它允许人们对密文进行特定形式的代数运算得到仍然是加密的结果，将其解密所得到的结果与对明文进行同样的运算结果一样。换言之，这项技术令人们可以在加密的数据中进行诸如检索、比较等操作，得出正确的结果，而在整个处理过程中无需对数据进行解密。其意义在于，真正从根本上解决将数据及其操作委托给第三方时的保密问题，例如对于各种云计算的应用。</p><p>本质上，同态加密是指这样一种加密函数，对明文进行环上的加法和乘法运算再加密，与加密后对密文进行相应的运算，结果是等价的。由于这个良好的性质，人们可以委托第三方对数据进行处理而不泄露信息。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><strong>简单定义</strong></p><p>一种加密算法E()和相应的解密算法D()。</p><p>$⊕$和$⊙$为某种数学运算。</p><p>如果加密算法满足：$E(x + y) = E(x) ⊕ E(y)$，我们将这种加密函数叫做加法同态 。</p><p>如果加密算法满足：$E(x * y) = E(x) ⊙ E(y)$，我们将这种加密函数叫做乘法同态 。</p><p><strong>严格定义</strong></p><p>同态加密的思想起源于私密同态，代数同态和算术同态是私密同态的子集。</p><p>$R$ 和 $S$ 是域，称加密函数 $E：R→S $为：</p><p>加法同态，如果存在有效算法$⊕$，$E(x+y)=E(x)⊕E(y)$或者 $x+y=D(E(x)⊕E(y))$成立，并且不泄漏 $x$ 和 $ y$。</p><p>乘法同态，如果存在有效算法$\otimes$ ，$E(xy)=E(x) \otimes E(y)$或者 $xy=D(E(x)\otimes E(y))$成立，并且不泄漏 $x $和 $y$。</p><p>混合乘法同态，如果存在有效算法$\odot$ ，$E(x×y)=E(x)\odot y$ 或者 $xy=D(E(x)\odot y)$成立，并且不泄漏$ x$。</p><p>减法同态，如果存在有效算法$\ominus$ ，$E(x-y)=E(x)\ominus E(y)$或者 $x-y=D(E(x)\ominus E(y))$成立，并且不泄漏 $x$ 和 $ y$，则称$ E() $为减法同态。</p><p>除法同态，如果存在有效算法$\oslash$，$E(x/y)=E(x)\oslash E(y)$或者 $x/y=D(E(x)\oslash E(y))$成立，并且不泄漏$ x $和 $ y$，则称 $E() $为除法同态。</p><p>代数同态，如果 E 既是加法同态又是乘法同态。</p><p>算术同态，如果 E 同时为加法同态、减法同态、乘法同态和除法同态。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p><strong>半同态加密 （Partial Homomorphic Encryption, PHE）</strong>：只支持某些特定的运算法则 f ,PHE 的优点是原理简单、易实现，缺点是仅支持一种运算(加法或乘法)；</p><p><strong>层次同态加密（Liveled HE，LHE）</strong>：一般支持有限次数的加密算法,LHE 的优点是同时支持加法和乘法，并且因为出现时间比 PHE 晚，所以技术更加成熟、一般效率比 FHE 要高很多、和 PHE 效率接近或高于 PHE，缺点是支持的计算次数有限。</p><p><strong>全同态加密 （Fully Homomorphic Encryption, FHE）</strong>：支持无限次的任意运算法则 f，FHE 有以下类别：基于理想格的 FHE 方案、基于 LWE/RLWE 的 FHE 方案等等。FHE 的优点是支持的算子多并且运算次数没有限制，缺点是效率很低，目前还无法支撑大规模的计算。</p><p>第一个满足加法和乘法同态的同态加密方法直到2009年才由Craig Gentry提出。目前来说，全同态加密算法性能较差，应用较少。</p><p>比较常用的是半同态加密算法，实现方式有 RSA （乘法同态）、Elgamal（乘法同态）、Paillier （加法同态）等。</p><h2 id="Paillier算法介绍"><a href="#Paillier算法介绍" class="headerlink" title="Paillier算法介绍"></a>Paillier算法介绍</h2><p>Paillier同态加密是由Pascal Paillier于1999年提出并命名的密码学理论。它是⼀种基于公私钥密码学的概率非对称算法。</p><p>这套理论是⼀个加法同态加密算法，意味着，只要给定公钥和需要加密的信息和，就可以计算加密后的和之和，再可以⽤私钥解密结果，这整个过程精度没有损失。</p><h3 id="算法理论"><a href="#算法理论" class="headerlink" title="算法理论"></a>算法理论</h3><p>Paillier 加密算法作为一种适用性非常广泛的同态公钥加密算法，因基于合数阶剩余类的难解性问题，使得该算法能够应用于许多实际的场景中，下面就 paillier算法的难解问题进行说明。 </p><p>设<script type="math/tex">n= pq</script>，其中<script type="math/tex">p,q</script>为 2 个大素数，<script type="math/tex">\varphi(n)</script>为欧拉函数，</p><script type="math/tex; mode=display">\varphi(n)=(p-1)(q-1)</script><p>Caemichael 函数 $λ(n) = lcm( p-1, q-1)$，</p><script type="math/tex; mode=display">|Z_{n^2}^*|= \varphi(n^2)= n\varphi(n),\\\forall \omega \in Z_{n^2}^* \ \ \ {\omega}^{\lambda} = 1 \bmod\ n,\ \ {\omega}^{n\lambda}=1 \bmod \ n^2</script><p>为直观起见，以下所有的 $λ(n)$用$λ$表示。根据 Caemichael 理论有整数值的函数<script type="math/tex">ε_g</script>定义如下：<script type="math/tex">Z _ {n} \times Z _ {n}^{ * } \rightarrow Z _ {n^{2}}^{ * },(x, y) \rightarrow g^{x} \cdot y^{n} \bmod n^{2}</script>，如果<script type="math/tex">g</script>在<script type="math/tex">Z _ {n^{2}}^{ * }</script>中阶为<script type="math/tex">n</script>的倍数，则<script type="math/tex">ε _ g</script>是一一映射。既对于给定的</p><script type="math/tex; mode=display">\omega \in Z_{n^2}^*,x\in Z_n,\exists y \in Z_{n}^* \ 使得 \varepsilon_{g}(x, y)=\omega</script><p>这样的 <script type="math/tex">\varepsilon_{g}(x, y)</script>称为 <script type="math/tex">\omega</script>  的 n-residousity class, 用 <script type="math/tex">[[\omega]] _ {g}</script>表示。</p><p>目前认为, 对于给定的  <script type="math/tex">n, g, \omega</script> , 计算  <script type="math/tex">[[\omega ]] _ {g}</script>  的问题是困难的, 这也就是 Composite Residousity Assumption(CRA)。</p><p>但是依据  <script type="math/tex">p, q</script> 的知识, 也就是  $\lambda$ , 可以计算出任意的<script type="math/tex">[[\omega ]] _ {g}</script> 事实上, 设<script type="math/tex">S _ {n}=\left\{u<n^{2} \mid u=1 \bmod n\right\}, \forall u \in S _ {n}, L(u)=\frac{u-1}{n}</script> , 则有如下的结果: </p><script type="math/tex; mode=display">[[\omega]]_{g}=\frac{L\left(\omega^{\lambda} \bmod n^{2}\right)}{L\left(g^{\lambda} \bmod n^{2}\right)} \bmod n</script><blockquote><p>补充：Carmichael function[卡迈克尔函数相关性质]</p><p><strong>定义</strong></p><p>在数论中，Carmichael函数的定义为使得$a^m ≡ 1   \bmod   n \ $成立的最小正整数$m$ 其中$( a , n ) = 1$ 将$m$记作$ \lambda(n)$。在抽象代数术语中，$ \lambda(n)$是模$n$的乘法群的指数。</p><p>Carmichael函数也被称为规约函数(reduced totient function)以及最小泛指数函数(least universal exponent function)。</p><p><strong>用Carmichael定理计算</strong><script type="math/tex">\lambda(n)</script><br>根据唯一因式分解定理，任何$n&gt;1$的整数都可以用唯一的方式写成</p><script type="math/tex; mode=display">n=p_{1}^{r_{1}} p_{2}^{r_{2}} \cdots p_{k}^{r_{k}}</script><p>其中，<script type="math/tex">p _ {1}<p _ {2}<\ldots<p _ {k}</script>  是有小到大排列的素数,<script type="math/tex">r _ {1}, r _ {2}, \ldots, r _ {k}</script>是正整数。那么，<script type="math/tex">\lambda(n)</script>就是其中每一项的<script type="math/tex">λ</script>的最小公倍数，有：</p><script type="math/tex; mode=display">\lambda(n)=\operatorname{lcm}\left(\lambda\left(p_{1}^{r_{1}}\right), \lambda\left(p_{2}^{r_{2}}\right), \ldots, \lambda\left(p_{k}^{r_{k}}\right)\right)</script><p>上述的公式可由中国剩余定理来证明。</p><p><strong>Carmichael函数的性质</strong><br>设 $ a$ 和 $ n $ 互素， $ m $ 是最小指数，  <script type="math/tex">a^{m} \equiv 1 \bmod n</script>  ，那么有:</p><script type="math/tex; mode=display">m \mid \lambda(n)</script><p>也就是说，模$n$整数环中任意元素 $ a $ 的阶$  m:=\operatorname{ord}_{n}(a) $ 整除$  \lambda(n)  $。同时还有:</p><script type="math/tex; mode=display">\lambda(n)=\max \left\{\operatorname{ord}_{n}(a): \operatorname{gcd}(a, n)=1\right\}\\ a|b \Rightarrow \lambda(a)| \lambda(b) \\  \lambda(\operatorname{lcm}(a, b))=\operatorname{lcm}(\lambda(a), \lambda(b))</script></blockquote><h3 id="算法过程"><a href="#算法过程" class="headerlink" title="算法过程"></a>算法过程</h3><p><strong>(1) 密钥产生</strong></p><p>选取两个随机的大素数<script type="math/tex">p, q</script> ，计算 <script type="math/tex">n=p * q</script> 和 <script type="math/tex">\lambda=lcm(p-1, q-1)</script> .选取随机数 $g$ ，<script type="math/tex">g \in \mathbb{Z}_{n^{2}}^{ * }</script>  且满足 <script type="math/tex">\mu=\left(L\left(g^{\lambda} \bmod n^{2}\right)\right)^{-1}</script>  存在， 其中函数<script type="math/tex">L(x)</script>  的定义如下 <script type="math/tex">L(x)=\frac{x-1}{n}</script> 。</p><p>此时，公钥为 <script type="math/tex">(n, g)</script> ，私钥为 <script type="math/tex">(\lambda, \mu)</script>。</p><p><strong>(2) 加密过程</strong></p><p>对于明文$m$ ，$ m \in \mathbb{Z}_{n}$  ，选择随机数 $r&lt;n$  ，加密过程为</p><script type="math/tex; mode=display">c=g^{m} r^{n}\left(\bmod n^{2}\right)</script><p><strong>(3) 解密过程</strong></p><p>对于密文  c  解密过程为</p><script type="math/tex; mode=display">m=L\left(c^{\lambda} \operatorname{ \bmod n}^{2}\right) * \mu \operatorname{\bmod n}=\frac{L\left(c^{\lambda} \operatorname{\bmod n}^{2}\right)}{L\left(g^{\lambda} \operatorname{\bmod n}^{2}\right)}</script><h3 id="证明过程"><a href="#证明过程" class="headerlink" title="证明过程"></a>证明过程</h3><blockquote><p><strong>补充前提：</strong></p><p>首先回顾一下二项式定理。  $n \in \mathbb{N}^{*}$ </p><script type="math/tex; mode=display">\small(a+b)^{n}=\sum_{r=0}^{n} C_{n}^{r} a^{n-r} b^{r}=C_{n}^{0} a^{n}+C_{n}^{1} a^{n-1} b+\cdots+C_{n}^{r} a^{n-r} b^{r}+\cdots+C_{n}^{n} b^{n}</script><p>当 $a=1, b=n, n=x $时可以化成下面的形式:</p><script type="math/tex; mode=display">(1+n)^{x}=1+n x+\frac{x(x-1) n^{2}}{2 !}+\ldots</script><p>可以化为:</p><script type="math/tex; mode=display">(1+n)^{x} \equiv 1+n x\left(\bmod n^{2}\right)</script><p>令 $ y=(1+n)^{x} \bmod n^{2} $, 可化简为$  x \equiv \frac{y-1}{n} \quad\left(\bmod n^{2}\right) $, 再令  $L(u)=\frac{u-1}{n} $<br>则</p><script type="math/tex; mode=display">\smallL\left((1+n)^{x} \bmod n^{2}\right) \equiv L(y) \equiv \frac{y-1}{n} \quad(\bmod n) \equiv x \quad(\bmod</script><p>即：$L\left((1+n)^{x} \bmod n^{2}\right) \equiv x \quad(\bmod n) $</p><p>由上式结论不难知道：$μ=λ^{-1},(g=n+1)$。</p><p>此外，还有 $ r^{λn}\bmod N^2=1$</p></blockquote><p><strong>证明过程如下：</strong></p><p>因为</p><script type="math/tex; mode=display">\lambda=l c m(p-1, q-1)</script><p>所以</p><script type="math/tex; mode=display">p-1|\lambda, \quad q-1| \lambda=>\lambda=a(p-1)=b(q-1)</script><p>由费马小定理可得</p><script type="math/tex; mode=display">g^{\lambda}=g^{a(p-1)} \equiv 1 \bmod p=>p \mid g^{\lambda}-1</script><p>同理</p><script type="math/tex; mode=display">g^{\lambda}=g^{b(q-1)} \equiv 1 \bmod p \Rightarrow q \mid g^{\lambda}-1</script><p>又因为$gcd(p,q) = 1$</p><p>所以</p><script type="math/tex; mode=display">p q\left|g^{\lambda}-1=>n\right| g^{\lambda}-1 \Rightarrow g^{\lambda} \equiv 1 \bmod n=>g^{\lambda}=k_{1} n+1</script><p>同理</p><script type="math/tex; mode=display">r^{\lambda}=k_{2} n+1\\c^{\lambda}=\left(g^{m} r^{n}\right)^{\lambda} \bmod \left(n^{2}\right) \\=g^{m \lambda} \bmod \left(n^{2}\right) \cdot r^{n \lambda} \bmod \left(n^{2}\right)\\=\left(k_{1} n+1\right)^{m} \bmod \left(n^{2}\right) \cdot\left(k_{2} n+1\right)^{n} \bmod \left(n^{2}\right)</script><p>有以下性质</p><script type="math/tex; mode=display">\begin{aligned}(k n+1) \bmod \left(n^{2}\right) &=k n+1 \\(k n+1)^{2} \bmod \left(n^{2}\right) &=2 k n+1 \\(k n+1)^{3} \bmod \left(n^{2}\right) &=3 k n+1 \\\cdots & \\(k n+1)^{m} \bmod \left(n^{2}\right) &=m k n+1\end{aligned}</script><p>所以</p><script type="math/tex; mode=display">c^{\lambda}=\left(m k_{1} n+1\right) \bmod \left(n^{2}\right) \cdot\left(k_{2} n^{2}+1\right) \bmod \left(n^{2}\right)\\=\left(m k_{1} n+1\right) \bmod \left(n^{2}\right)</script><p>所以</p><script type="math/tex; mode=display">\frac{L\left(c^{\lambda} \bmod \left(n^{2}\right)\right)}{L\left(g^{\lambda} \bmod \left(n^{2}\right)\right)}=\frac{\frac{m k_{1} n}{n}}{\frac{k_{1} n}{n}}=m</script><h3 id="同态分析"><a href="#同态分析" class="headerlink" title="同态分析"></a>同态分析</h3><p>同时，该算法还满足加法同态和乘法同态的两个性质。</p><p>下面分别就加法同态和乘法同态的证明过程做具体介绍。 </p><p>首先给定两个密文</p><script type="math/tex; mode=display"> E\left(M_{1}, p k\right)=g^{M_{1}} R_{1}^{n} \bmod n^{2}</script><p>  和</p><script type="math/tex; mode=display"> E\left(M_{2}, p k\right)=g^{M_{2}} R_{2}^{n} \bmod n^{2}  ，</script><p>其中<script type="math/tex">R_{1} \in Z_{n}^{*}, R_{2} \in Z_{n}^{*}</script></p><p><strong>(1) paillier 算法的加法同态证明过程如下:</strong></p><script type="math/tex; mode=display">\begin{array}{l}D\left(E\left(M_{1}, p k\right) \cdot E\left(M_{2}, p k\right) \bmod n^{2}\right) \\=D\left(\left(g^{M_{1}} R_{1}^{n}\right)\left(g^{M_{2}} R_{2}^{n}\right) \bmod n^{2}\right) \\=D\left(E\left(M_{1}+M_{2}, p k\right)\right) \\=M_{1}+M_{2}\end{array}</script><p><strong>(2) paillier 算法的乘法同态证明过程如下:</strong></p><script type="math/tex; mode=display">\begin{aligned}& D\left(E\left(M_{1}, p k\right)^{M_{2}} \bmod n^{2}\right) \\=& D\left(\left(g^{M_{1}} R_{1}^{n}\right)^{M_{2}} \bmod n^{2}\right) \\=& D\left(E\left(M_{1} M_{2}, p k\right)\right) \\=& M_{1} M_{2}\end{aligned}</script><h2 id="Paillier算法实现"><a href="#Paillier算法实现" class="headerlink" title="Paillier算法实现"></a>Paillier算法实现</h2><p>这里采用现成的库进行演示，源码里面封装好了加密解密过程，并创建了加密后的对象，重写了相关的运算；</p><p>感兴趣可以看以下：</p><p><a href="https://python-paillier.readthedocs.io/en/stable/phe.html">源码分析</a></p><p><a href="https://python-paillier.readthedocs.io/en/stable/phe.html">https://python-paillier.readthedocs.io/en/stable/phe.html</a></p><p><a href="https://python-paillier.readthedocs.io/en/develop/index.html">用法介绍</a></p><p><a href="https://python-paillier.readthedocs.io/en/develop/index.html">https://python-paillier.readthedocs.io/en/develop/index.html</a></p><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> phe <span class="token keyword">import</span> paillier <span class="token comment"># 开源库</span><span class="token keyword">import</span> time <span class="token comment"># 做性能测试</span><span class="token comment"># 测试paillier参数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"默认私钥大小："</span><span class="token punctuation">,</span>paillier<span class="token punctuation">.</span>DEFAULT_KEYSIZE<span class="token punctuation">)</span> <span class="token comment">#2048</span><span class="token comment"># 生成公私钥</span>public_key<span class="token punctuation">,</span>private_key <span class="token operator">=</span> paillier<span class="token punctuation">.</span>generate_paillier_keypair<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 测试需要加密的数据</span>message_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3.1415926</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4.6e-12</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"原始数据："</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message_list<span class="token punctuation">)</span><span class="token comment"># 加密操作</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始加密"</span><span class="token punctuation">)</span>time_start_enc <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>encrypted_message_list <span class="token operator">=</span> <span class="token punctuation">[</span>public_key<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token keyword">for</span> m <span class="token keyword">in</span> message_list<span class="token punctuation">]</span>time_end_enc <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"加密耗时ms："</span><span class="token punctuation">,</span>time_end_enc<span class="token operator">-</span>time_start_enc<span class="token punctuation">)</span>encrypted_message_list_ciphertext <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>encrypted_message_list_len <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> num <span class="token keyword">in</span> encrypted_message_list<span class="token punctuation">:</span>    encrypted_message_list_ciphertext<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">.</span>ciphertext<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    encrypted_message_list_len<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">.</span>ciphertext<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>bit_length<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"加密后封装类:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>encrypted_message_list<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"加密后数据："</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>encrypted_message_list_ciphertext<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"加密后数据长度"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>encrypted_message_list_len<span class="token punctuation">)</span><span class="token comment"># 解密操作</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始解密"</span><span class="token punctuation">)</span>time_start_dec <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>decrypted_message_list <span class="token operator">=</span> <span class="token punctuation">[</span>private_key<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> encrypted_message_list<span class="token punctuation">]</span>time_end_dec <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"解密耗时ms："</span><span class="token punctuation">,</span>time_end_dec<span class="token operator">-</span>time_start_dec<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"解密数据:"</span><span class="token punctuation">,</span>decrypted_message_list<span class="token punctuation">)</span><span class="token comment"># 测试加法和乘法同态</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试同态："</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c <span class="token operator">=</span> encrypted_message_list <span class="token comment"># a,b,c分别为对应密文</span>a_sum <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">5</span> <span class="token comment"># 密文加明文</span>a_sub <span class="token operator">=</span> a <span class="token operator">-</span> <span class="token number">3</span> <span class="token comment"># 密文加明文的相反数</span>b_mul <span class="token operator">=</span> b <span class="token operator">*</span> <span class="token number">1</span> <span class="token comment"># 密文乘明文,数乘</span>c_div <span class="token operator">=</span> c <span class="token operator">/</span> <span class="token operator">-</span><span class="token number">10.0</span> <span class="token comment"># 密文乘明文的倒数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a:"</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>ciphertext<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 密文a的纯文本形式</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a_sum："</span><span class="token punctuation">,</span>a_sum<span class="token punctuation">.</span>ciphertext<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 密文a_sum的纯文本形式</span><span class="token comment"># print(a_sum.ciphertext(False))</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a+5="</span><span class="token punctuation">,</span>private_key<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>a_sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a-3"</span><span class="token punctuation">,</span>private_key<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>a_sub<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b*1="</span><span class="token punctuation">,</span>private_key<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>b_mul<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c/-10.0="</span><span class="token punctuation">,</span>private_key<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>c_div<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">##密文加密文</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"密文加密文"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"明文相加"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>private_key<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">+</span>private_key<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"密文相加再解密"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>private_key<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#报错，不支持a*b，因为通过密文加实现了明文加的目的，这和原理设计是不一致的，只支持密文加！</span><span class="token comment">#print((private_key.decrypt(a)+private_key.decrypt(b))==private_key.decrypt(a*b))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">默认私钥大小： <span class="token number">2048</span>原始数据：<span class="token punctuation">[</span><span class="token number">3.1415926</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4.6e-12</span><span class="token punctuation">]</span>开始加密加密耗时ms： <span class="token number">0.04004788398742676</span>加密后封装类<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">phe<span class="token punctuation">.</span>paillier<span class="token punctuation">.</span></span>EncryptedNumber</span> object at 0x000002A5A5626520<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">phe<span class="token punctuation">.</span>paillier<span class="token punctuation">.</span></span>EncryptedNumber</span> object at 0x000002A5A5648400<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">phe<span class="token punctuation">.</span>paillier<span class="token punctuation">.</span></span>EncryptedNumber</span> object at 0x000002A5A7234C70<span class="token punctuation">&gt;</span></span><span class="token punctuation">]</span>加密后数据：<span class="token punctuation">[</span><span class="token number">524291991382170452217704475980691776837614405188522037968068175026564759427912320918307453096000382119350489461565751654667188742927175709616936014994449725543996253181424504133113093704476842502121509404600704704401020343657955051139488993394696510864569944395376107274831208305297772744375254428029352127714153970661925734298887549106462250028475185047600901566232815901730690679594599732103375886312485088441992712816214151517489650303414853949493050648291376095351556437141922062712607363860043601898555564600998987018381122670560202868977113629267250394289271307071768894375207856525112730764648552403804056635121599918143847892529515739827570196829130981763379171478096053156763491864533735562542904363358041636200671073380326111231382706038175694844342345290261787254748389348410687268685858444786488671767893206001963801449392389648930342085919849556045695572133259745582479963206406380994047951250058959853589560058962477910483298184902450736920563613951952547910853893303937322618704979371386401229968669808155025000319713893612636379277847559556088628875403182870219822406238306335177716502535762098493866878014836214249807055797477782352753227476858275742534314681553372057747251377368724755085915645471865275377623886459</span><span class="token punctuation">,</span> <span class="token number">269416424940886258693607260919488899845323764158616743749562006350639334858860427630659801338175678237124059137369627102051692452708091412719454022760515608223168361771711511747659126348989200942282546213019031501276065278364500888142766122517486053501206909354206670771945142628130707930654117834933893563876174302284605869037968954680433036310127553156824506084239452451725133622811971552446088378848338372034890331747119906390948627406273834264276845477660299119138603749781908689329085253292439523208528310438945333432983538267254740717013631946838120879332465184659686000301180662539102218024205358009140930273691260050183731830759440852865440742561544056141841979048430743911163852158845831858580757386884886402388858888211858821791968248589222950428572193200605881706047318018918551026896635566765386440926309183799721788073420579647226409581581112359939183851016788169669633614025777403325802025116007374430448105053688356467589927500134144872912575227027663354970924471933252614007929165708738565059332030526084180726286433089665082262477021640930039185640779877964368351443207035365443809983778188070146916089108323645588170174174728982137244143439173569978383981968082501105831184832488139182969566677450260491360575645497</span><span class="token punctuation">,</span> <span class="token number">672086925542542340573658739233885056856091941371617257703258915736298300514171772636717108421375759472775458681276207475314687398083503106638117450737504893446605614216462813245601521825257222263727854788570044544981360850404970798986701963648802587870534152356529103294070868611321598972813206914606402653822445499954546528904242307905640120763114515468142099265611607887434612059052136900124495714592832523096078291984447819361584916677431878078166876060621264099494393637800047438781631353465174659844223331831729620531227301878054036564312918320946913594427253369637429340625001431712787325849640427716021850287819329842030461887139273564044212158986457725931102311159223582956676354648689347560064482793345002710056633043449671992874058955133835052485898106259930732407094339688659178264393215356629538972278971996772194186706655152384274844763263037100159537155046907187267094350979373364485631280863316542813593637073721800360632785281837538907801122409752631040556982597895243396500510624242181556717122746237272452063078477963523780388052869203131444811420155833305683886280761177152245962801086818868886001963847219304047857088892198781366886214250037109057272433786423187397743994951389815335116762978030925823681501191227</span><span class="token punctuation">]</span>加密后数据长度<span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">,</span> <span class="token number">4095</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">]</span>开始解密解密耗时ms： <span class="token number">0.011508464813232422</span>解密数据<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3.1415926</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4.6e-12</span><span class="token punctuation">]</span>测试同态：a<span class="token punctuation">:</span> <span class="token number">524291991382170452217704475980691776837614405188522037968068175026564759427912320918307453096000382119350489461565751654667188742927175709616936014994449725543996253181424504133113093704476842502121509404600704704401020343657955051139488993394696510864569944395376107274831208305297772744375254428029352127714153970661925734298887549106462250028475185047600901566232815901730690679594599732103375886312485088441992712816214151517489650303414853949493050648291376095351556437141922062712607363860043601898555564600998987018381122670560202868977113629267250394289271307071768894375207856525112730764648552403804056635121599918143847892529515739827570196829130981763379171478096053156763491864533735562542904363358041636200671073380326111231382706038175694844342345290261787254748389348410687268685858444786488671767893206001963801449392389648930342085919849556045695572133259745582479963206406380994047951250058959853589560058962477910483298184902450736920563613951952547910853893303937322618704979371386401229968669808155025000319713893612636379277847559556088628875403182870219822406238306335177716502535762098493866878014836214249807055797477782352753227476858275742534314681553372057747251377368724755085915645471865275377623886459</span>a_sum： <span class="token number">686026057510668402198729529701398130487725892325120350107258858703000628394068430612657769324986603416644938335795820890307072662538266909997202117683220641308735213572050226337867774207817310841556158455807011552545974475386077162321520504724985369834186250304162793975927697000460540565103483088892238091762855439515505577886055744549810066342100910160301621261743077071035960506400137065394303693062344245187629710575801042400997114831938224754537404763598045450890532495004626519071924476370914642667645233099517147731478705357321337254748195824380948906621449475488611041801519373990853362602579063897475163781066858928422310347362831335991511030855049159740387484201203191787747864002004317761675058306130255425119984559419920327532428512052855668048944102692892310846264610279368032384556664873925439573974950559921319109021823269867563353600374953023362427101749847552150775441209919198440622421840061099060091101769517927134498353834366155997666506978793180259855560104635354714421261649146728922935957994992724614422522665735071363435479251523465815214714900577264972228123517783100734952986902759935486966144430287055751370182598754010346717994255584673126513810338682404314543438589329778114069891709941774479624148579380</span>a<span class="token operator">+</span><span class="token number">5</span><span class="token operator">=</span> <span class="token number">8.1415926</span>a<span class="token operator">-</span><span class="token number">3</span> <span class="token number">0.14159260000000007</span>b<span class="token operator">*</span><span class="token number">1</span><span class="token operator">=</span> <span class="token number">100</span>c<span class="token operator">/</span><span class="token operator">-</span><span class="token number">10.0</span><span class="token operator">=</span> <span class="token number">4.6e-13</span>密文加密文明文相加<span class="token number">103.1415926</span>密文相加再解密<span class="token number">103.1415926</span><span class="token class-name">Process</span> finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="同态加密扩展"><a href="#同态加密扩展" class="headerlink" title="同态加密扩展"></a>同态加密扩展</h2><p>同态加密是密码学领域自1978年以来的经典难题，也是实现数据隐私计算的关键技术，在云计算、区块链、隐私计算等领域均存在着广泛的应用需求和一些可行的应用方案。</p><p>这里介绍一下我感兴趣的联邦学习（夹带私货）</p><h3 id="联邦学习"><a href="#联邦学习" class="headerlink" title="联邦学习"></a>联邦学习</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>联邦学习（Federated Learning）是一种新兴的人工智能基础技术，在 2016 年由谷歌最先提出，原本用于解决安卓手机终端用户在本地更新模型的问题，其设计目标是在保障大数据交换时的信息安全、保护终端数据和个人数据隐私、保证合法合规的前提下，在多参与方或多计算结点之间开展高效率的机器学习。其中，联邦学习可使用的机器学习算法不局限于神经网络，还包括随机森林等重要算法。联邦学习有望成为下一代人工智能协同算法和协作网络的基础。</p><h4 id="联邦学习的系统构架"><a href="#联邦学习的系统构架" class="headerlink" title="联邦学习的系统构架"></a>联邦学习的系统构架</h4><p> 以包含两个数据拥有方（即企业 A 和 B）的场景为例介绍联邦学习的系统构架。该构架可扩展至包含多个数据拥有方的场景。假设企业 A 和 B 想联合训练一个机器学习模型，它们的业务系统分别拥有各自用户的相关数据。此外，企业 B 还拥有模型需要预测的标签数据。出于数据隐私保护和安全考虑，A 和 B 无法直接进行数据交换，可使用联邦学习系统建立模型。联邦学习系统构架由三部分构成，如图所示。</p><p>第一部分：加密样本对齐。由于两家企业的用户群体并非完全重合，系统利用基于加密的用户样本对齐技术，在 A 和 B 不公开各自数据的前提下确认双方的共有用户，并且不暴露不互相重叠的用户，以便联合这些用户的特征进行建模。</p><p>第二部分：加密模型训练。在确定共有用户群体后，就可以利用这些数据训练机器学习模型。为了保证训练过程中数据的保密性，需要借助第三方协作者 C 进行加密训练。以线性回归模型为例，训练过程可分为以下 4 步（如图  所示）： </p><p>第①步：协作者 C 把公钥分发给 A 和 B，用以对训练过程中需要交换的数据进行加密。</p><p>第②步：A 和 B 之间以加密形式交互用于计算梯度的中间结果。</p><p>第③步：A 和 B 分别基于加密的梯度值进行计算，同时 B 根据其标签数据计算损失，并把结果汇总给 C。C 通过汇总结果计算总梯度值并将其解密。</p><p>第④步：C 将解密后的梯度分别回传给 A 和 B，A 和 B 根据梯度更新各自模型的参数。</p><p>迭代上述步骤直至损失函数收敛，这样就完成了整个训练过程。在样本对齐及模型训练过程中，A 和 B 各自的数据均保留在本地，且训练中的数据交互也不会导致数据隐私泄露。因此，双方在联邦学习的帮助下得以实现合作训练模型。</p><p>第三部分：效果激励。联邦学习的一大特点就是它解决了为什么不同机构要加入联邦共同建模的问题，即建立模型以后模型的效果会在实际应用中表现出来，并记录在永久数据记录机制（如区块链）上。提供数据多的机构所获得的模型效果会更好，模型效果取决于数据提供方对自己和他人的贡献。这些模型的效果在联邦机制上会分发给各个机构反馈，并继续激励更多机构加入这一数据联邦。以上三部分的实施，既考虑了在多个机构间共同建模的隐私保护和效果，又考虑了以一个共识机制奖励贡献数据多的机构。所以，联邦学习是一个「闭环」的学习机制。</p><h4 id="联邦学习优势"><a href="#联邦学习优势" class="headerlink" title="联邦学习优势"></a>联邦学习优势</h4><ol><li>数据隔离，数据不会泄露到外部，满足用户隐私保护和数据安全的需求；</li><li>能够保证模型质量无损，不会出现负迁移，保证联邦模型比割裂的独立模型效果好；</li><li>参与者地位对等，能够实现公平合作；</li><li>能够保证参与各方在保持独立性的情况下，进行信息与模型参数的加密交换，并同时获得成长。</li></ol><p>参考网站</p><p><a href="https://cn.fedai.org/">FedAI 中文站</a></p><p><a href="https://cn.fedai.org/">https://cn.fedai.org/</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><h3 id="论文："><a href="#论文：" class="headerlink" title="论文："></a>论文：</h3><p>[1]廖祥宇. 基于paillier算法的谓词加密密文索引方案[D].湖北民族大学,2021.DOI:10.27764/d.cnki.ghbmz.2021.000096.</p><p>[2]张乐峰. 基于同态加密的空间众包隐私保护研究[D].中南财经政法大学,2019.</p><p>[3]崔建京,龙军,闵尔学,于洋,殷建平.同态加密在加密机器学习中的应用研究综述[J].计算机科学,2018,45(04):46-52.</p><h3 id="博客："><a href="#博客：" class="headerlink" title="博客："></a>博客：</h3><p><a href="https://blog.csdn.net/qq_34793644/article/details/118760670?utm_medium=distribute.wap_relevant.none-task-blog-2~default~baidujs_title~default-0.wap_blog_relevant_default&amp;spm=1001.2101.3001.4242.1">https://blog.csdn.net/qq_34793644/article/details/118760670?utm_medium=distribute.wap_relevant.none-task-blog-2~default~baidujs_title~default-0.wap_blog_relevant_default&amp;spm=1001.2101.3001.4242.1</a></p><p><a href="https://blog.csdn.net/qq_40589204/article/details/116310125?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link">https://blog.csdn.net/qq_40589204/article/details/116310125?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link</a></p><p><a href="https://blog.csdn.net/qq_33885461/article/details/86555560?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link">https://blog.csdn.net/qq_33885461/article/details/86555560?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link</a></p><h3 id="知乎："><a href="#知乎：" class="headerlink" title="知乎："></a>知乎：</h3><p><a href="https://www.zhihu.com/question/27645858">https://www.zhihu.com/question/27645858</a></p><p><a href="https://zhuanlan.zhihu.com/p/77478956">https://zhuanlan.zhihu.com/p/77478956</a></p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><p><a href="https://github.com/FederatedAI/DOC-CHN/blob/master/%E6%9C%89%E5%A5%96%E5%BE%81%E9%9B%86%E6%B4%BB%E5%8A%A8/%E6%95%99%E7%A8%8B%E7%B1%BB/Paillier%20Cryptosystem%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5.pdf">https://github.com/FederatedAI/DOC-CHN/blob/master/%E6%9C%89%E5%A5%96%E5%BE%81%E9%9B%86%E6%B4%BB%E5%8A%A8/%E6%95%99%E7%A8%8B%E7%B1%BB/Paillier%20Cryptosystem%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5.pdf</a></p><p><a href="https://github.com/wdxtub/federated-learning-note">https://github.com/wdxtub/federated-learning-note</a></p><p><a href="https://python-paillier.readthedocs.io/en/stable/phe.html">https://python-paillier.readthedocs.io/en/stable/phe.html</a></p><p><a href="https://python-paillier.readthedocs.io/en/develop/index.html">https://python-paillier.readthedocs.io/en/develop/index.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 同态加密 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 密码学 </tag>
            
            <tag> 同态加密 </tag>
            
            <tag> 联邦学习 </tag>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法理论复习</title>
      <link href="/2021/11/18/suan-fa-li-lun-fu-xi/"/>
      <url>/2021/11/18/suan-fa-li-lun-fu-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="算法理论复习"><a href="#算法理论复习" class="headerlink" title="算法理论复习"></a>算法理论复习</h1><blockquote><p>本文参考：胡神笔记：<a href="https://junyaohu.github.io/2021/10/26/%E3%80%8A%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E3%80%8B%E7%AC%94%E8%AE%B0/">https://junyaohu.github.io/2021/10/26/%E3%80%8A%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E3%80%8B%E7%AC%94%E8%AE%B0/</a></p></blockquote><h2 id="1-算法概叙"><a href="#1-算法概叙" class="headerlink" title="1.算法概叙"></a>1.算法概叙</h2><blockquote><p>算法复杂性和算法复杂性的计算O记，以及倍率计算</p></blockquote><h3 id="1-1-算法概念"><a href="#1-1-算法概念" class="headerlink" title="1.1 算法概念"></a>1.1 算法概念</h3><h4 id="1-1-1-概念"><a href="#1-1-1-概念" class="headerlink" title="1.1.1 概念"></a>1.1.1 概念</h4><p>一系列将问题的输入转换为输出的计算或操作步骤。</p><h4 id="1-1-2-性质"><a href="#1-1-2-性质" class="headerlink" title="1.1.2 性质"></a>1.1.2 性质</h4><ul><li>输入          有外部提供的量作为算法的输入。</li><li>输出          算法产生至少一个量作为输出。</li><li>确定性        组成算法的每条指令是清晰、无歧义的。</li><li>有限性        算法中每条指令的执行次数是有限的，执行每条指令的时间也是有限的。</li></ul><h3 id="1-2-算法复杂性"><a href="#1-2-算法复杂性" class="headerlink" title="1.2 算法复杂性"></a>1.2 算法复杂性</h3><p><strong>算法的复杂性(C):</strong></p><p>算法执行所需的时间和空间的数量。</p><script type="math/tex; mode=display">T=T(N, I)=\sum_{i=1}^{k} t_{i} e_{i}(N, I)</script><p><strong>平均情况</strong></p><script type="math/tex; mode=display">T_{\text {avg }}(N)=\sum_{I \in D_{N}} P(I) T(N, I)=\sum_{I \in D_{N}} P(I) \sum_{i=1}^{k} t_{i} e_{i}(N, I)</script><p><strong>渐进性态</strong></p><script type="math/tex; mode=display">\frac{T(N)-\overset{\thicksim}{T}(N)}{T(N)} \rightarrow 0</script><p><strong>大O表示法(算法运行时间的上限 )</strong></p><p>就是逼近的一个上界，可以那泰勒的上界来理解。</p><p><img src="https://gitee.com/lowlyLi/picgo/raw/master/img/202111182050100.png" alt="image-20211115191500303"></p><p><strong>大W表示法(算法运行时间的下限）</strong></p><p>下界</p><p><img src="https://gitee.com/lowlyLi/picgo/raw/master/img/202111182050194.png" alt="image-20211115191635671"></p><p>算法复杂度排序：</p><p><img src="https://gitee.com/lowlyLi/picgo/raw/master/img/202111182050247.png" alt="时间复杂度，不同数据规模的差异"></p><h3 id="1-3-NP问题判断"><a href="#1-3-NP问题判断" class="headerlink" title="1.3 NP问题判断"></a>1.3 NP问题判断</h3><p>这部分不考，但既然学算法，应该了解一下这些NP难题</p><p>NP(Nondeterministic Polynomially，非确定性多项式)类问题是指一个复杂问题不能确定是否在多项式时间内找到答案，但是可以在多项式时间内验证答案是否正确。</p><p>P问题是一个判定问题类，这些问题可以用一个确定性算法在多项式时间内判定或解出。</p><p>NP问题是指可以在多项式时间内被非确定机解决的问题。通常它们的时间复杂度都是指数变量。</p><h2 id="2-递归与分治"><a href="#2-递归与分治" class="headerlink" title="2.递归与分治"></a>2.递归与分治</h2><h3 id="2-1-递归"><a href="#2-1-递归" class="headerlink" title="2.1 递归"></a>2.1 递归</h3><p><strong>递归定义</strong> 用函数自身定义的函数</p><p><strong>递归函数两个要素</strong> 边界条件与递归方程</p><p><strong>递归算法转化为非递归算法</strong></p><ol><li>直接转化法：直接用循环结构的算法替代递归算法，不需要使用栈</li><li>用栈模拟系统的运行过程，通过分析只保存必须保存的信息，从而用非递归算法替代递归算法，需要使用栈</li></ol><h4 id="整数划分"><a href="#整数划分" class="headerlink" title="整数划分"></a>整数划分</h4><p>对于数据n，最大加数不大于m的划分个数记作$q(n,m)$</p><script type="math/tex; mode=display">q(n,m) = \left\{\begin{matrix}1  & n = 1,m = 1\\ q(n,n) &n<m \\ 1+q(n,n-1) &n = m \\ q(n,m-1)+q(n-m,m) &n>m>1\end{matrix}\right.</script><h3 id="2-2-分治"><a href="#2-2-分治" class="headerlink" title="2.2 分治"></a>2.2 分治</h3><p>  <strong>分治法的设计思想是</strong>：将一个难以直接解决的大问题，分割成一些规模较小的相同问题，以便各个击破，分而治之。</p><p>  <strong>分治策略是</strong>：对于一个规模为n的问题，若该问题可以容易地解决（比如说规模n较小）则直接解决，否则将其分解为k个规模较小的子问题，这些子问题互相独立且与原问题形式相同，递归地解这些子问题，然后将各子问题的解合并得到原问题的解。这种算法设计策略叫做分治法。</p><p><strong>分治法所能解决的问题一般具有以下几个特征：</strong></p><p>1) 该问题的规模缩小到一定的程度就可以容易地解决</p><p>2) 该问题可以分解为若干个规模较小的相同问题，即该问题具有最优子结构性质。</p><p>3) 利用该问题分解出的子问题的解可以合并为该问题的解；</p><p>4) 该问题所分解出的各个子问题是相互独立的，即子问题之间不包含公共的子子问题。</p><p>算法模板</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Divide<span class="token operator">-</span>and<span class="token operator">-</span><span class="token function">Conquer</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token operator">|</span>P<span class="token operator">|</span>≤n0then <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token function">ADHOC</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">)</span>将P分解为较小的子问题 P1 <span class="token punctuation">,</span>P2 <span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>Pk<span class="token keyword">for</span> i←<span class="token number">1</span> to k<span class="token keyword">do</span> yi ← Divide<span class="token operator">-</span>and<span class="token operator">-</span><span class="token function">Conquer</span><span class="token punctuation">(</span>Pi<span class="token punctuation">)</span> <span class="token comment">//递归解决Pi</span>T ← <span class="token function">MERGE</span><span class="token punctuation">(</span>y1<span class="token punctuation">,</span>y2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>yk<span class="token punctuation">)</span> <span class="token comment">//合并子问题</span><span class="token keyword">return</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-二分搜索"><a href="#2-3-二分搜索" class="headerlink" title="2.3 二分搜索"></a>2.3 二分搜索</h3><p><strong>问题描述</strong> 给定已按升序排好序的n个元素a[1:n]，现要在这n个元素中找出一特定元素x</p><p>参考：<a href="https://www.programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html#%E6%80%9D%E8%B7%AF">https://www.programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html#%E6%80%9D%E8%B7%AF</a></p><p>俩种思路。</p><h3 id="2-4-合并排序和快速排序"><a href="#2-4-合并排序和快速排序" class="headerlink" title="2.4 合并排序和快速排序"></a>2.4 合并排序和快速排序</h3><p><strong>问题描述</strong> 数组排序</p><h4 id="合并排序"><a href="#合并排序" class="headerlink" title="合并排序"></a>合并排序</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">Merge<span class="token operator">-</span><span class="token function">sort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> p<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>q <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>Merge<span class="token operator">-</span><span class="token function">sort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span>Merge<span class="token operator">-</span><span class="token function">sort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> q<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token function">Merge</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>复杂度</p><script type="math/tex; mode=display">\begin{array}  {X}  T(n) = O(nlogn) =\left\{\begin{matrix}O(1)  & n=1\\2T(\frac{n}{2} ) + O(n) & n>1 \\\end{matrix}\right.\end{array}</script><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">Partition</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>p<span class="token punctuation">,</span>r<span class="token punctuation">)</span> <span class="token comment">//p、r为数组下标</span>x <span class="token operator">=</span> A<span class="token punctuation">[</span>r<span class="token punctuation">]</span>   <span class="token comment">//将最后一个元素作为主元素</span>i <span class="token operator">=</span> p<span class="token operator">-</span><span class="token number">1</span> <span class="token comment">// i指向的是比主元素小的位置，</span><span class="token keyword">for</span>  j <span class="token operator">=</span> p  to  r<span class="token operator">-</span><span class="token number">1</span>     <span class="token comment">//从第一个元素开始到倒数第二个元素结束，比较确定主元素的位置</span><span class="token keyword">do</span>  <span class="token keyword">if</span>  A<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> xthen  i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>       <span class="token comment">//如果比主元素小，则把i=i+1的位置上的元素和j位置发现小元素互换</span>exchange A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token operator">-&gt;</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span>exchange A<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">-&gt;</span>A<span class="token punctuation">[</span>r<span class="token punctuation">]</span>   <span class="token comment">//最终确定主元的位置</span><span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span>   <span class="token comment">//返回主元的位置</span>End<span class="token function">QuickSort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>p<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token keyword">if</span> p<span class="token operator">&lt;</span>rq <span class="token operator">=</span> <span class="token function">Partition</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>p<span class="token punctuation">,</span>r<span class="token punctuation">)</span>    <span class="token comment">//确定划分位置</span><span class="token function">QuickSort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token comment">//子数组A[p...q-1]</span><span class="token function">QuickSort</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>q<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span>     <span class="token comment">//子数组A[q+1...r]</span>End<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤</strong></p><ol><li><p>分解：以a[p]为基准元素将a[p:r]划分成3段a[p:q-1],a[q]和a[q+1:r]，使a[p:q-1]中任意一个元素小于等于a[q]，而a[q+1:r]中任何一个元素大于等于a[q]，下标q在划分过程中确定</p></li><li><p>递归求解：通过递归调用快速排序算法分别对a[p:q-1]和a[q+1:r]进行排序</p></li><li><p>合并</p></li></ol><p>最坏情况，已经排好，$O(n^2)$<br>        最好情况，每次划分大小都是$\frac{n}{2}$，$O(nlogn)$</p><h3 id="2-5-大整数乘法"><a href="#2-5-大整数乘法" class="headerlink" title="2.5 大整数乘法"></a>2.5 大整数乘法</h3><p><strong>问题描述</strong> XY是n位二进制整数，计算他们的乘积XY</p><script type="math/tex; mode=display">\begin{array}  {X}X=A2^{\frac{n}{2}}+B, Y=C2^{\frac{n}{2}}+D \\   XY = AC2^n+(AD+BC)2^{\frac{n}{2} }+BD  \\  =AC2^n+((A-B)(D-C)+AC+BD)2^{\frac{n}{2}}+BD \\\end{array}</script><p>复杂度</p><script type="math/tex; mode=display">T(n) = O(n^{log3}) =\left\{\begin{matrix}O(1)  & n=1\\3T(\frac{n}{2} ) + O(n) & n>1 \\\end{matrix}\right.</script><h3 id="2-6-线性时间选择"><a href="#2-6-线性时间选择" class="headerlink" title="2.6 线性时间选择"></a>2.6 线性时间选择</h3><p>无序排列中求n个元素中第k小的元素（主要求中位数）。(类似快排)</p><p><strong>解释</strong></p><p>根据随机产生的基准点，将元素分为2组，基准点包含在第1组中；如果k&lt;=j，则第k小元素落在a段，为a段的第k小元素；如果k&gt;j，则a段的所有元素都比第k小元素还要小，第k小元素落在b段，为b段中的第k-j小元素（-j的含义是去掉a段的元素总个数）</p><p>最坏情况，分成两个1和n-1的子问题，$O(n^2)$</p><p>最好情况，每次都产生$\frac{n}{2}$大小的子问题，$O(n)$</p><p>例题看书比较好。</p><h2 id="3-动态规划"><a href="#3-动态规划" class="headerlink" title="3.动态规划"></a>3.动态规划</h2><h3 id="3-1-动态规划原理"><a href="#3-1-动态规划原理" class="headerlink" title="3.1 动态规划原理"></a>3.1 动态规划原理</h3><p>动态规划，英文：Dynamic Programming，简称DP，如果某一问题有很多重叠子问题，使用动态规划是最有效的。</p><p>这里俩性质：<strong>最优子结构性质</strong>和<strong>子问题重叠性质</strong></p><ol><li>最优子结构性质（分析问题是否满足最优性原理（用反证法）：①先假设由问题的最优解导出的子问题的解不是最优的；②再证明在这个假设下可构造出比原问题最优解更好的解，从而导致矛盾）</li><li>子问题重叠性质（子问题不相互独立，重复出现，只在第一次遇到时加以求解，并把答案保存起来，以后再遇到时不必重新求解）</li></ol><p>所以动态规划中每一个状态一定是由上一个状态推导出来的，<strong>这一点就区分于贪心</strong>，贪心没有状态推导，而是从局部直接选最优的。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">编程方法：动态规划的解题步骤对于动态规划问题，我将拆解为如下五步曲，这五步都搞清楚了，才能说把动态规划真的掌握了！1、确定dp数组（dp table）以及下标的含义2、确定递推公式3、dp数组如何初始化4、确定遍历顺序5、举例推导dp数组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>动态规划算法设计步骤</strong></p><ul><li><strong>分析最优解的性质，并刻划其结构特征；</strong> </li><li><strong>递归地定义最优值</strong></li><li><strong>以自底向上的方式计算出最优值；</strong></li><li><strong>根据计算最优值时得到的信息，构造最优解。</strong></li></ul><h3 id="3-2-矩阵连乘"><a href="#3-2-矩阵连乘" class="headerlink" title="3.2 矩阵连乘"></a>3.2 矩阵连乘</h3><p><strong>问题描述</strong> 每计算出一个元素，需要q次乘法，最终得到的矩阵是p×r矩阵，有p×r个元素，因此，计算C需要的乘法次数为q×p×r。每次要选择较小的q×p×r。给定n个矩阵｛A1,A2,…,An｝，其中Ai与Ai+1是可乘的，且i=1,2⋯,n-1,如何确定计算矩阵连乘积的计算次序，使得计算矩阵连乘的数乘次数最少。</p><script type="math/tex; mode=display">m[i][j]=\left\{\begin{array}{cc}0 & i=j \\\min_{i\leq{k}<j} \{m[i][k]+m[k+1][j]+p_{i-1}p_kp_j\} & i<j\end{array}\right.</script><p><strong>解释</strong> 矩阵连乘积从$A_i$到$A_j$定义为<code>A[i:j]</code>，<code>A[i:j]</code>最少的乘法次数定义为<code>m[i,j]</code>，最优断开位置k记为<code>𝑠[i,j]=k</code>，</p><p>$T(n)=O(n^3)$</p><blockquote><p><strong>例题</strong></p><p>计算矩阵连乘积A[1:6]的最少数乘次数，其中各矩阵的维数分别为p=[30,35,15,5,10,20,25]</p></blockquote><h3 id="3-3-最长公共子序列"><a href="#3-3-最长公共子序列" class="headerlink" title="3.3 最长公共子序列"></a>3.3 最长公共子序列</h3><p><strong>问题描述：</strong>给定两个序列$X=\{x_1,x_2,\cdots,x_m\}$和$Y=\{y_1,y_2,\cdots,y_n\}$，要求找出$X$和$Y$的一个最长公共子序列。</p><script type="math/tex; mode=display">c[i][j]=\left\{\begin{array}{cc}0 & i=0, j=0 \\c[i-1][j-1]+1 & i, j>0 ; x_{i}=y_{j} \\\max \{c[i-1][j], c[i][j-1]\} & i, j>0 ; x_{i} \neq y_{j}\end{array}\right.</script><script type="math/tex; mode=display">b[i][j]=\left\{\begin{array}{cc} 1 & c[i][j] = c[i-1][j-1] \\2 & c[i][j] = c[i-1][j] \\3 & c[i][j] = c[i][j-1]\end{array}\right.</script><p><strong>解释</strong> <code>c[i,j]</code>记录序列$X_i$和$Y_j$的最长公共子序列长度，<code>b[i,j]</code>可以记录是哪种类型。在c表中从最右下角的那个元素开始，看b表中对应位置的值，如果为1，则在c表中从当前位置往左上角走；如果为2，则在c表中从当前位置往正上方走；如果为3，则在c表中从当前位置沿水平方向往后退一位；依次类推，直到c表中箭头退到<code>c[0，0]</code>为止。</p><p><strong>补充</strong> 两个序列的最长公共子序列不唯一，不影响最长公共子序列的长度；但是可能会产生不一样的公共子序列.</p><blockquote><p><strong>例题</strong></p><p>给定两个序列为X=ABCBDAB和Y=BDCABA，求最长公共子序列。</p></blockquote><h3 id="3-4-图像压缩"><a href="#3-4-图像压缩" class="headerlink" title="3.4 图像压缩"></a>3.4 图像压缩</h3><p><strong>问题描述</strong> 数字化图像是n×n的像素阵列。假定每个像素有一个0~255的灰度值，存储一个像素需8位。为了减少存储空间，采用变长模式，即不同像素用不同位数来存储。</p><ol><li>线性化：图片拉直，转换为$1×n^2$向量</li><li>分段：分成连续的m段，每段像素存储位数相同，每段最多含256个像素点</li><li>存放信息：第$i$段长度（8bit），第$i$段中像素存储位数（3bit）</li></ol><script type="math/tex; mode=display">\begin{matrix}s[i]=\min\limits_{1 \leq k \leq \min \{i,256\}}\{s[i-k]+k*bmax(i-k+1,i)  \}+11\\bmax(i,j)=\max\limits_{i\leq k \leq j}\{a[k]\}\end{matrix}</script><p><strong>解释</strong></p><p>假设<code>s[i]</code>是序列$\{p_1,p_2,…,p_i\}$的最优解，<code>a[i]</code>是第$i$个像素点的位数。</p><ol><li>假设$p_i$自成一段，则<code>s[i]=s[i-1]+保存pi的代价</code></li><li>取<code>s[i]</code>为min时对应的元素个数为k，<code>s[i]=s[i-k]+保存最后k个像素的代价</code></li><li>保存最后k个像素的代价=<code>k*max{k个灰度值二进制位数}+11</code></li></ol><blockquote><p><strong>例题</strong></p><p>求像素序列4，6，5，7，129，138，1的最优分段。</p></blockquote><h3 id="3-5-电路布线"><a href="#3-5-电路布线" class="headerlink" title="3.5 电路布线"></a>3.5 电路布线</h3><p><strong>问题描述</strong> 确定将哪些连线安排在第一层上，使得该层上有尽可能多的连线且不相交</p><script type="math/tex; mode=display">\begin{matrix}\scriptsize 当i=1时, \qquad Size(i,j) = \left\{\begin{matrix}0 && j<\pi(1)\\1 && j \geq \pi (1)\end{matrix}\right. \\\scriptsize当i>1时,\qquadSize(i,j) = \left\{\begin{matrix}Size(i-1,j) && j<\pi(i)\\\max \{ Size(i-1,j),Size(i-1,\pi(i)-1)+1\} && j \geq \pi (i)\end{matrix}\right.\end{matrix}</script><p><strong>解释</strong> <code>MNS(i,j)</code>表示上面序号小于$i$，连接到下面的序号都小于$j$的不相交的集合，最后要求<code>MNS(n,n)</code>。如果$j=\pi(i)$，如果$(i,\pi(i))$不在MNS中，将i点删除没有影响，就是<code>size(i,j)=size(i-1,j)</code>，如果$(i,\pi(i))$在MNS中，就是<code>size(i,j)=size(i-1,pi(i)-1)+1</code></p><blockquote><p><strong>例题</strong></p><p>已知[(1 8)(2 7)(3 4)(4 2)(5 5)(6 1)(7 9)(8 3)(9 10)(10 6)]，求最大不相交情况</p></blockquote><h3 id="3-6-流水线调度"><a href="#3-6-流水线调度" class="headerlink" title="3.6 流水线调度"></a>3.6 流水线调度</h3><p><strong>问题描述</strong> n个作业要在两台机器M1和M2上进行加工。每个作业加工的顺序都是先在M1上加工，然后在M2加工。M1和M2加工作业$i$所需的时间分别为$a_i$ 和$b_i$。确定n个作业的最优加工顺序，使得加工完成所需的时间最少。</p><p><strong>算法</strong></p><ol><li>分为$N_1,N_2$集合存放 <script type="math/tex">N_1 = \{a_i\leq b_i\} ,N_2 = \{a_i > b_i\}</script></li><li>$N_1$中作业按照$a_i$升序排序，$N_2$中作业按照$b_i$降序排序</li><li>$N_1$连接$N_2$，计算时间</li></ol><blockquote><p><strong>例题</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">任务</th><th style="text-align:center">J1</th><th style="text-align:center">J2</th><th style="text-align:center">J3</th><th style="text-align:center">J4</th><th style="text-align:center">J5</th><th style="text-align:center">J6</th></tr></thead><tbody><tr><td style="text-align:center">工序1</td><td style="text-align:center">30</td><td style="text-align:center">120</td><td style="text-align:center">50</td><td style="text-align:center">20</td><td style="text-align:center">90</td><td style="text-align:center">110</td></tr><tr><td style="text-align:center">工序2</td><td style="text-align:center">80</td><td style="text-align:center">100</td><td style="text-align:center">90</td><td style="text-align:center">60</td><td style="text-align:center">30</td><td style="text-align:center">10</td></tr></tbody></table></div></blockquote><h3 id="3-7-0-1背包与完全背包"><a href="#3-7-0-1背包与完全背包" class="headerlink" title="3.7 0-1背包与完全背包"></a>3.7 0-1背包与完全背包</h3><script type="math/tex; mode=display">\begin{matrix}m(i,j) = \left\{\begin{matrix}m(i-1,j) && 0 \leq j<w_i\\ \max \{ m(i-1,j),m(i-1,j-w_i)+v_i\} && j \geq w_i\end{matrix}\right.\\\\m(0,j) = \left\{\begin{matrix}0 && 0 \leq j<w_0\\ v_0 && j \geq w_0\end{matrix}\right.\end{matrix}</script><p><strong>解释</strong> <code>m[i][j]</code>表示可选择物品$i, i+1, …, n$时，背包容量为$j$装入的最大价值</p><blockquote><p><strong>例题</strong></p><p>n=5,c=10,W={2,2,6,5,4},V={6,3,5,4,6}</p></blockquote><h2 id="4-贪心算法"><a href="#4-贪心算法" class="headerlink" title="4.贪心算法"></a>4.贪心算法</h2><blockquote><p>听老师说是活题，那么建议参考：<a href="https://www.programmercarl.com/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html">https://www.programmercarl.com/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html</a></p><p>刷点力扣涨涨见识</p></blockquote><h3 id="4-1贪心原理"><a href="#4-1贪心原理" class="headerlink" title="4.1贪心原理"></a>4.1贪心原理</h3><p><strong>思想</strong> 在贪婪算法中采用逐步构造最优解的方法。在每个阶段，都作出一个看上去最优的决策。它并不一定对所有问题都成功，因为不从整体最优加以考虑，贪心解法可能不是全局最优解，但是对某些问题特别简单、有效。</p><p><strong>基本要素</strong></p><ol><li><strong>最优子结构性质</strong> 问题的最优解包含其子问题的最优解</li><li><strong>贪心选择性质</strong> 问题的整体最优解可以通过一系列局部最优的选择，即贪心选择来达到，当前的选择和子问题的解无关，只和以往做出的选择有关</li></ol><p><strong>贪心算法一般分为如下四步：</strong></p><ul><li>将问题分解为若干个子问题</li><li>找出适合的贪心策略</li><li>求解每一个子问题的最优解</li><li>将局部最优解堆叠成全局最优解</li></ul><h3 id="4-2-活动安排"><a href="#4-2-活动安排" class="headerlink" title="4.2 活动安排"></a>4.2 活动安排</h3><p>思考如下具有11个活动安排的问题？</p><p>在活动集合中选择最大的相容活动子集合</p><div class="table-container"><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>任务</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td><td>10</td><td>11</td></tr><tr><td>start</td><td>0</td><td>4</td><td>4</td><td>5</td><td>3</td><td>1</td><td>8</td><td>6</td><td>8</td><td>12</td><td>2</td></tr><tr><td>end</td><td>3</td><td>6</td><td>5</td><td>6</td><td>8</td><td>4</td><td>11</td><td>10</td><td>12</td><td>14</td><td>13</td></tr></tbody></table></div><pre class="line-numbers language-react" data-language="react"><code class="language-react">start开始时间，end结束时间，按任务按结束时间非减续排列优先选取结束时间早的，判断是否相容直到任务最后一个结束。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-哈夫曼编码"><a href="#4-3-哈夫曼编码" class="headerlink" title="4.3 哈夫曼编码"></a>4.3 哈夫曼编码</h3><p><strong>前缀码</strong> 对每一个字符规定一个0,1串作为其代码，并要求任一字符的代码都不是其它字符代码的前缀，这种编码称为前缀码。</p><p><strong>问题描述</strong> 找到使平均码长达到最小的前缀码编码方案</p><p><strong>策略</strong> 频率小的字符，深度大。队列Q以f(c)为键值存放二叉树各结点，通过贪心选择，将最小频率的两个二叉树合并，然后将新树（频率为上述两个二叉树频率之和）插入Q中。$ T(n)=O(nlogn)$</p><p><strong>证明贪心选择性质</strong></p><p>设x和y是字符集C中具有最小频率的两个字符，证明存在C的最优前缀码，使x和y具有最长、相同的码长且仅最后一位编码不同。设二叉树T表示C的任意一个最优前缀码方案。只要证明可以对T做适当修改后，得到一棵新的二叉树T’， 新树中，x和y是最深叶子且为兄弟。同时，新树也是C的最优前缀码方案。</p><p><strong>证明最优子结构性质</strong></p><p>设T表示C的一个最优前缀码方案。x和y是树T中的叶子节点且为兄弟。z是它们的父亲。若将z看做是具有频率$f(z)=f(x)+f(y)$的字符，则证明树$T’=T-\{x,y\}$表示字符集$C’=C-\{x,y\} \bigcup \{z\}$的一个最优前缀码即可。</p><blockquote><p>问题：</p><p>设在1000个字母的文章中各字母出现的频率为a:83, b:14, c:28, d:38, e:131, f:29, g:20, h:53，求最优编码。</p></blockquote><h3 id="4-3-最短路径"><a href="#4-3-最短路径" class="headerlink" title="4.3 最短路径"></a>4.3 最短路径</h3><p>书上的吧，懒的写了，这个看这个就行了</p><p><img src="https://gitee.com/lowlyLi/picgo/raw/master/img/202111182050411.png" alt="image-20211118194505196"></p><h3 id="4-4-最小生成树"><a href="#4-4-最小生成树" class="headerlink" title="4.4 最小生成树"></a>4.4 最小生成树</h3><p>参考数据结构，这个太简单了</p><h3 id="4-5-0-1背包（可分割）"><a href="#4-5-0-1背包（可分割）" class="headerlink" title="4.5 0-1背包（可分割）"></a>4.5 0-1背包（可分割）</h3><p><strong>贪心策略</strong></p><ol><li>计算每种物品的单价（性价比）$\frac{v_i}{w_i}$</li><li>按物品单价从大到小排序</li><li>优先选取物品单价高的，直到背包装满。</li></ol><blockquote><p>$n=3,c=20,W=\{18,15,10\},V=\{25,24,15\}$</p></blockquote><p><strong>补充几种贪心策略</strong>（但是都不能保证得到最优解）</p><ol><li>选择可以装入背包的价值最大的物品</li><li>选择可装入背包的重量最小的物品</li><li>选择可装入背包的$\frac{v_i}{w_i}$最大的物品（一般用来做回溯法或者分支限界的限界函数）</li></ol><h3 id="3-6最优装载"><a href="#3-6最优装载" class="headerlink" title="3.6最优装载"></a>3.6最优装载</h3><p><strong>策略</strong> 重量最轻的先装$ T(n)=O(nlogn)$</p><p>策略：</p><ol><li>见货物重量按从小到大排序</li><li>优先选取重量下的物品，直到无法装下为主</li></ol><h2 id="5-回溯法"><a href="#5-回溯法" class="headerlink" title="5.回溯法"></a>5.回溯法</h2><h3 id="5-1-回溯原理"><a href="#5-1-回溯原理" class="headerlink" title="5.1 回溯原理"></a>5.1 回溯原理</h3><p>这里很矛盾，书上的回溯有一点点离谱，感觉是极端的剪枝，考试还得按课本来。</p><p><strong>算法框架</strong></p><ol><li><p>子集树算法框架<br>当所给的问题是从 个元素的集合 中找出 满足性质的子集时，相应的解空间树称为子集树</p></li><li><p>排列树算法框架<br>当所给问题是确定 个元素满足某种性质的排列时，相应的解空间树称为排列树</p></li></ol><p><strong>剪枝函数</strong></p><ol><li><p>用约束函数在扩展结点处剪去不满足约束的子树；</p></li><li><p>用限界函数剪去得不到最优解的子树</p></li></ol><p><strong>回溯法解决的问题都可以抽象为树形结构</strong>，所有回溯法的问题都可以抽象为树形结构！</p><p>因为回溯法解决的都是在集合中递归查找子集，<strong>集合的大小就构成了树的宽度，递归的深度，都构成的树的深度</strong>。</p><p>递归就要有终止条件，所以必然是一颗高度有限的树（N叉树）。</p><h4 id="回溯法的效率"><a href="#回溯法的效率" class="headerlink" title="回溯法的效率"></a>回溯法的效率</h4><p>回溯法的性能如何呢，这里要和大家说清楚了，<strong>虽然回溯法很难，很不好理解，但是回溯法并不是什么高效的算法</strong>。</p><p><strong>因为回溯的本质是穷举，穷举所有可能，然后选出我们想要的答案</strong>，如果想让回溯法高效一些，可以加一些剪枝的操作，但也改不了回溯法就是穷举的本质。</p><h4 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">backtracking</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>终止条件<span class="token punctuation">)</span> <span class="token punctuation">{</span>        存放结果<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>选择：本层集合中元素（树中节点孩子的数量就是集合的大小）<span class="token punctuation">)</span> <span class="token punctuation">{</span>        处理节点<span class="token punctuation">;</span>        <span class="token function">backtracking</span><span class="token punctuation">(</span>路径，选择列表<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归</span>        回溯，撤销处理结果    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-装载问题"><a href="#5-2-装载问题" class="headerlink" title="5.2 装载问题"></a>5.2 装载问题</h3><p><strong>问题描述</strong> n个集装箱要装到2艘载重量分别为c1,c2的货轮，其中集装箱 $i$的重量为$w_i$。要求找到装载方案将这n个货箱装上这2艘轮船</p><p><strong>解释</strong> 若装载问题有解, 采用如下策略可得一个最优装载方案：将第一艘轮船尽可能装满，将剩余的货箱装到第二艘轮船上。将第一艘船尽可能装满类似0-1背包问题</p><blockquote><p><strong>例题</strong></p><p>n=4,c1=12,W={8,6,2,3}</p></blockquote><h3 id="5-3-0-1背包"><a href="#5-3-0-1背包" class="headerlink" title="5.3 0-1背包"></a>5.3 0-1背包</h3><p><strong>解释</strong> 子集树。只要左儿子节点是一个可行结点，搜索就进入左子树（不超过背包重量）（约束剪枝）。在右子树中有可能包含最优解是才进入右子树搜索，否则将右子树剪去（利用单价贪心求解价值上限）（限界剪枝）。$cw$是背包当前重量，$M-cw$是背包剩余的空间，$cp$是当前总收益，$rp$是贪心算法剩余的物品收益，$bestw$记录当前最优价值，也就是判断$bp=cp+cp&gt;bestw$是右节点的限界函数。（此外，回溯法解0/1背包的前置条件是物品已按$\frac{p_i}{w_i}$非增次序排序）</p><blockquote><p><strong>例题</strong></p><p>M=110，w=(1,11,21,23,33,43,45,55)，v=(11,21,31,33,43,53,55,65)</p></blockquote><h2 id="6-分枝限定"><a href="#6-分枝限定" class="headerlink" title="6.分枝限定"></a>6.分枝限定</h2><p>和回溯无限接近，搞清楚优先队列的优先级就可以</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CUMT算法实验</title>
      <link href="/2021/11/17/suan-fa-shi-yan/"/>
      <url>/2021/11/17/suan-fa-shi-yan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>作者： lowly</p><p>仅供学习交流</p></blockquote><h1 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h1><h1 id="问题-A-排列问题"><a href="#问题-A-排列问题" class="headerlink" title="问题 A: 排列问题"></a>问题 A: 排列问题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>  输入一个可能含有重复字符的字符串，打印出该字符串中所有字符的全排列。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>单组测试数据，输入数据是一个长度不超过10个字符的字符串，以逗号结尾。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>打印出该字符串中所有字符的全排列。以字典序顺序输出，用空格分隔。</p><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">abc,<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">abc acb bac bca cab cba<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>回溯法，这里采用回溯进行遍历枚举。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;string path;vector&lt;string&gt; result;vector&lt;int&gt; used;void backtrack(string str){if(path.size() == str.size()){result.push_back(path);return;}for(int i=0;i&lt;str.size();i++){if(used[i]){continue;}used[i] = 1;path.push_back(str[i]);backtrack(str);path.pop_back();used[i] = 0;}}int main(){string str;cin &gt;&gt; str;str.pop_back();sort(str.begin(),str.end());used.resize(str.size(),0);backtrack(str);for(auto s : result){cout &lt;&lt; s &lt;&lt; " ";}cout &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-B-快速幂"><a href="#问题-B-快速幂" class="headerlink" title="问题 B: 快速幂"></a>问题 B: 快速幂</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="https://s2.loli.net/2021/12/09/1JwR9CvtIPZaGhK.jpg" alt="20180914130647_85638-16364329703111"></p><h2 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h2><p>多组测试样例，最多50组。每组测试样例给定一个整数x(1&lt;=x&lt;=25000)</p><h2 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h2><p>对每个样例，输出一行，代表f(x)对100000007取余的结果。</p><h2 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">345<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">332893414<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>这里是快速幂的技巧，采用化二进制判断迭代。</p><p>这里代码思路没问题，但得用long long类型</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;const long long mod = 100000007;long long mypow(long long n,long long m){long long ans = 1;while(m){if(m &amp; 1){ans = ans * n % mod;}m = m &gt;&gt; 1;n = (n * n) % mod;}return ans;}int main(){int n;while(cin &gt;&gt; n){long long ans = 0;for(int i=1;i&lt;=n;i++){ans = (ans + mypow(i,i)) % mod;}cout &lt;&lt; ans+1 &lt;&lt; endl;}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits/stdc++.h&gt;using namespace std;int main(){string str;cin &gt;&gt; str;str.pop_back();sort(str.begin(),str.end());do{cout &lt;&lt; str &lt;&lt; " ";}while(next_permutation(str.begin(),str.end()));return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-C-求第k小"><a href="#问题-C-求第k小" class="headerlink" title="问题 C: 求第k小"></a>问题 C: 求第k小</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定n(1&lt;=n&lt;=1000000)个元素，求第k小数(1&lt;=k&lt;=n)。</p><h2 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h2><p>一组样例。第一行输入两个整数n和k。第二行输入n个不同的int范围内的数。</p><h2 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h2><p>输出一行，输出第k小数。</p><h2 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">5 21 5 3 2 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p><a href="https://blog.51cto.com/svenman/1851716">https://blog.51cto.com/svenman/1851716</a></p><p>qsort排序 <a href="https://blog.csdn.net/weixin_41096569/article/details/104771864">https://blog.csdn.net/weixin_41096569/article/details/104771864</a></p><p>不知道为什么c++算法的sort会超时，用c的就可以 过</p><p>这里有一点qsort使用配合数组，</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void qsort (void* base, size_t num, size_t size,            int (*compar)(const void*,const void*));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><h3 id="方法一-使用qsort"><a href="#方法一-使用qsort" class="headerlink" title="方法一 使用qsort"></a>方法一 使用qsort</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int compare (const void * a, const void * b){  return ( *(int*)a - *(int*)b );}int nums[1000011];int main(){int n,k;cin &gt;&gt; n &gt;&gt; k;for(int i=0;i&lt;n;i++){cin &gt;&gt; nums[i];}//sort(nums.begin(),nums.end());qsort(nums,n,sizeof(int),compare);cout &lt;&lt; nums[k-1] &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二-手写sort"><a href="#方法二-手写sort" class="headerlink" title="方法二 手写sort"></a>方法二 手写sort</h3><p>这里输入cin会超时（离谱）就这一点点差距。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std; int a[1000001];   int partition(int a[],int p,int r){    int x=a[r];    int middle=p;    int j;    for(j=p;j&lt;r;j++)    {        if(a[j]&lt;x)        {            if(j!=middle)              swap(a[middle],a[j]);            middle++;        }     }    swap(a[middle],a[j]);    return middle;}   void select(int a[],int p,int r){    if(p&lt;r)    {        int q=partition(a,p,r);        select(a,p,q-1);        select(a,q+1,r);        }}   int main(){    int n,k;    cin&gt;&gt;n&gt;&gt;k;    for(int i=0;i&lt;n;i++)        scanf("%d",&amp;a[i]);    select(a,0,n-1);    cout&lt;&lt;a[k-1]&lt;&lt;endl;    return 0;   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法三-发现数组sort能过"><a href="#方法三-发现数组sort能过" class="headerlink" title="方法三 发现数组sort能过"></a>方法三 发现数组sort能过</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int a[1000000];int main(){int n,k;cin&gt;&gt;n&gt;&gt;k;for(int i=0;i&lt;n;i++){cin &gt;&gt; a[i];}sort(a,a+n);cout &lt;&lt; a[k-1] &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-D-内部收益率"><a href="#问题-D-内部收益率" class="headerlink" title="问题 D: 内部收益率"></a>问题 D: 内部收益率</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="https://s2.loli.net/2021/12/09/1y6omwJNc32jPTg.jpg" alt="20180914131556_63531"></p><h2 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h2><p><img src="https://s2.loli.net/2021/12/09/npyQKqVgtLfka7N.jpg" alt="20180914131642_82198"></p><h2 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h2><p>对于每组数据，输出仅一行，即项目的IRR，四舍五入保留小数点后两位。</p><h2 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">1-1 22-8 6 90<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">1.000.50<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><p>二分搜索，模拟逼近</p><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main(){int n;while((cin &gt;&gt; n) &amp;&amp; n){vector&lt;int&gt; cf(n+1,0);for(int i=0;i&lt;= n;i++){cin &gt;&gt; cf[i];}double min, max, ans, mid;min = -1.0;        max = 1000000;        while(max - min &gt; 1e-6){ans = cf[0];            mid = (max-min) / 2 + min;            for(int i=1;i&lt;=n;i++){ans += cf[i] / pow(1 + mid, i);}            if(ans &gt; 0)            min = mid;            else            max = mid;}printf("%.2lf\n",mid);}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-E-跳台阶"><a href="#问题-E-跳台阶" class="headerlink" title="问题 E: 跳台阶"></a>问题 E: 跳台阶</h1><blockquote><p>时间限制: 1 Sec </p><p>内存限制: 128 MB </p></blockquote><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><h2 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h2><p>多组测试样例。每组测试样例包含一个整数n。(1&lt;=n&lt;=100)</p><h2 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h2><p>每组测试样例输出一行，表示青蛙跳上n级台阶的跳法数量.</p><p>所得到的结果模1000000007</p><h2 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">34<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">35<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h2><p>可以看成初等的动态规划</p><p>dp数组存储</p><h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><h3 id="方法一-直接dp存储"><a href="#方法一-直接dp存储" class="headerlink" title="方法一 直接dp存储"></a>方法一 直接dp存储</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;const long long mod = 1000000007;int main(){int n;while(cin &gt;&gt; n){if(n &lt;= 1){cout &lt;&lt; n &lt;&lt; endl;continue;}vector&lt;long long&gt; dp(n+1,0);dp[0] = 1;dp[1] = 1;for(int i=2;i&lt;=n;i++){dp[i] = (dp[i-1] + dp[i-2]) % mod;}cout &lt;&lt; dp[n] &lt;&lt; endl;}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二-改进只需要维护3个dp就行了"><a href="#方法二-改进只需要维护3个dp就行了" class="headerlink" title="方法二 改进只需要维护3个dp就行了"></a>方法二 改进只需要维护3个dp就行了</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;const long long mod = 1000000007;int main(){int n;while(cin &gt;&gt; n){if(n &lt;= 1){cout &lt;&lt; n &lt;&lt; endl;continue;}int dp[3];dp[0] = 1;dp[1] = 1;for(int i=2;i&lt;=n;i++){dp[2] = (dp[0] + dp[1]) % mod;dp[0] = dp[1];dp[1] = dp[2];}cout &lt;&lt; dp[2] &lt;&lt; endl;}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a>实验二</h1><h1 id="问题-A-沙子的质量"><a href="#问题-A-沙子的质量" class="headerlink" title="问题 A: 沙子的质量"></a>问题 A: 沙子的质量</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h2><p>设有N堆沙子排成一排，其编号为1，2，3，…，N（N&lt; =300）。每堆沙子有一定的数量，可以用一个整数来描述，现在要将N堆沙子合并成为一堆，每次只能合并相邻的两堆，合并的代价为这两堆沙子的数量之和，合并后与这两堆沙子相邻的沙子将和新堆相邻，合并时由于选择的顺序不同，合并的总代价也不相同，如有4堆沙子分别为1 3 5 2我们可以先合并1、2堆，代价为4，得到4 5 2又合并1，2堆，代价为9，得到9 2，再合并得到11，总代价为4+9+11=24，如果第二步是先合并2，3堆，则代价为7，得到4 7，最后一次合并代价为11，总代价为4+7+11=22；问题是：找出一种合理的方法，使总的代价最小。输出最小代价。</p><h2 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h2><p>第一行一个数N表示沙子的堆数N。 第二行N个数，表示每堆沙子的质量。 a[i]&lt; =1000。</p><h2 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h2><p>合并的最小代价。</p><h2 id="样例输入-5"><a href="#样例输入-5" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">41 3 5 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-5"><a href="#样例输出-5" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h2><p>这里和矩阵连乘差不多</p><p>这里cost（）也就是合并有<code>sum[j]-sum[i]</code>给出</p><p>这里外层遍历是长度，合并的长度</p><p>然后计算出i，j也就是合并区间</p><p>k是中间循环查找min</p><p>这里记得一个是sum初始化，一个是dp <code>i==j</code>时<code>dp=0</code>初始化<code>dp[i][j] = INT_MAX</code></p><p>参考</p><p><img src="https://s2.loli.net/2021/12/09/xJLWMnc2kqmHg1p.png" alt="image-20211107221323477"></p><h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main(){int n;cin &gt;&gt; n;vector&lt;int&gt; nums(n,0);vector&lt;int&gt; sum(n+1,0);vector&lt;vector&lt;int&gt;&gt; dp(n,vector&lt;int&gt;(n,0));//先输入数组for(int i=0;i&lt;n;i++){cin &gt;&gt; nums[i];}//初始化sum，方便求i,j之间的代价for(int i=0;i&lt;n;i++){sum[i+1] = sum[i] + nums[i];}//这是是遍历长度，2开始，1为0；for(int len = 2;len&lt;=n;len++){//这里初始化i，j,这里要右端点小于n，防止越界，斜方向遍历for(int i=0;i+len-1 &lt; n;i++){int j = i+len-1;dp[i][j] = INT_MAX;for(int k=i;k&lt;j;k++){dp[i][j] = min(dp[i][j],dp[i][k]+dp[k+1][j]+sum[j+1]-sum[i]);}}}cout &lt;&lt; dp[0][n-1] &lt;&lt;endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-B-最长公共子序列"><a href="#问题-B-最长公共子序列" class="headerlink" title="问题 B: 最长公共子序列"></a>问题 B: 最长公共子序列</h1><p>时间限制: 1 Sec 内存限制: 128 MB</p><h2 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h2><p>一个字符串A的子串被定义成从A中顺次选出若干个字符构成的串。如A=“cdaad” ,顺次选1，3，5个字符就构成子串” cad” ,现给定两个字符串，求它们的最长共公子串。</p><h2 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h2><p>第一行两个字符串用空格分开。两个串的长度均小于2000 。</p><h2 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h2><p>最长子串的长度。</p><h2 id="样例输入-6"><a href="#样例输入-6" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">abccd aecd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="样例输出-6"><a href="#样例输出-6" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main(){string str1,str2;cin &gt;&gt; str1 &gt;&gt; str2;int m = str1.size();int n = str2.size();vector&lt;vector&lt;int&gt;&gt; dp(m+1,vector&lt;int&gt;(n+1,0));for(int i=1;i&lt;=m;i++){for(int j=1;j&lt;=n;j++){if(str1[i-1] == str2[j-1]){dp[i][j] = dp[i-1][j-1] + 1;}else{dp[i][j] = max(dp[i-1][j],dp[i][j-1]);}}}cout &lt;&lt; dp[m][n] &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-C-三角形的路径权"><a href="#问题-C-三角形的路径权" class="headerlink" title="问题 C: 三角形的路径权"></a>问题 C: 三角形的路径权</h1><p>时间限制: 1 Sec 内存限制: 128 MB</p><h2 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h2><p>如输入样例所示出了一个数字三角形。请编一个程序计算从顶至底的某处的一条路径，使该路径所经过的数字的总和最大。每一步可沿左斜线向下或右斜线向下走；1&lt; 三角形行数&lt; 25；三角形中的数字为整数&lt; 1000；</p><h2 id="输入-7"><a href="#输入-7" class="headerlink" title="输入"></a>输入</h2><p>输入第一行为N，表示有N行 后面N行表示三角形每条路的路径权。</p><h2 id="输出-7"><a href="#输出-7" class="headerlink" title="输出"></a>输出</h2><p>输出路径所经过的数字的总和最大的答案。</p><h2 id="样例输入-7"><a href="#样例输入-7" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">573 88 1 02 7 4 44 5 2 6 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-7"><a href="#样例输出-7" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">30<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h2><p>逆向，自底向上</p><p>i == N 时 <code>dp[i][j] = mp[i][j]</code></p><p>其他 ：<code>dp[i][j]=max(dp[i+1][j],dp[i+1][j+1])+mp[i][j]</code></p><h2 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main(){int n;cin &gt;&gt; n;vector&lt;vector&lt;int&gt;&gt; mp(n,vector&lt;int&gt;(n,-1));for(int i=0;i&lt;n;i++){for(int j=0;j&lt;=i;j++){cin &gt;&gt; mp[i][j];}}vector&lt;vector&lt;int&gt;&gt; dp(n+1,vector&lt;int&gt;(n+1,0));for(int i=n-1;i&gt;=0;i--){for(int j=0;j&lt;=i;j++){if(i == n-1){dp[i][j] = mp[i][j];}else{dp[i][j]=max(dp[i+1][j],dp[i+1][j+1])+mp[i][j];}}}cout &lt;&lt; dp[0][0] &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-D-跳跃游戏二"><a href="#问题-D-跳跃游戏二" class="headerlink" title="问题 D: 跳跃游戏二"></a>问题 D: 跳跃游戏二</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个非负整数数组，假定你的初始位置为数组第一个下标。数组中的每个元素代表你在那个位置能够跳跃的最大长度。你的目标是到达最后一个下标，并且使用最少的跳跃次数。例如：A = [2,3,1,1,4]，到达最后一个下标的最少跳跃次数为 2。（先跳跃11步，从下标0到1，然后跳跃3步，到达最后一个下标。一共两次）</p><h2 id="输入-8"><a href="#输入-8" class="headerlink" title="输入"></a>输入</h2><p>第一行输入一个正整数n(1≤n≤100)，接下来的一行，输入n个整数，表示数组A。</p><h2 id="输出-8"><a href="#输出-8" class="headerlink" title="输出"></a>输出</h2><p>最后输出最少的跳跃次数。</p><h2 id="样例输入-8"><a href="#样例输入-8" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">53 1 1 1 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-8"><a href="#样例输出-8" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h2><p>这里可以拿dp动态规划</p><p>但我选择更简单的贪心算法，求最大覆盖范围</p><p>看几次就可以覆盖终点</p><h2 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h2><h3 id="方法一-贪心算法"><a href="#方法一-贪心算法" class="headerlink" title="方法一 贪心算法"></a>方法一 贪心算法</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main(){int n;cin &gt;&gt; n;vector&lt;int&gt; nums(n,0);for(int i=0;i&lt;n;i++){cin &gt;&gt; nums[i];}int curDistance = 0;    // 当前覆盖的最远距离下标int ans = 0;            // 记录走的最大步数int nextDistance = 0;   // 下一步覆盖的最远距离下标for(int i=0;i&lt;n-1;i++){nextDistance = max(nums[i]+i,nextDistance);if(i == curDistance){curDistance = nextDistance;ans++;}}cout &lt;&lt; ans &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-E-字母排序"><a href="#问题-E-字母排序" class="headerlink" title="问题 E: 字母排序"></a>问题 E: 字母排序</h1><p>时间限制: 1 Sec</p><p> 内存限制: 128 MB</p><h2 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h2><p>XXXX年突然有外星人造访，但大家语言不通，不过科学家们经过研究发现外星人用26个英文字母组成的单词中最长不降子序列的长度来表述数字，且英文字母的排列顺序不同，现给出其排列顺序，再给出外星人说的每个数字（其实是每个英文单词，用空格隔开），翻译出外星人所说的数字（连续输出，最后加回车）。(因为是最长不降子序列，所以数字中没有0，也就是说外星人的数字是大于0的数字)。例如，我们正常的字母排列顺序是abcdefg…….xyz，代表a&lt; b&lt; c&lt; …..&lt; x&lt; y&lt; z abcd efg hhh ihg四个字符串的最长不降子序列的长度分别为4 3 3 1。</p><h2 id="输入-9"><a href="#输入-9" class="headerlink" title="输入"></a>输入</h2><p>第1，2行为字符串 含义如题描述。1≤第二行长度≤255。</p><h2 id="输出-9"><a href="#输出-9" class="headerlink" title="输出"></a>输出</h2><p>输出答案，含义如题描述</p><h2 id="样例输入-9"><a href="#样例输入-9" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">abcdefghijklmnopqrstuvwxyzabcd efg hhh ihg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-9"><a href="#样例输出-9" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">4331<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main(){string str;cin &gt;&gt; str;    //这里map映射，因为是26的字母不分大小写，如果混合使用，统一转成小写就好了，map用红黑树，unordered_map应用哈希unordered_map&lt;char,int&gt; map;for(int i=0;i&lt;str.size();i++){map[str[i]] = i;}while(cin &gt;&gt; str){//里面就是最简单最大子序列//这里初始化为1vector&lt;int&gt; dp(str.size(),1);int ans = 0;for(int i=0;i&lt;str.size();i++){for(int j=0;j&lt;i;j++){if(map[str[i]] &gt;= map[str[j]]){dp[i] = max(dp[i],dp[j]+1);}if(ans &lt; dp[i]){ans = dp[i];}}}cout &lt;&lt; ans;}cout &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="实验三"><a href="#实验三" class="headerlink" title="实验三"></a>实验三</h1><h1 id="问题-A-Homework"><a href="#问题-A-Homework" class="headerlink" title="问题 A: Homework"></a>问题 A: Homework</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h2><p>临近开学了，大家都忙着收拾行李准 备返校，但 I_Love_C 却不为此担心! 因为他的心思全在暑假作业上：目前为止还未开动。</p><p>暑假作业是很多张试卷，我们这些从试卷里爬出来的人都知道，卷子上的题目有选择题、填空题、简答题、证明题等。而做选择题的好处就在于工作量很少，但又因为选择题题目都普遍很长。如果有 5 张试卷，其中 4 张是选择题，最后一张是填空题，很明显做最后一张所花的时间要比前 4 张长很多。但如果你只做了选择题，虽然工作量很少，但表面上看起来也已经做了4/5的作业了。</p><p>I_Love_C决定就用这样的方法来蒙混过关，他统计出了做完每一张试卷所需的时间以及它做完后能得到的价值（按上面的原理，选择题越多价值当然就越高咯）。</p><p>现在就请你帮他安排一下，用他仅剩的一点时间来做最有价值的作业。</p><h2 id="输入-10"><a href="#输入-10" class="headerlink" title="输入"></a>输入</h2><p>测试数据包括多组。每组测试数据以两个整数 M,N(1&lt;M&lt;20,1&lt;N&lt;10000) 开头，分别表示试卷的数目和 I_Love_C 剩下的时间。接下来有 M 行，每行包括两个整数 T,V(1&lt;T&lt;N,1&lt;V&lt;10000)分别表示做完这张试卷所需的时间以及做完后能得到的价值，输入以 0 0 结束。</p><h2 id="输出-10"><a href="#输出-10" class="headerlink" title="输出"></a>输出</h2><p>对应每组测试数据输出 I_Love_C 能获得的最大价值。保留小数点 2 位</p><p>提示：float 的精度可能不够，你应该使用 double 类型。</p><h2 id="样例输入-10"><a href="#样例输入-10" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">4 204 105 2210 31 20 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-10"><a href="#样例输出-10" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">37.00<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h2><p>贪心算法，寻找性价比最高的</p><h2 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;bool cmp(vector&lt;double&gt;a,vector&lt;double&gt; b){return a[2] &gt; b[2];}int main(){int m,n;while(cin &gt;&gt; m &gt;&gt; n){if(m == 0 &amp;&amp; n ==0){break;}vector&lt;vector&lt;double&gt;&gt; homework(m,vector&lt;double&gt;(3,0));for(int i=0;i&lt;m;i++){cin &gt;&gt; homework[i][0] &gt;&gt; homework[i][1];homework[i][2] = homework[i][1] / homework[i][0];}sort(homework.begin(),homework.end(),cmp);double ans = 0; for(int i=0;i&lt;n;i++){if(n &gt; homework[i][0]){ans += homework[i][1];n -= homework[i][0];}else{ans += homework[i][2] * n;break;}}printf("%.2lf\n",ans);}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-B-区间包含问题"><a href="#问题-B-区间包含问题" class="headerlink" title="问题 B: 区间包含问题"></a>问题 B: 区间包含问题</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h2><p>已知 n 个左闭右开区间 [a,b)，对其进行 m 次询问，求区间[l,r]最多可以包含 n 个区间中的多少个区间，并且被包含的所有区间都不相交。</p><h2 id="输入-11"><a href="#输入-11" class="headerlink" title="输入"></a>输入</h2><p>输入包含多组测试数据，对于每组测试数据：</p><p>第一行包含两个整数 n ,m (1≤n≤100000,1≤m≤100) 。</p><p>接下来 n 行每行包含两个整数 a ,b (0≤a&lt;b≤10^9) 。</p><p>接下来 m 行每行包含两个整数 l ,r (0≤l&lt;r≤10^9) 。</p><h2 id="输出-11"><a href="#输出-11" class="headerlink" title="输出"></a>输出</h2><p>对于每组测试数据，输出 m 行，每行包含一个整数。</p><p>数据过大请使用快速输入输出。</p><h2 id="样例输入-11"><a href="#样例输入-11" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">4 31 32 41 41 21 21 31 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-11"><a href="#样例输出-11" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">112<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="思路-11"><a href="#思路-11" class="headerlink" title="思路"></a>思路</h2><p>就是右端点小排序</p><p>优先选取满足小区间</p><h2 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;bool cmp(vector&lt;int&gt; a, vector&lt;int&gt; b){return a[1] &lt; b[1];}int main(){int n, m;while(cin &gt;&gt; n &gt;&gt; m){vector&lt;vector&lt;int&gt;&gt; point(n,vector&lt;int&gt;(2,0));for(int i=0;i&lt;n;i++){cin &gt;&gt; point[i][0] &gt;&gt; point[i][1];}sort(point.begin(),point.end(),cmp);while(m--){int left,right;cin &gt;&gt; left &gt;&gt; right;int ans = 0;for(int i=0;i&lt;n;i++){if(point[i][1] &gt; right){break;}if(left &lt;= point[i][0]){left = point[i][1];ans++;}}cout &lt;&lt; ans &lt;&lt; endl;}}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-C-最长子序列"><a href="#问题-C-最长子序列" class="headerlink" title="问题 C: 最长子序列"></a>问题 C: 最长子序列</h1><p>时间限制: 1 Sec 内存限制: 128 MB</p><h2 id="题目描述-12"><a href="#题目描述-12" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个数组中找出和最大的连续几个数。（至少包含一个数）</p><p>例如：</p><p>数组A[] = [-2,1,-3,4,-1,2,1,-5,4]，则连续的子序列[4,-1,2,1]有最大的和6.</p><h2 id="输入-12"><a href="#输入-12" class="headerlink" title="输入"></a>输入</h2><p>第一行输入一个不超过1000的整数n。</p><p>第二行输入n个整数A[i]。</p><h2 id="输出-12"><a href="#输出-12" class="headerlink" title="输出"></a>输出</h2><p>输出一个整数，表示最大的和。</p><h2 id="样例输入-12"><a href="#样例输入-12" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">31 1 -2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-12"><a href="#样例输出-12" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-12"><a href="#思路-12" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-12"><a href="#代码-12" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main(){int n;cin &gt;&gt; n;vector&lt;int&gt; nums(n,0);for(int i=0;i&lt;n;i++){cin &gt;&gt; nums[i];}int sum = 0;int ans = INT_MIN;for(int i=0;i&lt;n;i++){sum += nums[i];if(sum &gt; ans){ans = sum;}if(sum &lt; 0){sum = 0;}}cout &lt;&lt; ans &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-D-三值排序"><a href="#问题-D-三值排序" class="headerlink" title="问题 D: 三值排序"></a>问题 D: 三值排序</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-13"><a href="#题目描述-13" class="headerlink" title="题目描述"></a>题目描述</h2><p>排序是一种很频繁的计算任务。一个实际的例子是，当我们给某项竞赛的优胜者按金银铜牌排序的时候。在这个任务中可能的值只有三种1，2和3。我们用交换的方法把他排成升序的。</p><p>写一个程序计算出，计算出的一个包括1、2、3三种值的数字序列，排成升序所需的最少交换次数。</p><h2 id="输入-13"><a href="#输入-13" class="headerlink" title="输入"></a>输入</h2><p>输入第1行为类别的数量N（1≤N≤1000）</p><p>输入第2行到第N+1行，每行包括一个数字（1或2或3）。</p><h2 id="输出-13"><a href="#输出-13" class="headerlink" title="输出"></a>输出</h2><p>输出包含一行，为排成升序所需的最少交换次数。</p><h2 id="样例输入-13"><a href="#样例输入-13" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">9221333231<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-13"><a href="#样例输出-13" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-13"><a href="#思路-13" class="headerlink" title="思路"></a>思路</h2><p>交换次序的，</p><p>这个不太懂，背吧</p><h2 id="代码-13"><a href="#代码-13" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main(){int n;cin &gt;&gt; n;int sum[4] = {0,0,0,0};vector&lt;int&gt; nums(n,0);for(int i=0;i&lt;n;i++){cin &gt;&gt; nums[i];sum[nums[i]]++;}int x = 0,y = 0,z=0;for(int i=0;i&lt;sum[1];i++){if(nums[i] != 1){x++;}}for(int i=sum[1];i&lt;sum[1]+sum[2];i++){if(nums[i] == 3){y++;}}for(int i=sum[1]+sum[2];i&lt;n;i++){if(nums[i] == 2){z++;}}cout &lt;&lt; x + max(y,z) &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-E-法师康的工人"><a href="#问题-E-法师康的工人" class="headerlink" title="问题 E: 法师康的工人"></a>问题 E: 法师康的工人</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-14"><a href="#题目描述-14" class="headerlink" title="题目描述"></a>题目描述</h2><p>三个法师康的工人每天早上6点到工厂开始到三条产品生产线上组装桔子手机。第一个工人在200时刻开始（从6点开始计时，以秒作为单位）在生产线上开始生产，一直到1000时刻。第二个工人，在700时刻开始，在1100时刻结束。第三个工人从1500时刻工作到2100时刻。期间最长至少有一个工人在生产线上工作的连续时间为900秒（从200时刻到1100时刻），而最长的无人生产的连续时间（从生产开始到生产结束）为400时刻（1100时刻到1500时刻）。</p><p>你的任务是用一个程序衡量N个工人在N条产品线上的工作时间列表（1≤N≤5000，以秒为单位）。</p><p>·最长的至少有一个工人在工作的时间段</p><p>·最长的无人工作的时间段（从有人工作开始计）</p><h2 id="输入-14"><a href="#输入-14" class="headerlink" title="输入"></a>输入</h2><p>输入第1行为一个整数N，第2-N+1行每行包括两个均小于1000000的非负整数数据，表示其中一个工人的生产开始时间与结束时间。</p><h2 id="输出-14"><a href="#输出-14" class="headerlink" title="输出"></a>输出</h2><p>输出为一行，用空格分隔开两个我们所求的数。</p><h2 id="样例输入-14"><a href="#样例输入-14" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">3200 1000700 11001500 2100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-14"><a href="#样例输出-14" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">900 400<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-14"><a href="#思路-14" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-14"><a href="#代码-14" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;bool cmp(vector&lt;int&gt; a, vector&lt;int&gt; b){if(a[0] == b[0])return a[1] &lt; b[1];return a[0] &lt; b[0];}int main(){int n;cin &gt;&gt; n;vector&lt;vector&lt;int&gt;&gt; point(n,vector&lt;int&gt;(2,0));for(int i=0;i&lt;n;i++){cin &gt;&gt; point[i][0] &gt;&gt; point[i][1];}sort(point.begin(),point.end(),cmp);int maxx = 0;int minn = 0;int start,end;start = point[0][0];end = point[0][1];for(int i=1;i&lt;n;i++){if(point[i][0] &lt;= end){end =max(point[i][1],end);maxx = max(maxx,end - start);}else{start = point[i][0];minn = max(minn,start - end);end = point[i][1];}}cout &lt;&lt; maxx &lt;&lt; " " &lt;&lt; minn &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="作业一"><a href="#作业一" class="headerlink" title="作业一"></a>作业一</h1><h1 id="问题-A-进制转换"><a href="#问题-A-进制转换" class="headerlink" title="问题 A: 进制转换"></a>问题 A: 进制转换</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-15"><a href="#题目描述-15" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个十进制正整数，然后输出它所对应的八进制数。</p><h2 id="输入-15"><a href="#输入-15" class="headerlink" title="输入"></a>输入</h2><p>输入一个十进制正整数n(1≤n≤10<em>6</em>) 。</p><h2 id="输出-15"><a href="#输出-15" class="headerlink" title="输出"></a>输出</h2><p>输出n对应的八进制数，输出在一行。</p><h2 id="样例输入-15"><a href="#样例输入-15" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="样例输出-15"><a href="#样例输出-15" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">12<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-15"><a href="#思路-15" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-15"><a href="#代码-15" class="headerlink" title="代码"></a>代码</h2><h3 id="方法一-c语言-o强转"><a href="#方法一-c语言-o强转" class="headerlink" title="方法一 c语言%o强转"></a>方法一 c语言%o强转</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main(){int n;cin &gt;&gt; n;printf("%o\n",n);return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二-存储"><a href="#方法二-存储" class="headerlink" title="方法二 %/存储"></a>方法二 %/存储</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main(){int n;cin &gt;&gt; n;vector&lt;int&gt; num;while(n){num.push_back(n%8);n /= 8;}for(int i=num.size()-1;i&gt;=0;i--){cout &lt;&lt; num[i];}cout &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-B-排列问题"><a href="#问题-B-排列问题" class="headerlink" title="问题 B: 排列问题"></a>问题 B: 排列问题</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-16"><a href="#题目描述-16" class="headerlink" title="题目描述"></a>题目描述</h2><p>  输入一个可能含有重复字符的字符串，打印出该字符串中所有字符的全排列。</p><h2 id="输入-16"><a href="#输入-16" class="headerlink" title="输入"></a>输入</h2><p>单组测试数据，输入数据是一个长度不超过10个字符的字符串，以逗号结尾。</p><h2 id="输出-16"><a href="#输出-16" class="headerlink" title="输出"></a>输出</h2><p>打印出该字符串中所有字符的全排列。以字典序顺序输出，用空格分隔。</p><h2 id="样例输入-16"><a href="#样例输入-16" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">abc,<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="样例输出-16"><a href="#样例输出-16" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">abc acb bac bca cab cba<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-16"><a href="#思路-16" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-16"><a href="#代码-16" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;string path;vector&lt;string&gt; result;vector&lt;int&gt; used;void backtrack(string str){if(path.size() == str.size()){result.push_back(path);return;}for(int i=0;i&lt;str.size();i++){if(used[i]){continue;}used[i] = 1;path.push_back(str[i]);backtrack(str);path.pop_back();used[i] = 0;}}int main(){string str;cin &gt;&gt; str;str.pop_back();sort(str.begin(),str.end());used.resize(str.size(),0);backtrack(str);for(auto s : result){cout &lt;&lt; s &lt;&lt; " ";}cout &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-C-快速幂"><a href="#问题-C-快速幂" class="headerlink" title="问题 C: 快速幂"></a>问题 C: 快速幂</h1><p>时间限制: 1 Sec</p><p>内存限制: 128 MB</p><h2 id="题目描述-17"><a href="#题目描述-17" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="%E7%BB%BC%E5%90%88%E7%89%88.assets/20180914130647_85638-16364329703111.png" alt="img"></p><h2 id="输入-17"><a href="#输入-17" class="headerlink" title="输入"></a>输入</h2><p>多组测试样例，最多50组。每组测试样例给定一个整数x(1&lt;=x&lt;=25000)</p><h2 id="输出-17"><a href="#输出-17" class="headerlink" title="输出"></a>输出</h2><p>对每个样例，输出一行，代表f(x)对100000007取余的结果。</p><h2 id="样例输入-17"><a href="#样例输入-17" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">345<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-17"><a href="#样例输出-17" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">332893414<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="思路-17"><a href="#思路-17" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-17"><a href="#代码-17" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;const long long mod = 100000007;long long mypow(long long x,long long m){long long ans = 1;while(m){if(m &amp; 1){ans = (ans * x) % mod;}m &gt;&gt;= 1;x = (x * x) %mod;}return ans;}int main(){int n;while(cin &gt;&gt; n){long long ans = 1;for(int i=1;i&lt;=n;i++){ans =(ans + mypow(i,i)) % mod;}cout &lt;&lt; ans &lt;&lt;endl;}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-D-求第k小"><a href="#问题-D-求第k小" class="headerlink" title="问题 D: 求第k小"></a>问题 D: 求第k小</h1><p>时间限制: 1 Sec</p><p>内存限制: 128 MB</p><h2 id="题目描述-18"><a href="#题目描述-18" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定n(1&lt;=n&lt;=1000000)个元素，求第k小数(1&lt;=k&lt;=n)。</p><h2 id="输入-18"><a href="#输入-18" class="headerlink" title="输入"></a>输入</h2><p>一组样例。第一行输入两个整数n和k。第二行输入n个不同的int范围内的数。</p><h2 id="输出-18"><a href="#输出-18" class="headerlink" title="输出"></a>输出</h2><p>输出一行，输出第k小数。</p><h2 id="样例输入-18"><a href="#样例输入-18" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">5 21 5 3 2 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-18"><a href="#样例输出-18" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="代码-18"><a href="#代码-18" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int nums[1000002];int main(){int n,k;cin &gt;&gt; n &gt;&gt; k;for(int i=0;i&lt;n;i++){cin &gt;&gt; nums[i];}sort(nums,nums+n);cout &lt;&lt; nums[k-1] &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-E-沙子的质量"><a href="#问题-E-沙子的质量" class="headerlink" title="问题 E: 沙子的质量"></a>问题 E: 沙子的质量</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-19"><a href="#题目描述-19" class="headerlink" title="题目描述"></a>题目描述</h2><p>设有N堆沙子排成一排，其编号为1，2，3，…，N（N&lt; =300）。每堆沙子有一定的数量，可以用一个整数来描述，现在要将N堆沙子合并成为一堆，每次只能合并相邻的两堆，合并的代价为这两堆沙子的数量之和，合并后与这两堆沙子相邻的沙子将和新堆相邻，合并时由于选择的顺序不同，合并的总代价也不相同，如有4堆沙子分别为1 3 5 2我们可以先合并1、2堆，代价为4，得到4 5 2又合并1，2堆，代价为9，得到9 2，再合并得到11，总代价为4+9+11=24，如果第二步是先合并2，3堆，则代价为7，得到4 7，最后一次合并代价为11，总代价为4+7+11=22；问题是：找出一种合理的方法，使总的代价最小。输出最小代价。</p><h2 id="输入-19"><a href="#输入-19" class="headerlink" title="输入"></a>输入</h2><p>第一行一个数N表示沙子的堆数N。 第二行N个数，表示每堆沙子的质量。 a[i]&lt; =1000。</p><h2 id="输出-19"><a href="#输出-19" class="headerlink" title="输出"></a>输出</h2><p>合并的最小代价。</p><h2 id="样例输入-19"><a href="#样例输入-19" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">41 3 5 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-19"><a href="#样例输出-19" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-18"><a href="#思路-18" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-19"><a href="#代码-19" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main(){int n;cin &gt;&gt; n;vector&lt;int&gt; nums(n,0);for(int i=0;i&lt;n;i++){cin &gt;&gt; nums[i];}vector&lt;int&gt; sum(n+1,0);for(int i=0;i&lt;n;i++){sum[i+1] = sum[i] + nums[i]; }vector&lt;vector&lt;int&gt;&gt; dp(n,vector&lt;int&gt;(n,INT_MAX));for(int i=0;i&lt;n;i++){dp[i][i] = 0;}for(int len=2;len&lt;=n;len++){for(int i=0;i + len -1 &lt; n;i++){int j = i + len -1;for(int k=i;k&lt;j;k++){dp[i][j] = min(dp[i][j],dp[i][k]+dp[k+1][j] + sum[j+1]-sum[i]);}}}cout &lt;&lt; dp[0][n-1] &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-F-最长公共子序列"><a href="#问题-F-最长公共子序列" class="headerlink" title="问题 F: 最长公共子序列"></a>问题 F: 最长公共子序列</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-20"><a href="#题目描述-20" class="headerlink" title="题目描述"></a>题目描述</h2><p>一个字符串A的子串被定义成从A中顺次选出若干个字符构成的串。如A=“cdaad” ,顺次选1，3，5个字符就构成子串” cad” ,现给定两个字符串，求它们的最长共公子串。</p><h2 id="输入-20"><a href="#输入-20" class="headerlink" title="输入"></a>输入</h2><p>第一行两个字符串用空格分开。两个串的长度均小于2000 。</p><h2 id="输出-20"><a href="#输出-20" class="headerlink" title="输出"></a>输出</h2><p>最长子串的长度。</p><h2 id="样例输入-20"><a href="#样例输入-20" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">abccd aecd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="样例输出-20"><a href="#样例输出-20" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-19"><a href="#思路-19" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-20"><a href="#代码-20" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main(){string str1,str2;cin &gt;&gt; str1 &gt;&gt; str2;int m = str1.size();int n = str2.size();vector&lt;vector&lt;int&gt;&gt; dp(m+1,vector&lt;int&gt;(n+1,0));for(int i=1;i&lt;=m;i++){for(int j=1;j&lt;=n;j++){if(str1[i-1] == str2[j-1]){dp[i][j] = dp[i-1][j-1] + 1;}else{dp[i][j] = max(dp[i][j-1],dp[i-1][j]);}}}cout &lt;&lt; dp[m][n] &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-G-sort"><a href="#问题-G-sort" class="headerlink" title="问题 G: sort"></a>问题 G: sort</h1><p>时间限制: 1 Sec </p><p>内存限制: 64 MB</p><h2 id="题目描述-21"><a href="#题目描述-21" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你n个整数，请按从大到小的顺序输出其中前m大的数。</p><h2 id="输入-21"><a href="#输入-21" class="headerlink" title="输入"></a>输入</h2><p>每组测试数据有两行，第一行有两个数n,m(0&lt;n,m&lt;1000000)，第二行包含n个各不相同，且都处于区间[-500000,500000]的整数。</p><h2 id="输出-21"><a href="#输出-21" class="headerlink" title="输出"></a>输出</h2><p>对每组测试数据按从大到小的顺序输出前m大的数。</p><h2 id="样例输入-21"><a href="#样例输入-21" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">5 33 -35 92 213 -644<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-21"><a href="#样例输出-21" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">213 92 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-20"><a href="#思路-20" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-21"><a href="#代码-21" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int nums[1000001];bool cmp(int a,int b){return a &gt; b;}int main(){int n,m;cin &gt;&gt; n &gt;&gt; m;for(int i=0;i&lt;n;i++){cin &gt;&gt; nums[i];}sort(nums,nums+n,cmp);for(int i=0;i&lt;m;i++){cout &lt;&lt; nums[i] &lt;&lt; " ";}cout &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-H-Joseph"><a href="#问题-H-Joseph" class="headerlink" title="问题 H: Joseph"></a>问题 H: Joseph</h1><p>时间限制: 1 Sec </p><p>内存限制: 32 MB</p><h2 id="题目描述-22"><a href="#题目描述-22" class="headerlink" title="题目描述"></a>题目描述</h2><p>The Joseph’s problem is notoriously known. For those who are not familiar with the original problem: from among n people, numbered 1, 2, . . ., n, standing in circle every mth is going to be executed and only the life of the last remaining person will be saved. Joseph was smart enough to choose the position of the last remaining person, thus saving his life to give us the message about the incident. For example when n = 6 and m = 5 then the people will be executed in the order 5, 4, 6, 2, 3 and 1 will be saved. </p><p>Suppose that there are k good guys and k bad guys. In the circle the first k are good guys and the last k bad guys. You have to determine such minimal m that all the bad guys will be executed before the first good guy.</p><p>约瑟夫问题是臭名昭著的。对于那些不熟悉原问题的人来说：从n个人中，编号为1，2，…，n，每隔m月站成一圈就要被处死，只有最后剩下的人的生命才能得到挽救。约瑟夫很聪明地选择了最后剩下的人的位置，从而保住了他的性命，给我们带来了关于这个事件的信息。例如，当n=6，m=5时，那么人们将按5、4、6、2、3的顺序被处决，1人将获救。</p><p>假设有k个好人和k个坏人。在这个圈子里，前k个是好人，后k个是坏人。你必须确定这样一个最小的m，使所有的坏人都在第一个好人之前被处决。</p><h2 id="输入-22"><a href="#输入-22" class="headerlink" title="输入"></a>输入</h2><p>The input file consists of separate lines containing k. The last line in the input file contains 0. You can suppose that 0 &lt; k &lt; 14.</p><p>输入文件由包含 k 的单独行组成。输入文件的最后一行包含 0。您可以假设 0 &lt; k &lt; 14。</p><h2 id="输出-22"><a href="#输出-22" class="headerlink" title="输出"></a>输出</h2><p>The output file will consist of separate lines containing m corresponding to k in the input file</p><p>输出文件将由包含与输入文件中的 k 对应的 m 的单独行组成</p><h2 id="样例输入-22"><a href="#样例输入-22" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">340<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-22"><a href="#样例输出-22" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">530<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="思路-21"><a href="#思路-21" class="headerlink" title="思路"></a>思路</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits/stdc++.h&gt;using namespace std;bool check(int m,int k){int res = 0;for(int i=1;i&lt;=k;i++){res = (res + m -1) % (2*k-i+1);if(res &lt; k){return false;}}return true;}int main(){int k;while((cin &gt;&gt; k) &amp;&amp; k){for(int i=k+1;;i++){if(check(i,k) == true){cout &lt;&lt; i &lt;&lt; endl;break;}}}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-I-Factstone-Benchmark"><a href="#问题-I-Factstone-Benchmark" class="headerlink" title="问题 I: Factstone Benchmark"></a>问题 I: Factstone Benchmark</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-23"><a href="#题目描述-23" class="headerlink" title="题目描述"></a>题目描述</h2><p>Amtel has announced that it will release a 128-bit computer chip by 2010, a 256-bit computer by 2020, and so on, continuing its strategy of doubling the word-size every ten years. (Amtel released a 64-bit computer in 2000, a 32-bit computer in 1990, a 16-bit computer in 1980, an 8-bit computer in 1970, and a 4-bit computer, its first, in 1960.)</p><p>Amtel will use a new benchmark - the <em>Factstone</em> - to advertise the vastly improved capacity of its new chips. The <em>Factstone</em> rating is defined to be the largest integer <em>n</em> such that <em>n!</em> can be represented as an unsigned integer in a computer word.</p><p>Given a year <em>1960 ≤ y ≤ 2160</em>, what will be the <em>Factstone</em> rating of Amtel’s most recently released chip?</p><p>Amtel公司已经宣布，它将在2010年之前发布128位计算机芯片，在2020年之前发布256位计算机，以此类推，继续其每十年将字数增加一倍的战略。(Amtel在2000年发布了64位计算机，1990年发布了32位计算机，1980年发布了16位计算机，1970年发布了8位计算机，1960年发布了其第一款4位计算机）。</p><p>Amtel公司将使用一种新的基准—Factstone—来宣传其新芯片的巨大改进的能力。Factstone评级被定义为最大的整数n，使n！可以在计算机字中表示为一个无符号整数。</p><p>考虑到1960≤y≤2160年，Amtel最近发布的芯片的Factstone等级将是多少？</p><h2 id="输入-23"><a href="#输入-23" class="headerlink" title="输入"></a>输入</h2><p>There are several test cases. For each test case, there is one line of input containing <em>y</em>. A line containing 0 follows the last test case.</p><p>有几个测试用例。对于每个测试用例，有一行包含 y 的输入。包含 0 的行跟随最后一个测试用例</p><h2 id="输出-23"><a href="#输出-23" class="headerlink" title="输出"></a>输出</h2><p>For each test case, output a line giving the Factstone rating. </p><p>对于每个测试用例，输出一行给出Factstone等级。</p><h2 id="样例输入-23"><a href="#样例输入-23" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">196019810<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-23"><a href="#样例输出-23" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">38<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="思路-22"><a href="#思路-22" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-22"><a href="#代码-22" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits/stdc++.h&gt;using namespace std;int main(){int n;while((cin &gt;&gt; n) &amp;&amp; n){double  a = log2(4.0);for (int i = 1960; i &lt;= n; i += 10)a *= 2;double  f = 0;int i = 0;while(f &lt; a){++i;f += log2(double(i));}cout &lt;&lt; i - 1 &lt;&lt; endl;}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-J-Ants"><a href="#问题-J-Ants" class="headerlink" title="问题 J: Ants"></a>问题 J: Ants</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-24"><a href="#题目描述-24" class="headerlink" title="题目描述"></a>题目描述</h2><p>An army of ants walk on a horizontal pole of length <em>l</em> cm, each with a constant speed of 1 cm/s. When a walking ant reaches an end of the pole, it immediatelly falls off it. When two ants meet they turn back and start walking in opposite directions. We know the original positions of ants on the pole, unfortunately, we do not know the directions in which the ants are walking. Your task is to compute the earliest and the latest possible times needed for all ants to fall off the pole. </p><p>一群蚂蚁走在一根长为 l cm 的水平杆上，每支蚂蚁以 1 cm/s 的恒定速度行走。当一只行走的蚂蚁到达杆子的末端时，它会立即从杆子上掉下来。当两只蚂蚁相遇时，它们会转身向相反的方向走。我们知道蚂蚁在杆子上的原始位置，不幸的是，我们不知道蚂蚁行走的方向。你的任务是计算所有蚂蚁从杆子上掉下来所需的最早和最晚时间。</p><h2 id="输入-24"><a href="#输入-24" class="headerlink" title="输入"></a>输入</h2><p>The first line of input contains one integer giving the number of cases that follow. The data for each case start with two integer numbers: the length of the pole (in cm) and <em>n</em>, the number of ants residing on the pole. These two numbers are followed by <em>n</em> integers giving the position of each ant on the pole as the distance measured from the left end of the pole, in no particular order. All input integers are not bigger than 1000000 and they are separated by whitespace. </p><p>输入的第一行包含一个整数，给出后面的案例数。每个案例的数据都以两个整数开始：杆的长度（以厘米为单位）和 n，杆上的蚂蚁数量。这两个数字后跟 n 个整数，表示每只蚂蚁在杆子上的位置，即从杆子左端测量的距离，没有特定的顺序。所有输入的整数都不大于 1000000，并且它们以空格分隔。</p><h2 id="输出-24"><a href="#输出-24" class="headerlink" title="输出"></a>输出</h2><p>For each case of input, output two numbers separated by a single space. The first number is the earliest possible time when all ants fall off the pole (if the directions of their walks are chosen appropriately) and the second number is the latest possible such time.</p><p>对于输入的每种情况，输出由单个空格分隔的两个数字。第一个数字是所有蚂蚁从杆子上掉下来的最早时间（如果它们的行走方向选择得当），第二个数字是最晚的时间。</p><h2 id="样例输入-24"><a href="#样例输入-24" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">210 32 6 7214 711 12 7 13 176 23 191<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-24"><a href="#样例输出-24" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">4 838 207<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="思路-23"><a href="#思路-23" class="headerlink" title="思路"></a>思路</h2><p><code>Min=max(Min,min(a[i],L-a[i]));</code></p><p><code>Max=max(Max,max(a[i],L-a[i]));</code></p><h2 id="代码-23"><a href="#代码-23" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits/stdc++.h&gt;using namespace std;int main(){int t;cin &gt;&gt; t;while(t--){int l,n;cin &gt;&gt; l &gt;&gt; n;vector&lt;int&gt; ants(n,0);for(int i=0;i&lt;n;i++){cin &gt;&gt; ants[i];}int Max = 0, Min = 0;for(int i=0;i&lt;n;i++){Min = max(Min,min(ants[i],l-ants[i]));Max = max(Max,max(ants[i],l-ants[i]));}cout &lt;&lt; Min &lt;&lt; " " &lt;&lt; Max &lt;&lt; endl;}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-K-Matches-Game"><a href="#问题-K-Matches-Game" class="headerlink" title="问题 K: Matches Game"></a>问题 K: Matches Game</h1><p>时间限制: 1 Sec </p><p>内存限制: 64 MB</p><h2 id="题目描述-25"><a href="#题目描述-25" class="headerlink" title="题目描述"></a>题目描述</h2><p>Here is a simple game. In this game, there are several piles of matches and two players. The two player play in turn. In each turn, one can choose a pile and take away arbitrary number of matches from the pile (Of course the number of matches, which is taken away, cannot be zero and cannot be larger than the number of matches in the chosen pile). If after a player’s turn, there is no match left, the player is the winner. Suppose that the two players are all very clear. Your job is to tell whether the player who plays first can win the game or not. </p><p>这是一个简单的游戏。在这场比赛中，有几堆比赛和两名球员。两个玩家轮流玩。在每一回合中，可以选择一堆并从堆中带走任意数量的火柴（当然，被带走的火柴数量不能为零，也不能大于所选堆中的火柴数量）。如果在轮到玩家之后，没有剩余比赛，则该玩家为赢家。假设两个玩家都非常清楚。你的工作是判断先玩的玩家能否赢得比赛。</p><h2 id="输入-25"><a href="#输入-25" class="headerlink" title="输入"></a>输入</h2><p>The input consists of several lines, and in each line there is a test case. At the beginning of a line, there is an integer M (1 &lt;= M &lt;=20), which is the number of piles. Then comes M positive integers, which are not larger than 10000000. These M integers represent the number of matches in each pile.</p><p>输入由几行组成，每行都有一个测试用例。在一行的开头，有一个整数M（1 &lt;= M &lt;=20），就是桩的数量。然后是M个正整数，不大于10000000。这M个整数代表每堆匹配的数量。</p><h2 id="输出-25"><a href="#输出-25" class="headerlink" title="输出"></a>输出</h2><p>For each test case, output “Yes” in a single line, if the player who play first will win, otherwise output “No”.</p><p>对于每个测试用例，单行输出“Yes”，如果先玩的玩家获胜，否则输出“No”。</p><h2 id="样例输入-25"><a href="#样例输入-25" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">2 45 453 3 6 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-25"><a href="#样例输出-25" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">NoYes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="思路-24"><a href="#思路-24" class="headerlink" title="思路"></a>思路</h2><p>这题有问题，我一直感觉学算法，优化应该在熟悉证明上，在算法复杂度上进行优化，而不是在语言效率，底层输入输出上。</p><h2 id="代码-24"><a href="#代码-24" class="headerlink" title="代码"></a>代码</h2><h3 id="c-过不了"><a href="#c-过不了" class="headerlink" title="c++过不了"></a>c++过不了</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits/stdc++.h&gt;using namespace std;int main(){int m;while(~scanf("%d",&amp;m)){int flag = 0;long long x;for(int i=0;i&lt;m;i++){cin &gt;&gt; x;flag ^= x;}if(flag) cout &lt;&lt; "Yes" &lt;&lt; endl;elsecout &lt;&lt; "No" &lt;&lt; endl; }return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="c就能过"><a href="#c就能过" class="headerlink" title="c就能过"></a>c就能过</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            flag<span class="token operator">^=</span>x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-L-sort2"><a href="#问题-L-sort2" class="headerlink" title="问题 L: sort2"></a>问题 L: sort2</h1><p>时间限制: 1 Sec</p><p>内存限制: 64 MB</p><h2 id="题目描述-26"><a href="#题目描述-26" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你n个整数，请按从大到小的顺序输出其中前m大的数。</p><h2 id="输入-26"><a href="#输入-26" class="headerlink" title="输入"></a>输入</h2><p>每组测试数据有两行，第一行有两个数n,m(0&lt;n,m&lt;1000000)，第二行包含n个都处于区间[-500000,500000]的整数，<strong><em>整数可能会重复出现\</em></strong>。</p><h2 id="输出-26"><a href="#输出-26" class="headerlink" title="输出"></a>输出</h2><p>对每组测试数据按从大到小的顺序输出前m大的数。</p><h2 id="样例输入-26"><a href="#样例输入-26" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">10 51 2 3 4 5 6 7 7 8 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-26"><a href="#样例输出-26" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">9 8 7 7 6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-25"><a href="#思路-25" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-25"><a href="#代码-25" class="headerlink" title="代码"></a>代码</h2><h3 id="直接sort超时"><a href="#直接sort超时" class="headerlink" title="直接sort超时"></a>直接sort超时</h3><h3 id="map超时"><a href="#map超时" class="headerlink" title="map超时"></a>map超时</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int nums[1000001];int main(){int n,m;cin &gt;&gt; n &gt;&gt; m;map&lt;int,int&gt; mp;for(int i=0;i&lt;n;i++){cin &gt;&gt; nums[i];if(mp.find(nums[i]) != mp.end()){mp[nums[i]]++;}mp.insert(pair&lt;int,int&gt;(nums[i],1));}int i = 0;for(auto num : mp){while(num.second){nums[i] = num.first;num.second--;i++;}}for(int i=n-1;i&gt;n-m-1;i--){cout &lt;&lt; nums[i] &lt;&lt; " ";}cout &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits/stdc++.h&gt;using namespace std;const int offset = 500000;int Hash[1000001] = {0};int main(){int m,n;while(cin &gt;&gt; n &gt;&gt; m){for(int i=0;i&lt;n;i++){int x;cin &gt;&gt; x;Hash[x+offset]++;}for(int i=offset;i&gt;=-offset &amp;&amp; m &gt; 0;i--){while(Hash[i+offset] &gt; 0 &amp;&amp; m &gt; 0){cout &lt;&lt; i &lt;&lt; " ";Hash[i+offset]--;m--;}}cout &lt;&lt; endl;}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="作业二"><a href="#作业二" class="headerlink" title="作业二"></a>作业二</h1><h1 id="问题-A-单词排序"><a href="#问题-A-单词排序" class="headerlink" title="问题 A: 单词排序"></a>问题 A: 单词排序</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-27"><a href="#题目描述-27" class="headerlink" title="题目描述"></a>题目描述</h2><p>小红学会了很多英文单词，妈妈为了帮小红加强记忆，拿出纸、笔，把 N 个单词写在纸上的一行里，小红看了几秒钟后，将这张纸扣在桌子上。妈妈问小红：“你能否将这 N 个单词按照字典排列的顺序，从小到大写出来？”小红按照妈妈的要求写出了答案。现在请你编写程序帮助妈妈检查小红的答案是否正确。注意：所有单词都由小写字母组成，单词两两之间用一个空格分隔。</p><h2 id="输入-27"><a href="#输入-27" class="headerlink" title="输入"></a>输入</h2><p>输入包含两行。</p><p>第一行仅包括一个正整数N(0&lt;N≤26)。</p><p>第二行包含N个单词，表示妈妈写出的单词，两两之间用一个空格分隔。</p><p>单个单词长度不超过1010。</p><h2 id="输出-27"><a href="#输出-27" class="headerlink" title="输出"></a>输出</h2><p>输出仅有一行。针对妈妈写出的单词，按照字典排列的顺序从小到大排列成一行的结果，每个单词后带一个空格。</p><h2 id="样例输入-27"><a href="#样例输入-27" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">4city boy tree student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-27"><a href="#样例输出-27" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">boy city student tree <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-26"><a href="#思路-26" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-26"><a href="#代码-26" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits/stdc++.h&gt;using namespace std;int main(){int n;cin &gt;&gt; n;vector&lt;string&gt; strs;for(int i=0;i&lt;n;i++){string str;cin &gt;&gt; str;strs.push_back(str);}sort(strs.begin(),strs.end());for(int i=0;i&lt;n;i++){cout &lt;&lt; strs[i] &lt;&lt; " ";}cout &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-B-求数组的最长递减子序列"><a href="#问题-B-求数组的最长递减子序列" class="headerlink" title="问题 B: 求数组的最长递减子序列"></a>问题 B: 求数组的最长递减子序列</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-28"><a href="#题目描述-28" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个整数序列，输出它的最长递减（注意不是“不递增”）子序列。</p><h2 id="输入-28"><a href="#输入-28" class="headerlink" title="输入"></a>输入</h2><p>输入包括两行，第一行包括一个正整数N（N&lt;=1000），表示输入的整数序列的长度。第二行包括用空格分隔开的N个整数，整数范围区间为[-30000,30000]。</p><h2 id="输出-28"><a href="#输出-28" class="headerlink" title="输出"></a>输出</h2><p>输出最长递减子序列，数字之间有一个空格。</p><h2 id="样例输入-28"><a href="#样例输入-28" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">89 4 3 2 5 4 3 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-28"><a href="#样例输出-28" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">9 5 4 3 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-27"><a href="#思路-27" class="headerlink" title="思路"></a>思路</h2><p>求个数很简单，但最后输出的是序列数组，这个比较麻烦。</p><p>前面求出dp动态数组和最大值，顺便记录最大值的下表和值</p><p>以及每一步的前面的下表，方便后面循环查找。</p><h2 id="代码-27"><a href="#代码-27" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits/stdc++.h&gt;using namespace std;int main(){int n;cin &gt;&gt; n;vector&lt;int&gt; nums(n,0);for(int i=0;i&lt;n;i++){cin &gt;&gt; nums[i];}vector&lt;int&gt; dp(n,1);vector&lt;int&gt; track(n,-1);int result = 0;int rp = -1;for(int i=0;i&lt;n;i++){for(int j=0;j&lt;i;j++){if((nums[i] &lt; nums[j]) &amp;&amp; dp[j]+1 &gt; dp[i]){dp[i] = dp[j] + 1;track[i] = j;}if(dp[i] &gt; result){result = dp[i];rp = i;}}}vector&lt;int&gt; ans;for(int i=result;i&gt;0;i--){ans.push_back(nums[rp]);if(track[rp] == -1)break;rp = track[rp];}for(int i=ans.size()-1;i&gt;=0;i--){cout &lt;&lt; ans[i] &lt;&lt; " ";}cout &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-C-矩形滑雪场"><a href="#问题-C-矩形滑雪场" class="headerlink" title="问题 C: 矩形滑雪场"></a>问题 C: 矩形滑雪场</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-29"><a href="#题目描述-29" class="headerlink" title="题目描述"></a>题目描述</h2><p>zcb喜欢滑雪。他来到了一个滑雪场，这个滑雪场是一个矩形，为了简便，我们用r行c列的矩阵来表示每块地形。为了得到更快的速度，滑行的路线必须向下倾斜。 例如样例中的那个矩形，可以从某个点滑向上下左右四个相邻的点之一。例如24-17-16-1，其实25-24-23…3-2-1更长，事实上这是最长的一条。</p><h2 id="输入-29"><a href="#输入-29" class="headerlink" title="输入"></a>输入</h2><p>第1行:两个数字r，c(1 ≤ r, c ≤ 100)，表示矩阵的行列。第2..r+1行:每行c个数，表示这个矩阵。</p><h2 id="输出-29"><a href="#输出-29" class="headerlink" title="输出"></a>输出</h2><p>仅一行:输出1个整数，表示可以滑行的最大长度。</p><h2 id="样例输入-29"><a href="#样例输入-29" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">5 51 2 3 4 516 17 18 19 615 24 25 20 714 23 22 21 813 12 11 10 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-29"><a href="#样例输出-29" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">25<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-28"><a href="#思路-28" class="headerlink" title="思路"></a>思路</h2><p>有点难，dfs搜索应该可以</p><p>这里还是那动态规划，把这个看成大型的二维的最长递减序列。</p><h2 id="代码-28"><a href="#代码-28" class="headerlink" title="代码"></a>代码</h2><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"> #include&lt;bits/stdc++.h&gt;using namespace std;struct node{int x;int y;int n;};bool cmp(node a,node b){    return a.n&lt;b.n;}//node nums[100005];int main(){int m,n;cin &gt;&gt; m &gt;&gt; n;vector&lt;node&gt; nums(m*n);int index = 0;for(int i=0;i&lt;m;i++){for(int j=0;j&lt;n;j++){cin &gt;&gt; nums[index].n;nums[index].x = i;nums[index].y = j;index++;}}sort(nums.begin(),nums.end(),cmp);//大型的最长递减子序列int result = 0;vector&lt;int&gt; dp(index,1);for(int i=0;i&lt;index;i++){for(int j=0;j&lt;i;j++){//这里判断条件改成前后左右if(((nums[i].x==nums[j].x &amp;&amp; abs(nums[i].y-nums[j].y)==1) || (nums[i].y==nums[j].y &amp;&amp; abs(nums[i].x-nums[j].x)==1)) &amp;&amp; nums[i].n &gt; nums[j].n){dp[i] = max(dp[i],dp[j]+1);}if(dp[i] &gt; result){result = dp[i];}}}cout &lt;&lt; result &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits/stdc++.h&gt;using namespace std;struct node{int x,y,h;};bool cmp(node a,node b){return a.h &lt; b.h;}node nums[999999];int main(){int r,c;cin &gt;&gt; r &gt;&gt; c;int n = 0;for(int i=0;i&lt;r;i++){for(int j=0;j&lt;c;j++){cin &gt;&gt; nums[n].h;nums[n].x = i;nums[n].y = j;n++; }}sort(nums,nums+n,cmp);vector&lt;int&gt; dp(n,1);int result = 0;for(int i=0;i&lt;n;i++){for(int j=0;j&lt;i;j++){if((nums[i].h &gt; nums[j].h) &amp;&amp; (abs(nums[i].x-nums[j].x) + abs(nums[i].y-nums[j].y)) == 1){dp[i] = max(dp[i],dp[j]+1);}if(dp[i] &gt; result){result = dp[i];}}}cout &lt;&lt; result &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-D-Homework"><a href="#问题-D-Homework" class="headerlink" title="问题 D: Homework"></a>问题 D: Homework</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-30"><a href="#题目描述-30" class="headerlink" title="题目描述"></a>题目描述</h2><p>临近开学了，大家都忙着收拾行李准 备返校，但 I_Love_C 却不为此担心! 因为他的心思全在暑假作业上：目前为止还未开动。</p><p>暑假作业是很多张试卷，我们这些从试卷里爬出来的人都知道，卷子上的题目有选择题、填空题、简答题、证明题等。而做选择题的好处就在于工作量很少，但又因为选择题题目都普遍很长。如果有 5 张试卷，其中 4 张是选择题，最后一张是填空题，很明显做最后一张所花的时间要比前 4 张长很多。但如果你只做了选择题，虽然工作量很少，但表面上看起来也已经做了4/5的作业了。</p><p>I_Love_C决定就用这样的方法来蒙混过关，他统计出了做完每一张试卷所需的时间以及它做完后能得到的价值（按上面的原理，选择题越多价值当然就越高咯）。</p><p>现在就请你帮他安排一下，用他仅剩的一点时间来做最有价值的作业。</p><h2 id="输入-30"><a href="#输入-30" class="headerlink" title="输入"></a>输入</h2><p>测试数据包括多组。每组测试数据以两个整数 M,N(1&lt;M&lt;20,1&lt;N&lt;10000) 开头，分别表示试卷的数目和 I_Love_C 剩下的时间。接下来有 M 行，每行包括两个整数 T,V(1&lt;T&lt;N,1&lt;V&lt;10000)分别表示做完这张试卷所需的时间以及做完后能得到的价值，输入以 0 0 结束。</p><h2 id="输出-30"><a href="#输出-30" class="headerlink" title="输出"></a>输出</h2><p>对应每组测试数据输出 I_Love_C 能获得的最大价值。保留小数点 2 位</p><p>提示：float 的精度可能不够，你应该使用 double 类型。</p><h2 id="样例输入-30"><a href="#样例输入-30" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">4 204 105 2210 31 20 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-30"><a href="#样例输出-30" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">37.00<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-29"><a href="#思路-29" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-29"><a href="#代码-29" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;bool cmp(vector&lt;double&gt;a,vector&lt;double&gt; b){return a[2] &gt; b[2];}int main(){int m,n;while(cin &gt;&gt; m &gt;&gt; n){if(m == 0 &amp;&amp; n ==0){break;}vector&lt;vector&lt;double&gt;&gt; homework(m,vector&lt;double&gt;(3,0));for(int i=0;i&lt;m;i++){cin &gt;&gt; homework[i][0] &gt;&gt; homework[i][1];homework[i][2] = homework[i][1] / homework[i][0];}sort(homework.begin(),homework.end(),cmp);double ans = 0; for(int i=0;i&lt;n;i++){if(n &gt; homework[i][0]){ans += homework[i][1];n -= homework[i][0];}else{ans += homework[i][2] * n;break;}}printf("%.2lf\n",ans);}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-E-区间包含问题"><a href="#问题-E-区间包含问题" class="headerlink" title="问题 E: 区间包含问题"></a>问题 E: 区间包含问题</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-31"><a href="#题目描述-31" class="headerlink" title="题目描述"></a>题目描述</h2><p>已知 n 个左闭右开区间 [a,b)，对其进行 m 次询问，求区间[l,r]最多可以包含 n 个区间中的多少个区间，并且被包含的所有区间都不相交。</p><h2 id="输入-31"><a href="#输入-31" class="headerlink" title="输入"></a>输入</h2><p>输入包含多组测试数据，对于每组测试数据：</p><p>第一行包含两个整数 n ,m (1≤n≤100000,1≤m≤100) 。</p><p>接下来 n 行每行包含两个整数 a ,b (0≤a&lt;b≤10^9) 。</p><p>接下来 m 行每行包含两个整数 l ,r (0≤l&lt;r≤10^9) 。</p><h2 id="输出-31"><a href="#输出-31" class="headerlink" title="输出"></a>输出</h2><p>对于每组测试数据，输出 m 行，每行包含一个整数。</p><p>数据过大请使用快速输入输出。</p><h2 id="样例输入-31"><a href="#样例输入-31" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">4 31 32 41 41 21 21 31 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-31"><a href="#样例输出-31" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">112<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="思路-30"><a href="#思路-30" class="headerlink" title="思路"></a>思路</h2><p>就是右端点小排序</p><p>优先选取满足小区间</p><h2 id="代码-30"><a href="#代码-30" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;bool cmp(vector&lt;int&gt; a, vector&lt;int&gt; b){return a[1] &lt; b[1];}int main(){int n, m;while(cin &gt;&gt; n &gt;&gt; m){vector&lt;vector&lt;int&gt;&gt; point(n,vector&lt;int&gt;(2,0));for(int i=0;i&lt;n;i++){cin &gt;&gt; point[i][0] &gt;&gt; point[i][1];}sort(point.begin(),point.end(),cmp);while(m--){int left,right;cin &gt;&gt; left &gt;&gt; right;int ans = 0;for(int i=0;i&lt;n;i++){if(point[i][1] &gt; right){break;}if(left &lt;= point[i][0]){left = point[i][1];ans++;}}cout &lt;&lt; ans &lt;&lt; endl;}}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-F-最长子序列"><a href="#问题-F-最长子序列" class="headerlink" title="问题 F: 最长子序列"></a>问题 F: 最长子序列</h1><p>时间限制: 1 Sec 内存限制: 128 MB</p><h2 id="题目描述-32"><a href="#题目描述-32" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个数组中找出和最大的连续几个数。（至少包含一个数）</p><p>例如：</p><p>数组A[] = [-2,1,-3,4,-1,2,1,-5,4]，则连续的子序列[4,-1,2,1]有最大的和6.</p><h2 id="输入-32"><a href="#输入-32" class="headerlink" title="输入"></a>输入</h2><p>第一行输入一个不超过1000的整数n。</p><p>第二行输入n个整数A[i]。</p><h2 id="输出-32"><a href="#输出-32" class="headerlink" title="输出"></a>输出</h2><p>输出一个整数，表示最大的和。</p><h2 id="样例输入-32"><a href="#样例输入-32" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">31 1 -2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-32"><a href="#样例输出-32" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="思路-31"><a href="#思路-31" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-31"><a href="#代码-31" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main(){int n;cin &gt;&gt; n;vector&lt;int&gt; nums(n,0);for(int i=0;i&lt;n;i++){cin &gt;&gt; nums[i];}int sum = 0;int ans = INT_MIN;for(int i=0;i&lt;n;i++){sum += nums[i];if(sum &gt; ans){ans = sum;}if(sum &lt; 0){sum = 0;}}cout &lt;&lt; ans &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-G-元素整除问题"><a href="#问题-G-元素整除问题" class="headerlink" title="问题 G: 元素整除问题"></a>问题 G: 元素整除问题</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-33"><a href="#题目描述-33" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入20个整数，输出其中能被数组中其它元素整除的那些数组元素。</p><h2 id="输入-33"><a href="#输入-33" class="headerlink" title="输入"></a>输入</h2><p>输入20个整数</p><h2 id="输出-33"><a href="#输出-33" class="headerlink" title="输出"></a>输出</h2><p>按输入顺序输出符合要求的数字，每行输出一个整数。</p><h2 id="样例输入-33"><a href="#样例输入-33" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="样例输出-33"><a href="#样例输出-33" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">46891012141516182021<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思路-32"><a href="#思路-32" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-32"><a href="#代码-32" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std; int main(){    vector&lt;int&gt; nums(20,0);    for(int i=0;i&lt;20;i++){        cin &gt;&gt; nums[i];    }    for(int i=0;i&lt;20;i++){        bool flag = false;        for(int j=0;j&lt;20;j++){            if(i == j){                continue;            }            if((nums[i] % nums[j]) == 0){                flag = true;            }        }        if(flag){            cout &lt;&lt; nums[i] &lt;&lt;endl;        }    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-H-渊子赛马"><a href="#问题-H-渊子赛马" class="headerlink" title="问题 H: 渊子赛马"></a>问题 H: 渊子赛马</h1><p>时间限制: 1 Sec </p><p>内存限制: 128 MB</p><h2 id="题目描述-34"><a href="#题目描述-34" class="headerlink" title="题目描述"></a>题目描述</h2><p>赛马是一古老的游戏，早在公元前四世纪的中国，处在诸侯割据的状态，历史上称为“战国时期”。在魏国作官的孙膑，因为受到同僚庞涓的迫害，被齐国使臣救出后，到达齐国国都。 赛马是当时最受齐国贵族欢迎的娱乐项目。上至国王，下到大臣，常常以赛马取乐，并以重金赌输赢。田忌多次与国王及其他大臣赌输赢，屡赌屡输。一天他赛马又输了，回家后闷闷不乐。孙膑安慰他说：“下次有机会带我到马场看看，也许我能帮你。” 孙膑仔细观察后发现，田忌的马和其他人的马相差并不远，只是策略运用不当，以致失败。 比赛前田忌按照孙膑的主意，用上等马鞍将下等马装饰起来，冒充上等马，与齐王的上等马比赛。第二场比赛，还是按照孙膑的安排，田忌用自己的上等马与国王的中等马比赛，在一片喝彩中，只见田忌的马竟然冲到齐王的马前面，赢了第二场。关键的第三场，田忌的中等马和国王的下等马比赛，田忌的马又一次冲到国王的马前面，结果二比一，田忌赢了国王。 就是这么简单，现在渊子也来赛一赛马。假设每匹马都有恒定的速度，所以速度大的马一定比速度小的马先到终点（没有意外！！）。不允许出现平局。最后谁赢的场数多于一半(不包括一半)，谁就是赢家(可能没有赢家)。渊子有 N(1&lt;=n&lt;=1000)匹马参加比赛。对手的马的数量与渊子马的数量一样，并且知道所有的马的速度。聪明的你来预测一下这场世纪之战的结果，看看渊子能否赢得比赛。</p><h2 id="输入-34"><a href="#输入-34" class="headerlink" title="输入"></a>输入</h2><p>输入有多组测试数据。 每组测试数据包括 3 行： 第一行输入 N。表示马的数量。 第二行有 N 个整型数字，即渊子的 N 匹马的速度。 第三行有 N 个整型数字，即对手的 N 匹马的速度。 当 N 为 0 时退出。</p><h2 id="输出-34"><a href="#输出-34" class="headerlink" title="输出"></a>输出</h2><p>若通过聪明的你精心安排，如果渊子能赢得比赛，那么输出YES。 否则输出NO。</p><h2 id="样例输入-34"><a href="#样例输入-34" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">52 3 3 4 51 2 3 4 542 2 1 22 2 3 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-34"><a href="#样例输出-34" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">YESNO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="思路-33"><a href="#思路-33" class="headerlink" title="思路"></a>思路</h2><p>贪心吧</p><p>先分别排序，看<code>a[i] &gt; b[j]</code>  如果大于那就赢了一把，敌方换马，如果一直没赢，因为从大到小排序，证明后面也赢不了。</p><p>切记记录失败次数。</p><h2 id="代码-33"><a href="#代码-33" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits/stdc++.h&gt;using namespace std;int main(){int n;while((cin &gt;&gt; n) &amp;&amp; n){vector&lt;int&gt; a(n,0);vector&lt;int&gt; b(n,0);for(int i=0;i&lt;n;i++){cin &gt;&gt; a[i];}for(int i=0;i&lt;n;i++){cin &gt;&gt; b[i];}sort(a.begin(),a.end());sort(b.begin(),b.end());int cnt1 =0, cnt2 = 0;int j = 0;for(int i=0;i&lt;n;i++){if(a[i] &gt; b[j]){cnt1++;j++;}else{cnt2++;}}if(cnt1 &gt; cnt2){cout &lt;&lt; "YES" &lt;&lt; endl;}else{cout &lt;&lt; "NO" &lt;&lt; endl;}}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-I-The-Hardest-Problem-Ever"><a href="#问题-I-The-Hardest-Problem-Ever" class="headerlink" title="问题 I: The Hardest Problem Ever"></a>问题 I: The Hardest Problem Ever</h1><p>时间限制: 1 Sec </p><p>内存限制: 32 MB</p><h2 id="题目描述-35"><a href="#题目描述-35" class="headerlink" title="题目描述"></a>题目描述</h2><p>Julius Caesar lived in a time of danger and intrigue. The hardest situation Caesar ever faced was keeping himself alive. In order for him to survive, he decided to create one of the first ciphers. This cipher was so incredibly sound, that no one could figure it out without knowing how it worked. </p><p>You are a sub captain of Caesar’s army. It is your job to decipher the messages sent by Caesar and provide to your general. The code is simple. For each letter in a plaintext message, you shift it five places to the right to create the secure message (i.e., if the letter is ‘A’, the cipher text would be ‘F’). Since you are creating plain text out of Caesar’s messages, you will do the opposite: </p><p>Cipher text<br>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z </p><p>Plain text<br>V W X Y Z A B C D E F G H I J K L M N O P Q R S T U </p><p>Only letters are shifted in this cipher. Any non-alphabetical character should remain the same, and all alphabetical characters will be upper case.</p><p>朱利叶斯·凯撒生活在一个充满危险和阴谋的时代。凯撒面临的最艰难的情况是让自己活着。为了让他活下来，他决定创造第一个密码。这个密码非常可靠，如果不知道它是如何工作的，就没有人能猜出它。</p><p>你是凯撒军队的副队长。你的工作是破译凯撒发送的信息并提供给你的将军。代码很简单。对于明文消息中的每个字母，您将其向右移动五位以创建安全消息（即，如果字母是“A”，则密文将是“F”）。由于您是从 Caesar 的消息中创建纯文本，因此您将执行相反的操作：</p><p>密文</p><p>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</p><p>纯文本</p><p>V W X Y Z A B C D E F G H I J K L M N O P Q R S T U</p><p>在这个密码中只有字母被移位。任何非字母字符都应保持不变，所有字母字符都将大写。</p><h2 id="输入-35"><a href="#输入-35" class="headerlink" title="输入"></a>输入</h2><p>Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets. All characters will be uppercase. </p><p>A single data set has 3 components: </p><ol><li>Start line - A single line, “START” </li><li>Cipher message - A single line containing from one to two hundred characters, inclusive, comprising a single message from Caesar </li><li>End line - A single line, “END” </li></ol><p>Following the final data set will be a single line, “ENDOFINPUT”. </p><p>此问题的输入将包含最多 100 个数据集的（非空）系列。每个数据集将根据以下描述进行格式化，并且不会有分隔数据集的空行。所有字符都将大写。</p><p>单个数据集有 3 个组成部分：</p><p>起始行 - 单行，“START”</p><p>密码消息 - 一行包含 1 到 200 个字符（含），包含来自 Caesar 的单个消息</p><p>结束行 - 单行，“END”</p><p>在最终数据集之后将是一行，“ENDOFINPUT”。</p><h2 id="输出-35"><a href="#输出-35" class="headerlink" title="输出"></a>输出</h2><p>For each data set, there will be exactly one line of output. This is the original message by Caesar.</p><p>对于每个数据集，只会有一行输出。这是凯撒的原始信息。</p><h2 id="样例输入-35"><a href="#样例输入-35" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">STARTNS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJXENDSTARTN BTZQI WFYMJW GJ KNWXY NS F QNYYQJ NGJWNFS ANQQFLJ YMFS XJHTSI NS WTRJENDSTARTIFSLJW PSTBX KZQQ BJQQ YMFY HFJXFW NX RTWJ IFSLJWTZX YMFS MJENDENDOFINPUT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-35"><a href="#样例输出-35" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSESI WOULD RATHER BE FIRST IN A LITTLE IBERIAN VILLAGE THAN SECOND IN ROMEDANGER KNOWS FULL WELL THAT CAESAR IS MORE DANGEROUS THAN HE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="思路-34"><a href="#思路-34" class="headerlink" title="思路"></a>思路</h2><p>凯撒加密，难度上没啥，就是控制输入输出得调试。</p><h2 id="代码-34"><a href="#代码-34" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits/stdc++.h&gt;using namespace std;int main(){string str;while(1){cin &gt;&gt; str;if(str == "ENDOFINPUT"){break;}else if(str == "START"){cin &gt;&gt; str;string s;getline(cin,s);s = str + s;string c;for(int i=0;i &lt; s.size();i++){if(s[i] &gt;= 'A' &amp;&amp; s[i] &lt;= 'Z'){c.push_back((s[i] - 'A'+26-5)%26 + 'A');}else{c.push_back(s[i]);}}cout &lt;&lt; c &lt;&lt; endl;}else if(str == "END"){continue;}}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="问题-J-Rock-Paper-Scissors-Tournament"><a href="#问题-J-Rock-Paper-Scissors-Tournament" class="headerlink" title="问题 J: Rock-Paper-Scissors Tournament"></a>问题 J: Rock-Paper-Scissors Tournament</h1><p>时间限制: 3 Sec </p><p>内存限制: 64 MB</p><h2 id="题目描述-36"><a href="#题目描述-36" class="headerlink" title="题目描述"></a>题目描述</h2><p>Rock-Paper-Scissors is game for two players, A and B, who each choose, independently of the other, one of rock, paper, or scissors. A player chosing paper wins over a player chosing rock; a player chosing scissors wins over a player chosing paper; a player chosing rock wins over a player chosing scissors. A player chosing the same thing as the other player neither wins nor loses.<br>A tournament has been organized in which each of n players plays k rock-scissors-paper games with each of the other players - k<em>n</em>(n-1)/2 games in total. Your job is to compute the win average for each player, defined as w / (w + l) where w is the number of games won, and l is the number of games lost, by the player. </p><p>Rock-Paper-Scissors 是 A 和 B 两个玩家的游戏，他们各自独立地选择石头、纸或剪刀之一。选择纸的玩家胜过选择石头的玩家；选择剪刀的玩家胜过选择纸的玩家；选择石头的玩家胜过选择剪刀的玩家。与其他玩家选择相同事物的玩家既不会赢也不会输。</p><p>已经组织了一个锦标赛，其中 n 个玩家中的每一个与其他每个玩家玩 k 个石头剪刀布游戏 - 总共 k<em>n</em>(n-1)/2 个游戏。您的工作是计算每个玩家的平均获胜次数，定义为 w / (w + l)，其中 w 是该玩家赢得的游戏数量，l 是该玩家输掉的游戏数量。</p><h2 id="输入-36"><a href="#输入-36" class="headerlink" title="输入"></a>输入</h2><p>Input consists of several test cases. The first line of input for each case contains 1 &lt;= n &lt;= 100 1 &lt;= k &lt;= 100 as defined above. For each game, a line follows containing p1, m1, p2, m2. 1 &lt;= p1 &lt;= n and 1 &lt;= p2 &lt;= n are distinct integers identifying two players; m1 and m2 are their respective moves (“rock”, “scissors”, or “paper”). A line containing 0 follows the last test case.</p><p>输入由几个测试用例组成。每个案例的第一行输入包含 1 &lt;= n &lt;= 100 1 &lt;= k &lt;= 100，如上所定义。对于每个游戏，后面有一行包含 p1、m1、p2、m2。 1 &lt;= p1 &lt;= n 和 1 &lt;= p2 &lt;= n 是识别两个玩家的不同整数； m1 和 m2 是它们各自的移动（“石头”、“剪刀”或“纸”）。包含 0 的行跟随最后一个测试用例。</p><h2 id="输出-36"><a href="#输出-36" class="headerlink" title="输出"></a>输出</h2><p>Output one line each for player 1, player 2, and so on, through player n, giving the player’s win average rounded to three decimal places. If the win average is undefined, output “-“. Output an empty line between cases.</p><p>为玩家 1、玩家 2 等输出一行，通过玩家 n，将玩家的胜利平均值四舍五入到小数点后三位。如果未定义获胜平均值，则输出“-”。在案例之间输出一个空行。</p><h2 id="样例输入-36"><a href="#样例输入-36" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">2 41 rock 2 paper1 scissors 2 paper1 rock 2 rock2 rock 1 scissors2 11 rock 2 paper0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-36"><a href="#样例输出-36" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">0.3330.6670.0001.000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思路-35"><a href="#思路-35" class="headerlink" title="思路"></a>思路</h2><h2 id="代码-35"><a href="#代码-35" class="headerlink" title="代码"></a>代码</h2><h1 id="问题-K-Balloon-Robot"><a href="#问题-K-Balloon-Robot" class="headerlink" title="问题 K: Balloon Robot"></a>问题 K: Balloon Robot</h1><p>时间限制: 1 Sec </p><p>内存限制: 64 MB</p><h2 id="题目描述-37"><a href="#题目描述-37" class="headerlink" title="题目描述"></a>题目描述</h2><p>The 2017 China Collegiate Programming Contest Qinhuangdao Site is coming! There will be (n) teams participating in the contest, and the contest will be held on a huge round table with (m) seats numbered from 1 to (m) in clockwise order around it. The (i)-th team will be seated on the (s_i)-th seat.</p><p>BaoBao, an enthusiast for competitive programming, has made (p) predictions of the contest result before the contest. Each prediction is in the form of ((a_i,b_i)), which means the (a_i)-th team solves a problem during the (b_i)-th time unit.</p><p>As we know, when a team solves a problem, a balloon will be rewarded to that team. The participants will be unhappy if the balloons take almost centuries to come. If a team solves a problem during the (t_a)-th time unit, and the balloon is sent to them during the (t_b)-th time unit, then the unhappiness of the team will increase by (t_b-t_a). In order to give out balloons timely, the organizers of the contest have bought a balloon robot.</p><p>At the beginning of the contest (that is to say, at the beginning of the 1st time unit), the robot will be put on the (k)-th seat and begin to move around the table. If the robot moves past a team which has won themselves some balloons after the robot’s last visit, it will give all the balloons they deserve to the team. During each unit of time, the following events will happen <strong>in order</strong>:</p><ol><li>The robot moves to the next seat. That is to say, if the robot is currently on the (i)-th ((1 \le i &lt; m)) seat, it will move to the ((i+1))-th seat; If the robot is currently on the (m)-th seat, it will move to the 1st seat.</li><li>The participants solve some problems according to BaoBao’s prediction.</li><li>The robot gives out balloons to the team seated on its current position if needed.</li></ol><p>BaoBao is interested in minimizing the total unhappiness of all the teams. Your task is to select the starting position (k) of the robot and calculate the minimum total unhappiness of all the teams according to BaoBao’s predictions.</p><h2 id="输入-37"><a href="#输入-37" class="headerlink" title="输入"></a>输入</h2><p>There are multiple test cases. The first line of the input contains an integer T, indicating the number of test cases. For each test case:</p><p>The first line contains three integers (n), (m) and (p) ((1 \le n \le 10^5), (n \le m \le 10^9), (1 \le p \le 10^5)), indicating the number of participating teams, the number of seats and the number of predictions.</p><p>The second line contains (n) integers (s_1, s_2, \dots, s_n) ((1 \le s_i \le m), and (s_i \ne s_j) for all (i \ne j)), indicating the seat number of each team.</p><p>The following (p) lines each contains two integers (a_i) and (b_i) ((1 \le a_i \le n), (1 \le b_i \le 10^9)), indicating that the (a_i)-th team solves a problem at time (b_i) according to BaoBao’s predictions.</p><p>It is guaranteed that neither the sum of (n) nor the sum of (p) over all test cases will exceed (5 \times 10^5).</p><h2 id="输出-37"><a href="#输出-37" class="headerlink" title="输出"></a>输出</h2><p>For each test case output one integer, indicating the minimum total unhappiness of all the teams according to BaoBao’s predictions.</p><h2 id="样例输入-37"><a href="#样例输入-37" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="line-numbers language-none"><code class="language-none">42 3 31 21 12 11 42 3 51 21 12 11 21 31 43 7 53 5 71 52 13 31 52 52 100 21 511 5002 1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-37"><a href="#样例输出-37" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="line-numbers language-none"><code class="language-none">14550<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思路-36"><a href="#思路-36" class="headerlink" title="思路"></a>思路</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/15/hello-world/"/>
      <url>/2021/11/15/hello-world/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="dd83036bca45ba8d5cea7ae55a21521df030010a7b1690f9c0658b6677b6aab2">b991bdc778199a23893932260ceda17c9e54b2ab27c488603f10597c1327a63e51ed528ca446cdd3aa3db8dc40d1b59a9552fc4ad3aca165a81bc59285107dbb082ccb2c7863c107a0d61f8d291d8b7b55e15446f0f45722da0e37ecab61fee75d7344e71172586c080f3011a8076be91b5cfce7f6af380122b24b46c5f6ccd70760f5b4b1bb206c00514594be46f0e8e90287579e73bf0a7f723f9336fc572ff231354b054339c3fecb7dc26e052df8a341eb6131530a1e232d722a18b54973c06723a4801146b6d06025a2974726985ecd16d6ace3bb54267be0845696535319383f2b986accc6ee2012383e28f1a5c9c9218d58b7167c01f3bf7e81ac2a0c8baec27b5f192f21c41ab77e284a81e26ceba354e1b332a3b694854f687bf38ca8f0ef43c5937d77625fb06488a7c14ee218111a11ed1cb274d703069aac681b33582f24298a7719d6ff7a8d2f16f036</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
